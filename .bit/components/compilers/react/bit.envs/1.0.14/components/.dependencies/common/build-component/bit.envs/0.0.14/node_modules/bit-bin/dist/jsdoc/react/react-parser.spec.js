"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

function _bluebird() {
  const data = require("bluebird");

  _bluebird = function () {
    return data;
  };

  return data;
}

function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));

  _fsExtra = function () {
    return data;
  };

  return data;
}

function path() {
  const data = _interopRequireWildcard(require("path"));

  path = function () {
    return data;
  };

  return data;
}

function _chai() {
  const data = require("chai");

  _chai = function () {
    return data;
  };

  return data;
}

function _() {
  const data = _interopRequireDefault(require("./"));

  _ = function () {
    return data;
  };

  return data;
}

const fixtures = path().join(__dirname, '../../..', 'fixtures', 'jsdoc');
describe('React docs Parser', () => {
  describe('parse()', () => {
    describe('Invalid code', () => {
      it('should returns an empty array',
      /*#__PURE__*/
      (0, _bluebird().coroutine)(function* () {
        const doclets = yield (0, _().default)('this is an invalid code');
        (0, _chai().expect)(doclets).to.be.undefined;
      }));
    });
    describe('React Docs', () => {
      let doclet;
      before(
      /*#__PURE__*/
      (0, _bluebird().coroutine)(function* () {
        const file = path().join(fixtures, 'react-docs.js');
        doclet = yield (0, _().default)(_fsExtra().default.readFileSync(file).toString());
        (0, _chai().expect)(doclet).to.be.an('object');
      }));
      it('should have properties parsed', () => {
        (0, _chai().expect)(doclet).to.have.property('properties');
        (0, _chai().expect)(doclet.properties).to.be.an('array').with.lengthOf(3);
      });
      it('should have methods parsed', () => {
        (0, _chai().expect)(doclet).to.have.property('methods');
        (0, _chai().expect)(doclet.methods).to.be.an('array').with.lengthOf(2);
      });
      it('should parse the description correctly', () => {
        (0, _chai().expect)(doclet).to.have.property('description').that.is.equal('Styled button component for the rich and famous!');
      });
      it('should parse the examples correctly', () => {
        (0, _chai().expect)(doclet).to.have.property('examples').that.is.an('array').with.lengthOf(1);
      });
      it('should parse the properties description correctly', () => {
        (0, _chai().expect)(doclet).to.have.property('properties').that.is.an('array');
        (0, _chai().expect)(doclet.properties[0].description).to.equal('Button text.');
      });
    });
  });
});