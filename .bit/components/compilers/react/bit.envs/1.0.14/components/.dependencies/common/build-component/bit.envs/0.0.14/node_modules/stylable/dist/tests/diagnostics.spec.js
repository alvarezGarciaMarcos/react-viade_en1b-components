"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var path_1 = require("path");
var native_reserved_lists_1 = require("../src/native-reserved-lists");
var deindent = require('deindent');
var diagnostics_1 = require("./utils/diagnostics");
var path = require('path');
var customButton = "\n    .root{\n        -st-states:shmover;\n    }\n    .my-part{\n\n    }\n    .my-variant{\n        -st-variant:true;\n        color:red;\n    }\n\n";
describe('findTestLocations', function () {
    it('find single location 1', function () {
        var l = diagnostics_1.findTestLocations('\n  |a|');
        chai_1.expect(l.start, 'start').to.eql({ line: 2, column: 3 });
        chai_1.expect(l.end, 'end').to.eql({ line: 2, column: 4 });
    });
    it('find single location 2', function () {
        var l = diagnostics_1.findTestLocations('\n  |a\n  |');
        chai_1.expect(l.start, 'start').to.eql({ line: 2, column: 3 });
        chai_1.expect(l.end, 'end').to.eql({ line: 3, column: 3 });
    });
    it('find single location with word', function () {
        var l = diagnostics_1.findTestLocations('\n  |$a$\n  |');
        chai_1.expect(l.start, 'start').to.eql({ line: 2, column: 3 });
        chai_1.expect(l.end, 'end').to.eql({ line: 3, column: 3 });
        chai_1.expect(l.word, 'end').to.eql('a');
    });
    it('striped css', function () {
        var css = '\n  |$a$\n  |';
        var l = diagnostics_1.findTestLocations(css);
        chai_1.expect(l.css, 'start').to.eql(css.replace(/[|$]/gm, ''));
    });
});
describe('diagnostics: warnings and errors', function () {
    // TODO2: next phase
    describe('syntax', function () {
        xdescribe('selectors', function () {
            it('should return warning for unidentified tag selector', function () {
                diagnostics_1.expectWarnings("\n                    |Something| {\n\n                    }\n                ", [{ message: '"Something" component is not imported', file: 'main.css' }]);
            });
            it('should return warning for unterminated "."', function () {
                diagnostics_1.expectWarnings("\n                    .root{\n\n                    }\n                    .|\n                ", [{ message: 'identifier expected', file: 'main.css' }]);
            });
            it('should return warning for unterminated ":"', function () {
                diagnostics_1.expectWarnings("\n                    .root{\n\n                    }\n                    :|\n                ", [{ message: 'identifier expected', file: 'main.css' }]);
            });
            it('should return warning for className without rule area', function () {
                diagnostics_1.expectWarnings("\n                    .root{\n\n                    }\n                    .gaga|\n                ", [{ message: '{ expected', file: 'main.css' }]);
            });
        });
        xdescribe('ruleset', function () {
            it('should return warning for unterminated ruleset', function () {
                diagnostics_1.expectWarnings("\n                    .root{\n\n                    }\n                    .gaga{\n                        color:red|\n                ", [{ message: '; expected', file: 'main.css' }]);
            });
        });
        xdescribe('rules', function () {
            it('should return warning for unterminated rule', function () {
                diagnostics_1.expectWarnings("\n                    .root{\n\n                    }\n                    .gaga{\n                        color|\n                    }\n                ", [{ message: ': expected', file: 'main.css' }]);
                diagnostics_1.expectWarnings("\n                    .root{\n\n                    }\n                    .gaga{\n                        color:|\n                    }\n                ", [{ message: 'property value expected', file: 'main.css' }]);
                // todo: add cases for any unterminated selectors (direct descendant, etc...)
            });
            it('should return warning for unknown rule', function () {
                diagnostics_1.expectWarnings("\n                    .root{\n                        |hello|:yossi;\n                    }\n                ", [{ message: 'unknown rule "hello"', file: 'main.css' }]);
            });
            it('should warn when using illegal characters', function () {
                diagnostics_1.expectWarnings("\n                    <|{\n\n                    }\n                ", [{ message: 'illegal character <', file: 'main.css' }]);
            });
            it('should return warning for unknown directive', function () {
                diagnostics_1.expectWarnings("\n                    .gaga{\n                        |-st-something|:true;\n                    }\n                ", [{ message: 'unknown directive "-st-something"', file: 'main.css' }]);
            });
        });
        describe('pseudo selectors', function () {
            xit('should return warning for native pseudo elements without selector', function () {
                diagnostics_1.expectWarnings("\n                    |::before|{\n\n                    }\n                ", [{
                        message: 'global pseudo elements are not allowed, you can use ".root::before" instead',
                        file: 'main.css'
                    }]);
            });
            describe('elements', function () {
                it('should return a warning for an unknown pseudo element', function () {
                    var config = {
                        entry: '/main.css',
                        files: {
                            '/main.css': {
                                content: "\n                                |.root::$myBtn$|{\n\n                                }"
                            }
                        }
                    };
                    diagnostics_1.expectWarningsFromTransform(config, [{ message: 'unknown pseudo element "myBtn"', file: '/main.css' }]);
                });
                native_reserved_lists_1.nativePseudoElements.forEach(function (nativeElement) {
                    it("should not return a warning for native " + nativeElement + " pseudo element", function () {
                        var selector = "|.root::$" + nativeElement + "$|{";
                        var config = {
                            entry: '/main.css',
                            files: {
                                '/main.css': {
                                    content: "\n                                    " + selector + "\n                                    }"
                                }
                            }
                        };
                        diagnostics_1.expectWarningsFromTransform(config, []);
                    });
                });
            });
        });
    });
    describe('structure', function () {
        describe('root', function () {
            it('should return warning for ".root" after selector', function () {
                diagnostics_1.expectWarnings("\n                    |.gaga .root|{}\n                ", [{ message: '.root class cannot be used after spacing', file: 'main.css' }]);
            });
        });
        describe('-st-mixin', function () {
            it('should return warning for unknown mixin', function () {
                diagnostics_1.expectWarnings("\n                    .gaga{\n                        |-st-mixin: $myMixin$|;\n                    }\n                ", [{ message: 'unknown mixin: "myMixin"', file: 'main.css' }]);
            });
            it('should add error when can not append css mixins', function () {
                var config = {
                    entry: '/main.css',
                    files: {
                        '/main.css': {
                            content: "\n                            :import {\n                                -st-from: \"./imported.st.css\";\n                                |-st-named: $my-mixin$;|\n                            }\n                            .container {\n                                -st-mixin: my-mixin;\n                            }\n                            "
                        },
                        '/imported.st.css': {
                            content: ""
                        }
                    }
                };
                diagnostics_1.expectWarningsFromTransform(config, [{ message: 'import mixin does not exist', file: '/main.css' }]);
            });
            it('should add error on circular mixins', function () {
                var config = {
                    entry: '/main.css',
                    files: {
                        '/main.css': {
                            content: "\n                            .x {\n                                -st-mixin: y;\n                            }\n                            .y {\n                                -st-mixin: x;\n                            }\n                            "
                        }
                    }
                };
                var mainPath = path.resolve('/main.css');
                var xPath = "y from " + mainPath + " --> x from " + mainPath;
                var yPath = "x from " + mainPath + " --> y from " + mainPath;
                diagnostics_1.expectWarningsFromTransform(config, [
                    { message: "circular mixin found: " + xPath, file: '/main.css', skipLocationCheck: true },
                    { message: "circular mixin found: " + yPath, file: '/main.css', skipLocationCheck: true }
                ]);
            });
            it('should add diagnostics when there is a bug in mixin', function () {
                var config = {
                    entry: '/main.css',
                    files: {
                        '/main.css': {
                            content: "\n                            :import {\n                                -st-from: \"./imported.js\";\n                                -st-default: myMixin;\n                            }\n                            |.container {\n                                -st-mixin: $myMixin$;\n                            }|\n                            "
                        },
                        '/imported.js': {
                            content: "\n                                module.exports = function(){\n                                    throw 'bug in mixin'\n                                }\n                            "
                        }
                    }
                };
                diagnostics_1.expectWarningsFromTransform(config, [{ message: 'could not apply mixin: bug in mixin', file: '/main.css' }]);
            });
            it('js mixin must be a function', function () {
                var config = {
                    entry: '/main.css',
                    files: {
                        '/main.css': {
                            content: "\n                            :import {\n                                -st-from: \"./imported.js\";\n                                -st-named: myMixin;\n                            }\n                            |.container {\n                                -st-mixin: $myMixin$;\n                            }|\n                            "
                        },
                        '/imported.js': {
                            content: "\n\n                            "
                        }
                    }
                };
                diagnostics_1.expectWarningsFromTransform(config, [{ message: 'js mixin must be a function', file: '/main.css' }]);
            });
            it('should not add warning when mixin value is a string', function () {
                var config = {
                    entry: '/main.css',
                    files: {
                        '/main.css': {
                            content: "\n                            :import {\n                                -st-from: \"./imported.js\";\n                                -st-default: myMixin;\n                            }\n                            .container {\n                                |-st-mixin: $\"myMixin\"$|;\n                            }\n                            "
                        },
                        '/imported.js': {
                            content: ""
                        }
                    }
                };
                diagnostics_1.expectWarningsFromTransform(config, [{ message: 'value can not be a string (remove quotes?)', file: '/main.css' }]);
            });
        });
        describe(':vars', function () {
            it('should return warning when defined in a complex selector', function () {
                diagnostics_1.expectWarnings("\n                |.gaga:vars|{\n                    myColor:red;\n                }\n\n                ", [{ message: 'cannot define ":vars" inside a complex selector', file: 'main.css' }]);
            });
        });
        xdescribe('-st-variant', function () {
            it('should return warning when defining variant in complex selector', function () {
                diagnostics_1.expectWarnings("\n                    .gaga:hover{\n                        |-st-variant|:true;\n                    }\n                ", [{ message: 'cannot define "-st-variant" inside complex selector', file: 'main.css' }]);
            });
            it('should return warning when -st-variant value is not true or false', function () {
                diagnostics_1.expectWarnings("\n                    .gaga {\n                        -st-variant:|red|;\n                    }\n                ", [{
                        message: '-st-variant can only be true or false, the value "red" is illegal',
                        file: 'main.css'
                    }]);
            });
        });
        describe(':import', function () {
            it('should return warning when defined in a complex selector', function () {
                diagnostics_1.expectWarnings("\n                    |.gaga:import|{\n                        -st-from:\"./file\";\n                        -st-default:Theme;\n                    }\n                ", [{ message: 'cannot define ":import" inside a complex selector', file: 'main.css' }]);
            });
            it('should return warning for non import rules inside imports', function () {
                var config = {
                    entry: '/main.css',
                    files: {
                        '/main.css': {
                            content: "\n                            :import{\n                                -st-from:\"./file.css\";\n                                -st-default:Comp;\n                                |$color$:red;|\n                            }\n                          "
                        },
                        'file.css': {
                            content: customButton
                        }
                    }
                };
                diagnostics_1.expectWarningsFromTransform(config, [{ message: "'color' css attribute cannot be used inside :import block", file: '/main.css' }]);
            });
            it('should return warning for import with missing "from"', function () {
                diagnostics_1.expectWarnings("\n\n                    |:import{\n                        -st-default:Comp;\n                    }\n                ", [{ message: "'-st-from' is missing in :import block", file: 'main.css' }]);
            });
        });
        describe('-st-extends', function () {
            it('should return warning when defined under complex selector', function () {
                diagnostics_1.expectWarnings("\n                    :import{\n                        -st-from:\"./file\";\n                        -st-default:Comp;\n                    }\n                    .root:hover{\n                        |-st-extends|:Comp;\n                    }\n                ", [{ message: 'cannot define "-st-extends" inside a complex selector', file: 'main.css' }]);
            });
            it('Only import of type class can be used to extend', function () {
                var config = {
                    entry: '/main.st.css',
                    files: {
                        '/main.st.css': {
                            content: "\n                            :import {\n                                -st-from: './file.st.css';\n                                -st-named: special;\n                            }\n                            .myclass {\n                                |-st-extends: $special$|;\n                            }\n                            "
                        },
                        '/file.st.css': {
                            content: "\n                                :vars {\n                                    special: red\n                                }\n                            "
                        }
                    }
                };
                diagnostics_1.expectWarningsFromTransform(config, [{ message: 'import is not extendable', file: '/main.st.css' }]);
            });
            it('should warn if extends by js import', function () {
                var config = {
                    entry: '/main.css',
                    files: {
                        '/main.css': {
                            content: "\n                            :import {\n                                -st-from: './file.js';\n                                -st-default: special;\n                            }\n                            .myclass {\n                                |-st-extends: $special$|\n                            }\n                            "
                        },
                        '/file.js': {
                            content: ""
                        }
                    }
                };
                diagnostics_1.expectWarningsFromTransform(config, [{ message: 'JS import is not extendable', file: '/main.css' }]);
            });
            it('should warn if named extends does not exist', function () {
                var config = {
                    entry: '/main.css',
                    files: {
                        '/main.css': {
                            content: "\n                            :import {\n                                -st-from: './file.st.css';\n                                |-st-named: $special$;|\n                            }\n                            .myclass {\n                                -st-extends: special;\n                            }\n                            "
                        },
                        '/file.st.css': {
                            content: "\n                                .notSpecial {\n                                    color: red;\n                                }\n                            "
                        }
                    }
                };
                diagnostics_1.expectWarningsFromTransform(config, [{ message: "Could not resolve 'special'", file: '/main.css' }]);
            });
            it('should warn if file not found', function () {
                var config = {
                    entry: '/main.css',
                    files: {
                        '/main.css': {
                            content: "\n                            :import {\n                                |-st-from: $'./file.css'$|;\n                                -st-default: special;\n                            }\n                            .myclass {\n                                -st-extends: special\n                            }\n                            "
                        }
                    }
                };
                diagnostics_1.expectWarningsFromTransform(config, [{ message: "Imported file '" + path_1.resolve('/file.css') + "' not found", file: '/main.css' }]);
            });
        });
        describe('override -st-* warnings', function () {
            it('should warn on typed class extend override', function () {
                diagnostics_1.expectWarnings("\n                    :import {\n                        -st-from : './file.css';\n                        -st-default: Comp;\n                    }\n                    .root {\n                        -st-extends: Comp;\n                    }\n                    .root {\n                        |-st-extends: Comp;|\n                    }\n                ", [{ message: 'override "-st-extends" on typed rule "root"', file: 'main.css' }]);
            });
        });
    });
    describe('redeclare symbols', function () {
        it('should warn override mixin on same rule', function () {
            var config = {
                entry: '/main.css',
                files: {
                    '/main.css': {
                        content: "\n                        .a {}\n                        .b {\n                            -st-mixin: a;\n                            |-st-mixin: a|;\n                        }\n                      "
                    },
                    'file.css': {
                        content: customButton
                    }
                }
            };
            diagnostics_1.expectWarningsFromTransform(config, [{ message: 'override mixin on same rule', file: '/main.css' }]);
        });
        describe('from import', function () {
            it('should warn for unknown import', function () {
                var config = {
                    entry: '/main.css',
                    files: {
                        '/main.css': {
                            content: "\n                            :import{\n                                -st-from:\"./import.css\";\n                                |-st-named: shlomo, $momo$;|\n                            }\n                            .myClass {\n                                -st-extends: shlomo;\n                            }\n                            .myClass1 {\n                                -st-extends: momo;\n                            }\n                          "
                        },
                        '/import.css': {
                            content: "\n                                .shlomo {\n                                    color: red\n                                }\n                            "
                        }
                    }
                };
                diagnostics_1.expectWarningsFromTransform(config, [{ message: "Could not resolve 'momo'", file: '/main.css' }]);
            });
            it('should warn when import redeclare same symbol (in same block)', function () {
                diagnostics_1.expectWarnings("\n                    |:import {\n                        -st-from: './file.css';\n                        -st-default: name;\n                        -st-named: $name$;\n                    }\n                ", [{ message: 'redeclare symbol "name"', file: 'main.css' }]);
            });
            it('should warn when import redeclare same symbol (in different block)', function () {
                diagnostics_1.expectWarnings("\n                    :import {\n                        -st-from: './file.css';\n                        -st-default: name;\n                    }\n                    |:import {\n                        -st-from: './file.css';\n                        -st-default: $name$;\n                    }\n                ", [{ message: 'redeclare symbol "name"', file: 'main.css' }]);
            });
            it('should warn when import redeclare same symbol (in different block types)', function () {
                diagnostics_1.expectWarnings("\n                    :import {\n                        -st-from: './file.css';\n                        -st-default: name;\n                    }\n                    :vars {\n                        |$name$: red;\n                    }\n                ", [{ message: 'redeclare symbol "name"', file: 'main.css' }]);
            });
        });
    });
    describe('complex examples', function () {
        describe(':import', function () {
            it('should return warning for unknown var import', function () {
                var config = {
                    entry: '/main.css',
                    files: {
                        '/main.css': {
                            content: "\n                            :import{\n                                -st-from:\"./file.css\";\n                                -st-default:Comp;\n                                |-st-named:$myVar$|;\n                            }\n                            .root {\n                                color:value(myVar);\n                            }"
                        },
                        '/file.css': {
                            content: customButton
                        }
                    }
                };
                diagnostics_1.expectWarningsFromTransform(config, [{ message: "cannot find export 'myVar' in './file.css'", file: '/main.css' }]);
            });
        });
        describe('cross variance', function () {
            xit('component variant cannot be used for native node', function () {
                diagnostics_1.expectWarnings("\n                    :import{\n                        -st-from:\"./file\";\n                        -st-default:Comp;\n                        -st-named:my-variant;\n                    }\n\n                    .gaga{\n                        -st-mixin:|my-variant|;\n                    }\n                ", [{
                        // tslint:disable-next-line:max-line-length
                        message: '"my-variant" cannot be applied to ".gaga", ".gaga" refers to a native node and "my-variant" can only be spplied to "$namespace of comp"',
                        file: 'main.css'
                    }]);
            });
            xit('variants can only be used for a specific component', function () {
                diagnostics_1.expectWarnings("\n                    :import{\n                        -st-from:\"./file\";\n                        -st-default:Comp;\n                        -st-named:my-variant;\n                    }\n                    :import{\n                        -st-from:\"./file2\";\n                        -st-default:Comp2;\n                        -st-named:my-variant2;\n                    }\n                    .gaga{\n                        -st-extends:Comp;\n                        -st-apply:|my-variant2|;\n                    }\n                ", [{
                        // tslint:disable-next-line:max-line-length
                        message: '"my-variant2" cannot be applied to ".gaga", ".gaga" refers to "$namespace of comp" and "my-variant" can only be spplied to "$namespace of Comp2"',
                        file: 'main.css'
                    }]);
            });
        });
    });
    describe('selectors', function () {
        // TODO2: next phase
        xit('should not allow conflicting extends', function () {
            diagnostics_1.expectWarnings("\n                :import {\n                    -st-from: \"./sheetA\";\n                    -st-named: SheetA;\n                }\n                :import {\n                    -st-from: \"./sheetB\";\n                    -st-named: SheetB;\n                }\n                .my-a { -st-extends: SheetA }\n                .my-b { -st-extends: SheetB }\n\n                .my-a.my-b {}\n                SheetA.my-b {}\n                SheetB.my-a {}\n            ", [
                { message: 'conflicting extends matching same target [.my-a.my-b]', file: 'main.css' },
                { message: 'conflicting extends matching same target [SheetA.my-b]', file: 'main.css' },
                { message: 'conflicting extends matching same target [SheetB.my-a]', file: 'main.css' }
            ]);
        });
    });
    describe('transforms', function () {
        it('should return warning if @keyframe symbol is used', function () {
            var config = {
                entry: '/main.css',
                files: {
                    '/main.css': {
                        content: "\n                        .name {}\n                        |@keyframes $name$| {\n                            from {}\n                            to {}\n                        }"
                    }
                }
            };
            diagnostics_1.expectWarningsFromTransform(config, [{ message: 'symbol name is already in use', file: '/main.css' }]);
        });
        it('should not allow @keyframe of reserved words', function () {
            native_reserved_lists_1.reservedKeyFrames.map(function (key) {
                var config = {
                    entry: '/main.css',
                    files: {
                        '/main.css': {
                            content: "\n                            |@keyframes $" + key + "$| {\n                                from {}\n                                to {}\n                            }"
                        }
                    }
                };
                diagnostics_1.expectWarningsFromTransform(config, [{ message: "keyframes " + key + " is reserved", file: '/main.css' }]);
            });
        });
        it('should return error when trying to import theme from js', function () {
            var config = {
                entry: '/main.css',
                files: {
                    '/main.css': {
                        content: "\n                        :import {\n                            -st-theme: true;\n                            |-st-from: $\"./file.js\"$|;\n                        }\n                        "
                    },
                    '/file.js': {
                        content: ""
                    }
                }
            };
            diagnostics_1.expectWarningsFromTransform(config, [{ message: 'Trying to import unknown file', file: '/main.css' }]);
        });
        it('should error on unresolved alias', function () {
            var config = {
                entry: '/main.st.css',
                files: {
                    '/main.st.css': {
                        namespace: 'entry',
                        content: "\n                            |:import{\n                                -st-from: \"./imported.st.css\";\n                                -st-default: Imported;\n                                -st-named: $inner-class$;\n                            }|\n\n                            .Imported{}\n                            .inner-class{}\n                        "
                    },
                    '/imported.st.css': {
                        namespace: 'imported',
                        content: ".root{}"
                    }
                }
            };
            diagnostics_1.expectWarningsFromTransform(config, [{ message: 'Trying to import unknown alias', file: '/main.st.css' }]);
        });
        it('should not add warning when compose value is a string', function () {
            var config = {
                entry: '/main.css',
                files: {
                    '/main.css': {
                        content: "\n                        :import {\n                            -st-from: \"./imported.css\";\n                            -st-default: myCompose;\n                        }\n                        .container {\n                            |-st-compose: $\"myCompose\"$|;\n                        }\n                        "
                    },
                    '/imported.css': {
                        content: ""
                    }
                }
            };
            diagnostics_1.expectWarningsFromTransform(config, [{ message: 'value can not be a string (remove quotes?)', file: '/main.css' }]);
        });
    });
    describe('functions', function () {
        describe('value()', function () {
            // TODO: Is there a difference in issuing warnings from process vs. transform?
            it('should return warning when passing more than one argument to a value() function', function () {
                diagnostics_1.expectWarningsFromTransform({
                    entry: '/style.st.css',
                    files: {
                        '/style.st.css': {
                            content: "\n                            :vars {\n                                color1: red;\n                                color2: gold;\n                            }\n                            .my-class {\n                                |color:value($color1, color2$)|;\n                            }\n                            "
                        }
                    }
                }, [{
                        message: 'value function accepts only a single argument: "value(color1, color2)"',
                        file: '/style.st.css'
                    }]);
            });
            it('should return warning for unknown var on transform', function () {
                diagnostics_1.expectWarningsFromTransform({
                    entry: '/style.st.css',
                    files: {
                        '/style.st.css': {
                            content: "\n                            .gaga{\n                                |color:value($myColor$)|;\n                            }\n                            "
                        }
                    }
                }, [{ message: 'unknown var "myColor"', file: '/style.st.css' }]);
            });
            it('class cannot be used as var', function () {
                var config = {
                    entry: '/main.st.css',
                    files: {
                        '/main.st.css': {
                            content: "\n                            :import{\n                                -st-from:\"./style.st.css\";\n                                -st-named:my-class;\n                            }\n                            .root{\n                                |color:value($my-class$)|;\n                            }\n                          "
                        },
                        '/style.st.css': {
                            content: "\n                                .my-class {}\n                            "
                        }
                    }
                };
                diagnostics_1.expectWarningsFromTransform(config, [{ message: 'class "my-class" cannot be used as a variable', file: '/main.st.css' }]);
            });
            it('stylesheet cannot be used as var', function () {
                var config = {
                    entry: '/main.st.css',
                    files: {
                        '/main.st.css': {
                            content: "\n                            :import{\n                                -st-from:\"./file.st.css\";\n                                -st-default:Comp;\n                            }\n                            .root{\n                                |color:value($Comp$)|;\n                            }\n                          "
                        },
                        '/file.st.css': {
                            content: ''
                        }
                    }
                };
                diagnostics_1.expectWarningsFromTransform(config, [{ message: 'stylesheet "Comp" cannot be used as a variable', file: '/main.st.css' }]);
            });
            it('JS imports cannot be used as vars', function () {
                var config = {
                    entry: '/main.st.css',
                    files: {
                        '/main.st.css': {
                            content: "\n                            :import{\n                                -st-from:\"./mixins\";\n                                -st-default:my-mixin;\n                            }\n                            .root{\n                                |color:value($my-mixin$)|;\n                            }\n                          "
                        },
                        '/mixins.js': {
                            content: "module.exports = function myMixin() {};"
                        }
                    }
                };
                diagnostics_1.expectWarningsFromTransform(config, [{ message: 'JavaScript import "my-mixin" cannot be used as a variable', file: '/main.st.css' }]);
            });
            it('should warn when encountering a cyclic dependecy in a var definition', function () {
                var config = {
                    entry: '/main.st.css',
                    files: {
                        '/main.st.css': {
                            content: "\n                            :vars {\n                                a: value(b);\n                                b: value(c);\n                                |c: value(a)|;\n                            }\n                            .root{\n                                color: value(a);\n                            }\n                          "
                        }
                    }
                };
                var mainPath = path.resolve('/main.st.css');
                diagnostics_1.expectWarningsFromTransform(config, [{ message: "Cyclic value definition detected: \"\u2192 " + mainPath + ": a\n\u21AA " + mainPath + ": b\n\u21AA " + mainPath + ": c\n\u21BB " + mainPath + ": a\"", file: '/main.st.css' }]); // tslint:disable-line:max-line-length
            });
        });
        describe('formatters', function () {
            it('should warn when trying to use a missing formatter', function () {
                var key = 'print';
                var config = {
                    entry: "/main.st.css",
                    files: {
                        '/main.st.css': {
                            content: "\n                            .container {\n                                |border: $print$|();\n                            }\n                            "
                        }
                    }
                };
                diagnostics_1.expectWarningsFromTransform(config, [{ message: "cannot find formatter: " + key, file: '/main.st.css' }]);
            });
            it('should warn a formatter throws an error', function () {
                var config = {
                    entry: "/main.st.css",
                    files: {
                        '/main.st.css': {
                            content: "\n                            :import {\n                                -st-from: \"./formatter\";\n                                -st-default: fail;\n                            }\n                            :vars {\n                                param1: red;\n                            }\n                            .some-class {\n                                |color: $fail(a, value(param1), c)$|;\n                            }\n                            "
                        },
                        '/formatter.js': {
                            content: "\n                                module.exports = function fail() {\n                                    throw new Error(\"FAIL FAIL FAIL\");\n                                }\n                            "
                        }
                    }
                };
                diagnostics_1.expectWarningsFromTransform(config, [{
                        message: "failed to execute formatter \"fail(a, red, c)\" with error: \"FAIL FAIL FAIL\"",
                        file: '/main.st.css'
                    }]);
            });
        });
        describe('native', function () {
            Object.keys(native_reserved_lists_1.nativeFunctionsDic).forEach(function (cssFunc) {
                it("should not return a warning for native " + cssFunc + " pseudo class", function () {
                    var config = {
                        entry: '/main.css',
                        files: {
                            '/main.css': {
                                content: "\n                                .myClass {\n                                    background: " + cssFunc + "(a, b, c);\n                                }"
                            }
                        }
                    };
                    diagnostics_1.expectWarningsFromTransform(config, []);
                });
            });
        });
    });
});
//# sourceMappingURL=diagnostics.spec.js.map