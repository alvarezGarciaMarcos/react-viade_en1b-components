"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

function _chai() {
  const data = require("chai");

  _chai = function () {
    return data;
  };

  return data;
}

function _queryBuilder() {
  const data = _interopRequireDefault(require("../search/query-builder"));

  _queryBuilder = function () {
    return data;
  };

  return data;
}

describe('query-builder', () => {
  describe('buildQuery', () => {
    const queryToObject = query => query.reduce((acc, val) => Object.assign(acc, val.AND), {});

    it('should produce a clause for the name field as is', () => {
      const query = queryToObject((0, _queryBuilder().default)('is-string'));
      (0, _chai().expect)(query.name).to.eql(['is-string']);
    });
    it('should produce a clause for the name field tokenized', () => {
      const query = queryToObject((0, _queryBuilder().default)('is-string'));
      (0, _chai().expect)(query.tokenizedName).to.eql(['is', 'string']);
    });
    it('should produce clauses for the stem version of the search query', () => {
      const query = queryToObject((0, _queryBuilder().default)('casting int'));
      (0, _chai().expect)(query.stemmedName).to.eql(['cast', 'int']);
      (0, _chai().expect)(query.stemmedMinDescription).to.eql(['cast', 'int']);
    });
  });
});