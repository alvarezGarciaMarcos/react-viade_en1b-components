"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var path = require("path");
var generate_test_util_1 = require("../utils/generate-test-util");
describe('post-process-and-hooks', function () {
    it('should call postProcess after transform and use it\'s return value', function () {
        var t = generate_test_util_1.createTransformer({
            files: {
                '/entry.st.css': {
                    namespace: 'entry',
                    content: "\n                        :vars {\n                            param: \"red\";\n                            param1: green;\n                        }\n                        .container {\n                            color: value(param);\n                            background: value(param1);\n                        }\n                        "
                }
            }
        }, undefined, undefined, function (res) {
            return __assign({}, res, { postProcessed: true });
        });
        var res = t.transform(t.fileProcessor.process('/entry.st.css'));
        chai_1.expect(res).to.contain({ postProcessed: true });
    });
    it('should call replaceValueHook on js function', function () {
        var t = generate_test_util_1.createTransformer({
            files: {
                '/entry.st.css': {
                    namespace: 'entry',
                    content: "\n                        :import {\n                            -st-from: './function.js';\n                            -st-named: fn1, fn2;\n                        }\n                        .container {\n                            color: fn1(fn2(1));\n                        }\n                        "
                },
                '/function.js': {
                    content: "\n                        module.exports.fn1 = function(x){return 'fn1'}\n                        module.exports.fn2 = function(x){return 'fn2'}\n                    "
                }
            }
        }, undefined, function (_resolved, fn) {
            if (typeof fn !== 'string') {
                return "hooked_" + fn.name + "(" + fn.args + ")";
            }
            return '';
        });
        var res = t.transform(t.fileProcessor.process('/entry.st.css'));
        var rule = res.meta.outputAst.nodes[0];
        chai_1.expect(rule.nodes[0].value).to.equal('hooked_fn1(hooked_fn2(1))');
    });
    it('should call replaceValueHook and use it\'s return value', function () {
        var valueCallCount = 0;
        var t = generate_test_util_1.createTransformer({
            files: {
                '/entry.st.css': {
                    namespace: 'entry',
                    content: "\n                        :vars {\n                            param: \"red\";\n                            param1: green;\n                        }\n                        .container {\n                            color: value(param);\n                            background: value(param1);\n                        }\n                        "
                }
            }
        }, undefined, function (resolved, name, isLocal) {
            return "__VALUE__" + valueCallCount++ + " " + resolved + "-" + name + "-" + isLocal;
        });
        var res = t.transform(t.fileProcessor.process('/entry.st.css'));
        var rule = res.meta.outputAst.nodes[0];
        chai_1.expect(rule.nodes[0].value).to.equal('__VALUE__0 red-param-true');
        chai_1.expect(rule.nodes[1].value).to.equal('__VALUE__1 green-param1-true');
    });
    it('should call replaceValueHook on mixin overrides', function () {
        var index = 0;
        var expectedValueCalls = [
            ['green', 'param1', true, []]
        ];
        var t = generate_test_util_1.createTransformer({
            files: {
                '/entry.st.css': {
                    namespace: 'entry',
                    content: "\n                        :import {\n                            -st-from: \"./style.st.css\";\n                            -st-default: Style\n                        }\n                        :vars {\n                            myColor: red;\n                            myBG: green;\n                        }\n                        .root {\n                            -st-mixin: Style(param value(myColor), param1 value(myBG));\n                        }\n                    "
                },
                '/style.st.css': {
                    namespace: 'style',
                    content: "\n                        :import {\n                            -st-from: \"./style1.st.css\";\n                            -st-named: x\n                        }\n                        :vars {\n                            param: red;\n                            param1: green;\n                            param2: \"Ariel\";\n                        }\n                        .root {\n                            -st-mixin: x(var1 value(param2));\n                            color: value(param);\n                            background: value(param1);\n                            font-family: value(param2);\n                        }\n                    "
                },
                '/style1.st.css': {
                    namespace: 'style1',
                    content: "\n                        :vars {\n                            var1: green;\n                        }\n                        .x {\n                            border: 4px solid value(var1);\n                        }\n                    "
                }
            }
        }, undefined, function (resolved, name, isLocal, path) {
            var m = expected[index];
            chai_1.expect([resolved, name, isLocal, path], [resolved, name, isLocal, path].join(',')).to.eqls(m);
            index++;
            return (isLocal && path.length === 0) ? "[" + name + "]" : resolved;
        });
        var expected = [
            ['red', 'myColor', true, []],
            ['green', 'myBG', true, []],
            ['Ariel', 'param2', true, ["default from " + path.resolve('/entry.st.css')]],
            ['Ariel', 'param2', true, ["default from " + path.resolve('/entry.st.css')]]
        ];
        var res = t.transform(t.fileProcessor.process('/entry.st.css'));
    });
    it('should enable/disable root scoping by flag (enable)', function () {
        var t = generate_test_util_1.createTransformer({
            scopeRoot: true,
            files: {
                '/entry.st.css': {
                    namespace: 'entry',
                    content: "\n                        .container {\n                        }\n                        & .container {\n                        }\n                        "
                }
            }
        });
        var res = t.transform(t.fileProcessor.process('/entry.st.css'));
        var rule = res.meta.outputAst.nodes[0];
        chai_1.expect(rule.selector).to.equal('.entry--root .entry--container');
        var rule1 = res.meta.outputAst.nodes[1];
        chai_1.expect(rule1.selector).to.equal('& .entry--container');
    });
    it('should enable/disable root scoping by flag (disable)', function () {
        var t = generate_test_util_1.createTransformer({
            scopeRoot: false,
            files: {
                '/entry.st.css': {
                    namespace: 'entry',
                    content: "\n                        .container {\n                        }\n                        "
                }
            }
        });
        var res = t.transform(t.fileProcessor.process('/entry.st.css'));
        var rule = res.meta.outputAst.nodes[0];
        chai_1.expect(rule.selector).to.equal('.entry--container');
    });
});
//# sourceMappingURL=post-process-and-hooks.spec.js.map