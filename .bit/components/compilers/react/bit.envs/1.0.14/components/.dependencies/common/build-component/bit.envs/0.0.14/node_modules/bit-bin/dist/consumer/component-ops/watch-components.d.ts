import chokidar from 'chokidar';
import Consumer from '../consumer';
import { BitId } from '../../bit-id';
export declare const STARTED_WATCHING_MSG = "started watching for component changes to rebuild";
export declare const WATCHER_COMPLETED_MSG = "watching for changes";
export default class WatchComponents {
    consumer: Consumer;
    verbose: boolean;
    trackDirs: {
        [dir: string]: string;
    };
    constructor(verbose: boolean);
    watchAll(): Promise<unknown>;
    _handleChange(filePath: string, isNew?: boolean): Promise<void>;
    _getBitIdByPathAndReloadConsumer(filePath: string, isNew: boolean): Promise<BitId | null | undefined>;
    _getWatcher(): chokidar.FSWatcher;
    _getPathsToWatch(): string[];
}
