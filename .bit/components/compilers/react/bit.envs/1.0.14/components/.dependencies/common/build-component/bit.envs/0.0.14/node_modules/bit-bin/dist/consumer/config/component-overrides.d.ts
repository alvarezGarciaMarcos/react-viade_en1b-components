import ComponentConfig from './component-config';
import { ConsumerOverridesOfComponent } from './consumer-overrides';
export declare const componentOverridesForbiddenFields: string[];
export declare type ComponentOverridesData = {
    dependencies?: Record<string, any>;
    devDependencies?: Record<string, any>;
    peerDependencies?: Record<string, any>;
    [key: string]: any;
};
export default class ComponentOverrides {
    overrides: ConsumerOverridesOfComponent;
    constructor(overrides: ConsumerOverridesOfComponent | null | undefined);
    static loadFromConsumer(overridesFromConsumer: ConsumerOverridesOfComponent | null | undefined, overridesFromModel: ComponentOverridesData | null | undefined, componentConfig: ComponentConfig | null | undefined, isAuthor: boolean): ComponentOverrides;
    static loadFromScope(overridesFromModel?: ComponentOverridesData | null | undefined): any;
    readonly componentOverridesData: any;
    readonly componentOverridesPackageJsonData: any;
    getComponentDependenciesWithVersion(): Record<string, any>;
    _filterForComponentWithValidVersion(deps: Record<string, any>): Record<string, any>;
    _isValidVersion(ver: string): boolean;
    getIgnored(field: string): string[];
    getIgnoredFiles(field: string): string[];
    getIgnoredComponents(field: string): string[];
    _getComponentNamesFromPackages(idStr: string): string[];
    getIgnoredPackages(field: string): string[];
    stripOriginallySharedDir(sharedDir: string | null | undefined): void;
    addOriginallySharedDir(sharedDir: string | null | undefined): void;
    static getAllFilesPaths(overrides: Record<string, any>): string[];
    clone(): ComponentOverrides;
}
