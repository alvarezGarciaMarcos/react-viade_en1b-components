"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function path() {
  const data = _interopRequireWildcard(require("path"));

  path = function () {
    return data;
  };

  return data;
}

function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));

  _fsExtra = function () {
    return data;
  };

  return data;
}

class PackageJsonHelper {
  constructor(scopes) {
    (0, _defineProperty2().default)(this, "scopes", void 0);
    this.scopes = scopes;
  }

  read(packageJsonFolder = this.scopes.localPath) {
    const packageJsonPath = path().join(packageJsonFolder, 'package.json');
    return _fsExtra().default.readJSONSync(packageJsonPath) || {};
  }

  write(packageJson, packageJsonFolder = this.scopes.localPath) {
    const packageJsonPath = path().join(packageJsonFolder, 'package.json');
    return _fsExtra().default.writeJSONSync(packageJsonPath, packageJson, {
      spaces: 2
    });
  }

  create(data, location = this.scopes.localPath) {
    const packageJsonPath = path().join(location, 'package.json');

    _fsExtra().default.writeJSONSync(packageJsonPath, data, {
      spaces: 2
    });
  }

  corrupt(packageJsonPath = path().join(this.scopes.localPath, 'package.json')) {
    _fsExtra().default.writeFileSync(packageJsonPath, '{ corrupted');
  }

  addKeyValue(data, pkgJsonPath = path().join(this.scopes.localPath)) {
    const pkgJson = this.read(pkgJsonPath);

    _fsExtra().default.writeJSONSync(path().join(pkgJsonPath, 'package.json'), Object.assign(pkgJson, data), {
      spaces: 2
    });
  }

  readComponentPackageJson(id) {
    const packageJsonFolderPath = path().join(this.scopes.localPath, 'components', id);
    return this.read(packageJsonFolderPath);
  }

}

exports.default = PackageJsonHelper;