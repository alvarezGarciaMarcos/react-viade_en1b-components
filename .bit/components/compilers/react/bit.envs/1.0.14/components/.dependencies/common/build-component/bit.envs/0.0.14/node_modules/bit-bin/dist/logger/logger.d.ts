import { Logger } from 'winston';
export declare const baseFileTransportOpts: {
    filename: string;
    format: import("logform").Format;
    level: string;
    maxsize: number;
    maxFiles: number;
    tailable: boolean;
};
export declare function getFormat(): import("logform").Format;
declare class BitLogger {
    logger: Logger;
    shouldWriteToConsole: boolean;
    constructor(logger: Logger);
    debug(...args: any[]): void;
    warn(...args: any[]): void;
    info(...args: any[]): void;
    error(...args: any[]): void;
    console(msg: string, level?: string): void;
    exitAfterFlush(code: number | undefined, commandName: string): Promise<void>;
    debugAndAddBreadCrumb(category: string, message: string, data?: Record<string, any>, extraData?: Record<string, any>): void;
    warnAndAddBreadCrumb(category: string, message: string, data?: Record<string, any>, extraData?: Record<string, any>): void;
    errorAndAddBreadCrumb(category: string, message: string, data?: Record<string, any>, extraData?: Record<string, any>): void;
    addToLoggerAndToBreadCrumb(level: string, category: string, message: string, data?: Record<string, any>, extraData?: Record<string, any> | null | undefined): void;
}
declare const logger: BitLogger;
export declare const createExtensionLogger: (extensionName: string) => any;
export declare const printWarning: (msg: string) => void;
export default logger;
