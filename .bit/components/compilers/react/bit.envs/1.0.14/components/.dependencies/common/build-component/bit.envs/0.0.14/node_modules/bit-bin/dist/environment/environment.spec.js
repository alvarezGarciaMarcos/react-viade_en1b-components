"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

function _chai() {
  const data = require("chai");

  _chai = function () {
    return data;
  };

  return data;
}

function _sinon() {
  const data = _interopRequireDefault(require("sinon"));

  _sinon = function () {
    return data;
  };

  return data;
}

function _environment() {
  const data = _interopRequireDefault(require("../environment"));

  _environment = function () {
    return data;
  };

  return data;
}

function _scope() {
  const data = require("../scope");

  _scope = function () {
    return data;
  };

  return data;
}

describe('Environment', () => {
  let sandbox;
  beforeEach(() => {
    sandbox = _sinon().default.createSandbox();
  });
  afterEach(() => {
    sandbox.restore();
  });
  describe('constructor', () => {
    it.skip('should generate a unique path for every instance', () => {
      sandbox.stub(_scope().Scope, 'load').returns({
        getPath: () => ''
      }); // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!

      const scope = _scope().Scope.load(); // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!


      const environment1 = new (_environment().default)(scope); // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!

      const environment2 = new (_environment().default)(scope);
      (0, _chai().expect)(environment1.path).not.to.be.equal(environment2.path);
    });
  });
});