"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var path = require("path");
var native_reserved_lists_1 = require("../src/native-reserved-lists");
var diagnostics_1 = require("./utils/diagnostics");
var generate_test_util_1 = require("./utils/generate-test-util");
describe('Stylable functions (native, formatter and variable)', function () {
    describe('transform', function () {
        it('apply simple js formatter with no arguments', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/style.st.css",
                files: {
                    '/style.st.css': {
                        content: "\n                            :import {\n                                -st-from: \"./formatter\";\n                                -st-default: colorGreen;\n                            }\n                            .container {\n                                background: colorGreen();\n                            }\n                        "
                    },
                    '/formatter.js': {
                        content: "\n                            module.exports = function() {\n                                return 'green';\n                            }\n                        "
                    }
                }
            });
            var rule = result.nodes[0];
            chai_1.expect(rule.nodes[0].toString()).to.equal('background: green');
        });
        it('apply simple js formatter with a single argument', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/style.st.css",
                files: {
                    '/style.st.css': {
                        content: "\n                            :import {\n                                -st-from: \"./formatter\";\n                                -st-default: color;\n                            }\n                            .container {\n                                background: color(green);\n                            }\n                        "
                    },
                    '/formatter.js': {
                        content: "\n                            module.exports = function(color) {\n                                return color;\n                            }\n                        "
                    }
                }
            });
            var rule = result.nodes[0];
            chai_1.expect(rule.nodes[0].toString()).to.equal('background: green');
        });
        it('apply simple js formatter with a multiple arguments', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/style.st.css",
                files: {
                    '/style.st.css': {
                        content: "\n                            :import {\n                                -st-from: \"./formatter\";\n                                -st-default: myBorder;\n                            }\n                            .container {\n                                border: myBorder(2px, solid, green);\n                            }\n                        "
                    },
                    '/formatter.js': {
                        content: "\n                            module.exports = function(size, style, color) {\n                                return size + \" \" + style + \" \" + color;\n                            }\n                        "
                    }
                }
            });
            var rule = result.nodes[0];
            chai_1.expect(rule.nodes[0].toString()).to.equal('border: 2px solid green');
        });
        it('apply simple js formatter with a nested formatter', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/style.st.css",
                files: {
                    '/style.st.css': {
                        content: "\n                            :import {\n                                -st-from: \"./formatter\";\n                                -st-default: addSomePx;\n                                -st-named: border;\n                            }\n                            .container {\n                                border: border(addSomePx(1, 5), solid, green);\n                            }\n                        "
                    },
                    '/formatter.js': {
                        content: "\n                            module.exports = function(size, toAdd) {\n                                return Number(size) + Number(toAdd) + 'px';\n                            }\n                            module.exports.border = function(size, style, color) {\n                                return size + \" \" + style + \" \" + color;\n                            }\n                        "
                    }
                }
            });
            var rule = result.nodes[0];
            chai_1.expect(rule.nodes[0].toString()).to.equal('border: 6px solid green');
        });
        it('should parse arguments passed to a formatter, seperated by commas', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/style.st.css",
                files: {
                    '/style.st.css': {
                        content: "\n                            :import {\n                                -st-from: \"./formatter\";\n                                -st-default: print;\n                                -st-named: argsAmount;\n                            }\n                            :vars {\n                                x: 1;\n                            }\n                            .container {\n                                border: print(argsAmount(a, a b, value(x) str), argsAmount(2, 2) argsAmount(1));\n                            }\n                        "
                    },
                    '/formatter.js': {
                        content: "\n                            module.exports = function() {\n                                return Array.prototype.join.call(arguments, ' ');\n                            }\n                            module.exports.argsAmount = function() {\n                                return arguments.length;\n                            }\n                        "
                    }
                }
            });
            var rule = result.nodes[0];
            chai_1.expect(rule.nodes[0].toString()).to.equal('border: 3 2 1');
        });
        describe('native', function () {
            Object.keys(native_reserved_lists_1.nativeFunctionsDic).forEach(function (cssFunc) {
                // cannot use formatter inside a url naitve function
                if (cssFunc !== 'url') {
                    it("should pass through native function (" + cssFunc + ") and resolve formatters", function () {
                        var result = generate_test_util_1.generateStylableRoot({
                            entry: "/style.st.css",
                            files: {
                                '/style.st.css': {
                                    content: "\n                                        :import {\n                                            -st-from: \"./formatter\";\n                                            -st-default: print;\n                                        }\n                                        .container {\n                                            border: " + cssFunc + "(" + cssFunc + "(print(print(1))));\n                                        }\n                                    "
                                },
                                '/formatter.js': {
                                    content: "\n                                        module.exports = function(arg) {\n                                            return arg;\n                                        }\n                                    "
                                }
                            }
                        });
                        var rule = result.nodes[0];
                        chai_1.expect(rule.nodes[0].toString()).to.equal("border: " + cssFunc + "(" + cssFunc + "(1))");
                    });
                }
            });
            it('should pass-through native css functions', function () {
                var result = generate_test_util_1.generateStylableRoot({
                    entry: "/style.st.css",
                    files: {
                        '/style.st.css': {
                            content: "\n                                :import {\n                                    -st-from: \"./formatter\";\n                                    -st-default: print;\n                                }\n                                :import {\n                                    -st-from: \"./vars.st.css\";\n                                    -st-named: myVar;\n                                }\n                                .container {\n                                    background: print(value(myVar));\n                                }\n                            "
                        },
                        '/vars.st.css': {
                            content: "\n                                :vars {\n                                    myVar: calc(42 * 42);\n                                }\n                            "
                        },
                        '/formatter.js': {
                            content: "\n                                module.exports = function() {\n                                    return [...arguments].filter(Boolean).join(' ');\n                                }\n                            "
                        }
                    }
                });
                var rule = result.nodes[0];
                chai_1.expect(rule.nodes[0].toString()).to.equal('background: calc(42 * 42)');
            });
            xit('should allow using formatters inside a url native function', function () {
                // see: https://github.com/TrySound/postcss-value-parser/issues/34
                var result = generate_test_util_1.generateStylableRoot({
                    entry: "/style.st.css",
                    files: {
                        '/style.st.css': {
                            content: "\n                                :import {\n                                    -st-from: \"./formatter\";\n                                    -st-default: print;\n                                }\n                                .container {\n                                    background: url(print(some-static-url));\n                                }\n                            "
                        },
                        '/formatter.js': {
                            content: "\n                                module.exports = function print(arg) {\n                                    return arg;\n                                }\n                            "
                        }
                    }
                });
                var rule = result.nodes[0];
                chai_1.expect(rule.nodes[0].toString()).to.equal('background: url("some-static-url")');
            });
            it('should support a native url function', function () {
                var result = generate_test_util_1.generateStylableRoot({
                    entry: "/style.st.css",
                    files: {
                        '/style.st.css': {
                            content: "\n                                .container {\n                                    background: url(\"some-static-url\");\n                                }\n                            "
                        }
                    }
                });
                var rule = result.nodes[0];
                chai_1.expect(rule.nodes[0].toString()).to.equal('background: url("some-static-url")');
            });
        });
        it('passes through cyclic vars', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/style.st.css",
                files: {
                    '/style.st.css': {
                        content: "\n                            :import {\n                                -st-from: \"./formatter\";\n                                -st-default: print;\n                            }\n                            :vars {\n                                a: value(b);\n                                b: value(a);\n                            }\n                            .container {\n                                border: print(print(value(a)));\n                            }\n                        "
                    },
                    '/formatter.js': {
                        content: "\n                            module.exports = function(result) {\n                                return result;\n                            }\n                        "
                    }
                }
            });
            var rule = result.nodes[0];
            chai_1.expect(rule.nodes[0].toString()).to.equal('border: value(a)');
        });
        it('passes through cyclic vars through multiple files', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/style.st.css",
                files: {
                    '/style.st.css': {
                        content: "\n                        :import {\n                            -st-from: \"./style1.st.css\";\n                            -st-named: color2;\n                        }\n                        :vars {\n                            color1: 1px value(color2);\n                        }\n                        .container {\n                            background: value(color2);\n                        }\n                    "
                    },
                    '/style1.st.css': {
                        content: "\n                            :import {\n                                -st-from: \"./style.st.css\";\n                                -st-named: color1\n                            }\n                            :vars {\n                                color2: value(color1)\n                            }\n                        "
                    }
                }
            });
            var rule = result.nodes[0];
            chai_1.expect(rule.nodes[0].toString()).to.equal('background: 1px value(color2)');
        });
        it('should support using formatters in variable declarations', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/style.st.css",
                files: {
                    '/style.st.css': {
                        content: "\n                            :import {\n                                -st-from: \"./formatter\";\n                                -st-default: myBorder;\n                            }\n                            :vars {\n                                border: myBorder(5, 1);\n                            }\n                            .container {\n                                border: value(border);\n                            }\n                        "
                    },
                    '/formatter.js': {
                        content: "\n                            module.exports = function myBorder(amount, size) {\n                                return (Number(size) + Number(amount)) + 'px';\n                            }\n                        "
                    }
                }
            });
            var rule = result.nodes[0];
            chai_1.expect(rule.nodes[0].toString()).to.equal('border: 6px');
        });
        it('should support using formatters in an imported variable declarations', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/style.st.css",
                files: {
                    '/style.st.css': {
                        content: "\n                            :import {\n                                -st-from: \"./vars.st.css\";\n                                -st-named: color1;\n                            }\n                            .container {\n                                background: value(color1);\n                            }\n                        "
                    },
                    '/vars.st.css': {
                        content: "\n                            :import {\n                                -st-from: \"./formatter\";\n                                -st-default: getGreen;\n                            }\n                            :vars {\n                                color1: getGreen();\n                            }\n                        "
                    },
                    '/formatter.js': {
                        content: "\n                            module.exports = function getGreen() {\n                                return 'green';\n                            }\n                        "
                    }
                }
            });
            var rule = result.nodes[0];
            chai_1.expect(rule.nodes[0].toString()).to.equal('background: green');
        });
        it('should support using formatters in a complex multi file scenario', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/style.st.css",
                files: {
                    '/style.st.css': {
                        content: "\n                            :import {\n                                -st-from: \"./vars-outer.st.css\";\n                                -st-named: myBorder;\n                            }\n                            .container {\n                                border: value(myBorder);\n                            }\n                        "
                    },
                    '/vars-outer.st.css': {
                        content: "\n                            :import {\n                                -st-from: \"./formatter-outer\";\n                                -st-default: normalizeBorder;\n                            }\n                            :import {\n                                -st-from: \"./vars-inner.st.css\";\n                                -st-named: borderSize;\n                            }\n                            :vars {\n                                myBorder: normalizeBorder(value(borderSize));\n                            }\n                        "
                    },
                    '/formatter-outer.js': {
                        content: "\n                            module.exports = function normalizeBorder(size) {\n                                return size + 'px' + ' ' + 'solid black';\n                            }\n                        "
                    },
                    '/vars-inner.st.css': {
                        content: "\n                            :import {\n                                -st-from: \"./formatter-inner\";\n                                -st-default: biggerByTwo;\n                            }\n                            :vars {\n                                borderSize: biggerByTwo(1);\n                            }\n                        "
                    },
                    '/formatter-inner.js': {
                        content: "\n                            module.exports = function biggerByTwo(origSize) {\n                                return Number(origSize) + 2;\n                            }\n                        "
                    }
                }
            });
            var rule = result.nodes[0];
            chai_1.expect(rule.nodes[0].toString()).to.equal('border: 3px solid black');
        });
        it('should support using formatters in a complex multi file scenario', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/style.st.css",
                files: {
                    '/style.st.css': {
                        content: "\n                            :import {\n                                -st-from: \"./formatter\";\n                                -st-default: maxWidthAdd50Px;\n                            }\n                            :vars {\n                                bigScreenWidth: 1800;\n                            }\n                            @media maxWidthAdd50Px(value(bigScreenWidth)) {}\n                        "
                    },
                    '/formatter.js': {
                        content: "\n                            module.exports = function maxWidthAdd50Px(origSize) {\n                                return \"max-width: \" + (Number(origSize) + Number(50)) + \"px\";\n                            }\n                        "
                    }
                }
            });
            var rule = result.nodes[0];
            chai_1.expect(rule.params).to.equal('max-width: 1850px');
        });
        it('should gracefully fail when a formatter throws an error and return the source', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/style.st.css",
                files: {
                    '/style.st.css': {
                        content: "\n                            :import {\n                                -st-from: \"./formatter\";\n                                -st-default: fail;\n                            }\n                            :vars {\n                                param1: red;\n                            }\n                            .some-class {\n                                color: fail(a, value(param1), c);\n                            }\n                        "
                    },
                    '/formatter.js': {
                        content: "\n                            module.exports = function fail() {\n                                throw new Error(\"FAIL FAIL FAIL\");\n                            }\n                        "
                    }
                }
            });
            var rule = result.nodes[0];
            chai_1.expect(rule.nodes[0].toString()).to.equal('color: fail(a, red, c)');
        });
    });
    describe('diagnostics', function () {
        describe('value()', function () {
            it('should return warning when passing more than one argument to a value() function', function () {
                diagnostics_1.expectWarningsFromTransform({
                    entry: '/style.st.css',
                    files: {
                        '/style.st.css': {
                            content: "\n                            :vars {\n                                color1: red;\n                                color2: gold;\n                            }\n                            .my-class {\n                                |color:value($color1, color2$)|;\n                            }\n                            "
                        }
                    }
                }, [{
                        message: 'value function accepts only a single argument: "value(color1, color2)"',
                        file: '/style.st.css'
                    }]);
            });
            it('should return warning for unknown var on transform', function () {
                diagnostics_1.expectWarningsFromTransform({
                    entry: '/style.st.css',
                    files: {
                        '/style.st.css': {
                            content: "\n                            .gaga{\n                                |color:value($myColor$)|;\n                            }\n                            "
                        }
                    }
                }, [{ message: 'unknown var "myColor"', file: '/style.st.css' }]);
            });
            it('class cannot be used as var', function () {
                var config = {
                    entry: '/main.st.css',
                    files: {
                        '/main.st.css': {
                            content: "\n                            :import{\n                                -st-from:\"./style.st.css\";\n                                -st-named:my-class;\n                            }\n                            .root{\n                                |color:value($my-class$)|;\n                            }\n                          "
                        },
                        '/style.st.css': {
                            content: "\n                                .my-class {}\n                            "
                        }
                    }
                };
                diagnostics_1.expectWarningsFromTransform(config, [{ message: 'class "my-class" cannot be used as a variable', file: '/main.st.css' }]);
            });
            it('stylesheet cannot be used as var', function () {
                var config = {
                    entry: '/main.st.css',
                    files: {
                        '/main.st.css': {
                            content: "\n                            :import{\n                                -st-from:\"./file.st.css\";\n                                -st-default:Comp;\n                            }\n                            .root{\n                                |color:value($Comp$)|;\n                            }\n                          "
                        },
                        '/file.st.css': {
                            content: ''
                        }
                    }
                };
                diagnostics_1.expectWarningsFromTransform(config, [{ message: 'stylesheet "Comp" cannot be used as a variable', file: '/main.st.css' }]);
            });
            it('JS imports cannot be used as vars', function () {
                var config = {
                    entry: '/main.st.css',
                    files: {
                        '/main.st.css': {
                            content: "\n                            :import{\n                                -st-from:\"./mixins\";\n                                -st-default:my-mixin;\n                            }\n                            .root{\n                                |color:value($my-mixin$)|;\n                            }\n                          "
                        },
                        '/mixins.js': {
                            content: "module.exports = function myMixin() {};"
                        }
                    }
                };
                diagnostics_1.expectWarningsFromTransform(config, [{ message: 'JavaScript import "my-mixin" cannot be used as a variable', file: '/main.st.css' }]);
            });
            it('should warn when encountering a cyclic dependecy in a var definition', function () {
                var config = {
                    entry: '/main.st.css',
                    files: {
                        '/main.st.css': {
                            content: "\n                            :vars {\n                                a: value(b);\n                                b: value(c);\n                                |c: value(a)|;\n                            }\n                            .root{\n                                color: value(a);\n                            }\n                          "
                        }
                    }
                };
                var mainPath = path.resolve('/main.st.css');
                diagnostics_1.expectWarningsFromTransform(config, [{ message: "Cyclic value definition detected: \"\u2192 " + mainPath + ": a\n\u21AA " + mainPath + ": b\n\u21AA " + mainPath + ": c\n\u21BB " + mainPath + ": a\"", file: '/main.st.css' }]); // tslint:disable-line:max-line-length
            });
        });
        describe('formatters', function () {
            it('should warn when trying to use a missing formatter', function () {
                var key = 'print';
                var config = {
                    entry: "/main.st.css",
                    files: {
                        '/main.st.css': {
                            content: "\n                            .container {\n                                |border: $print$|();\n                            }\n                            "
                        }
                    }
                };
                diagnostics_1.expectWarningsFromTransform(config, [{ message: "cannot find formatter: " + key, file: '/main.st.css' }]);
            });
            it('should warn a formatter throws an error', function () {
                var key = 'print';
                var config = {
                    entry: "/main.st.css",
                    files: {
                        '/main.st.css': {
                            content: "\n                            :import {\n                                -st-from: \"./formatter\";\n                                -st-default: fail;\n                            }\n                            :vars {\n                                param1: red;\n                            }\n                            .some-class {\n                                |color: $fail(a, value(param1), c)$|;\n                            }\n                            "
                        },
                        '/formatter.js': {
                            content: "\n                                module.exports = function fail() {\n                                    throw new Error(\"FAIL FAIL FAIL\");\n                                }\n                            "
                        }
                    }
                };
                diagnostics_1.expectWarningsFromTransform(config, [{
                        message: "failed to execute formatter \"fail(a, red, c)\" with error: \"FAIL FAIL FAIL\"",
                        file: '/main.st.css'
                    }]);
            });
        });
        describe('native', function () {
            Object.keys(native_reserved_lists_1.nativeFunctionsDic).forEach(function (cssFunc) {
                it("should not return a warning for native " + cssFunc + " pseudo class", function () {
                    var config = {
                        entry: '/main.css',
                        files: {
                            '/main.css': {
                                content: "\n                                .myClass {\n                                    background: " + cssFunc + "(a, b, c);\n                                }"
                            }
                        }
                    };
                    diagnostics_1.expectWarningsFromTransform(config, []);
                });
            });
        });
    });
});
//# sourceMappingURL=functions.spec.js.map