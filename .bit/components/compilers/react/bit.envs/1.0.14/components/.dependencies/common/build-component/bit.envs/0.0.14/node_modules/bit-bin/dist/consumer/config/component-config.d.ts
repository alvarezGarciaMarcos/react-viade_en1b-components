import AbstractConfig from './abstract-config';
import { Compilers, Testers } from './abstract-config';
import WorkspaceConfig from './workspace-config';
import { PathOsBasedAbsolute, PathOsBasedRelative } from '../../utils/path';
import Component from '../component/consumer-component';
import { ComponentOverridesData } from './component-overrides';
import PackageJsonFile from '../component/package-json-file';
declare type ConfigProps = {
    lang?: string;
    compiler?: string | Compilers;
    tester?: string | Testers;
    bindingPrefix: string;
    extensions?: Record<string, any>;
    overrides?: ComponentOverridesData;
};
export default class ComponentConfig extends AbstractConfig {
    overrides: ComponentOverridesData | null | undefined;
    componentHasWrittenConfig: boolean;
    packageJsonFile: PackageJsonFile | null | undefined;
    constructor({ compiler, tester, lang, bindingPrefix, extensions, overrides }: ConfigProps);
    toPlainObject(): any;
    validate(bitJsonPath: string): void;
    static fromPlainObject(object: Record<string, any>): ComponentConfig;
    static fromComponent(component: Component): ComponentConfig;
    mergeWithComponentData(component: Component): void;
    static mergeWithWorkspaceConfig(componentConfig: Record<string, any>, consumerConfig: WorkspaceConfig | null | undefined): ComponentConfig;
    static load({ componentDir, workspaceDir, configDir, workspaceConfig }: {
        componentDir: PathOsBasedRelative | null | undefined;
        workspaceDir: PathOsBasedRelative;
        configDir: PathOsBasedAbsolute;
        workspaceConfig: WorkspaceConfig;
    }): Promise<ComponentConfig>;
}
export {};
