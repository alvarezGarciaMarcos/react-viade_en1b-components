import * as postcss from 'postcss';
import { Diagnostics } from './diagnostics';
import { DeclStylableProps, Imported, SDecl, StylableMeta } from './stylable-processor';
import { SelectorAstNode } from './selector-utils';
import { Pojo } from './types';
export declare const CUSTOM_SELECTOR_RE: RegExp;
export declare function isValidDeclaration(decl: postcss.Declaration): boolean;
export declare function expandCustomSelectors(rule: postcss.Rule, customSelectors: Pojo<string>, diagnostics?: Diagnostics): string;
export declare function transformMatchesOnRule(rule: postcss.Rule, lineBreak: boolean): any;
export declare function scopeSelector(scopeSelectorRule: string, targetSelectorRule: string, rootScopeLevel?: boolean): {
    selector: string;
    selectorAst: SelectorAstNode;
};
export declare function mergeRules(mixinAst: postcss.Root, rule: postcss.Rule): postcss.Rule;
export declare function createSubsetAst<T extends postcss.Root | postcss.AtRule>(root: postcss.Root | postcss.AtRule, selectorPrefix: string, mixinTarget?: T, isRoot?: boolean): T;
export declare function removeUnusedRules(ast: postcss.Root, meta: StylableMeta, _import: Imported, usedFiles: string[], resolvePath: (ctx: string, path: string) => string): void;
export declare function findDeclaration(importNode: Imported, test: any): postcss.Declaration;
export declare function findRule(root: postcss.Root, selector: string, test?: any): any;
export declare function getDeclStylable(decl: SDecl): DeclStylableProps;
