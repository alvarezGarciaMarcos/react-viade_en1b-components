"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fooFixtureV2 = exports.fooFixture = exports.exceptionTest = exports.failTest = exports.passTest = exports.objectRestSpreadWithChange = exports.objectRestSpread = exports.appPrintBarFooAuthor = exports.appPrintBarFooES6 = exports.appPrintBarFooCapsule = exports.appPrintBarFoo = exports.appPrintIsStringCapsule = exports.appPrintIsString = exports.appPrintIsTypeCapsule = exports.appPrintIsType = exports.barFooModulePath = exports.barFooSpecES6 = exports.barFooTS = exports.barFooES6 = exports.barFooFixtureV2 = exports.barFooFixture = exports.isStringModulePath = exports.isStringTS = exports.isStringES6 = exports.isStringSpec = exports.isStringV3 = exports.isStringV2 = exports.isString = exports.isTypeTS = exports.isTypeLeftPad = exports.isTypeES6 = exports.isTypeSpec = exports.isTypeV3 = exports.isTypeV2 = exports.isType = void 0;
const isType = "module.exports = function isType() { return 'got is-type'; };";
exports.isType = isType;
const isTypeV2 = "module.exports = function isType() { return 'got is-type v2'; };";
exports.isTypeV2 = isTypeV2;
const isTypeV3 = "module.exports = function isType() { return 'got is-type v3'; };";
exports.isTypeV3 = isTypeV3;

const isTypeSpec = testShouldPass => `const expect = require('chai').expect;
const isType = require('./is-type.js');

describe('isType', () => {
  it('should display "got is-type"', () => {
    expect(isType())${testShouldPass ? '' : '.not'}.to.equal('got is-type');
  });
});`;

exports.isTypeSpec = isTypeSpec;
const isTypeES6 = "export default function isType() { return 'got is-type'; };";
exports.isTypeES6 = isTypeES6;
const isTypeLeftPad = `
const leftPad = require('left-pad');
module.exports = function isType() { return leftPad('got is-type', 15, 0); };
`;
exports.isTypeLeftPad = isTypeLeftPad;
const isTypeTS = "export default function isType() { return 'got is-type'; };";
exports.isTypeTS = isTypeTS;
const isString = "const isType = require('./is-type.js'); module.exports = function isString() { return isType() +  ' and got is-string'; };";
exports.isString = isString;
const isStringV2 = "const isType = require('./is-type.js'); module.exports = function isString() { return isType() +  ' and got is-string v2'; };";
exports.isStringV2 = isStringV2;
const isStringV3 = "const isType = require('./is-type.js'); module.exports = function isString() { return isType() +  ' and got is-string v3'; };";
exports.isStringV3 = isStringV3;

const isStringSpec = testShouldPass => `const expect = require('chai').expect;
const isString = require('./is-string.js');

describe('isString', () => {
  it('should display "got is-type and got is-string"', () => {
    expect(isString())${testShouldPass ? '' : '.not'}.to.equal('got is-type and got is-string');
  });
});`;

exports.isStringSpec = isStringSpec;
const isStringES6 = "import isType from './is-type.js'; export default function isString() { return isType() +  ' and got is-string'; };";
exports.isStringES6 = isStringES6;
const isStringTS = "import isType from './is-type'; export default function isString() { return isType() +  ' and got is-string'; };";
exports.isStringTS = isStringTS;

const isStringModulePath = remoteScope => `const isType = require('@bit/${remoteScope}.utils.is-type'); module.exports = function isString() { return isType() +  ' and got is-string'; };`;

exports.isStringModulePath = isStringModulePath;
const barFooFixture = "const isString = require('../utils/is-string.js'); module.exports = function foo() { return isString() + ' and got foo'; };";
exports.barFooFixture = barFooFixture;
const barFooFixtureV2 = "const isString = require('../utils/is-string.js'); module.exports = function foo() { return isString() + ' and got foo v2'; };";
exports.barFooFixtureV2 = barFooFixtureV2;
const barFooES6 = "import isString from '../utils/is-string.js'; export default function foo() { return isString() + ' and got foo'; };";
exports.barFooES6 = barFooES6;
const barFooTS = "import isString from '../utils/is-string'; export default function foo() { return isString() + ' and got foo'; };";
exports.barFooTS = barFooTS;

const barFooSpecES6 = testShouldPass => `const expect = require('chai').expect;
const foo = require('./foo.js');

describe('foo', () => {
  it('should display "got is-type and got is-string and got foo"', () => {
    expect(foo.default())${testShouldPass ? '' : '.not'}.to.equal('got is-type and got is-string and got foo');
  });
});`;

exports.barFooSpecES6 = barFooSpecES6;

const barFooModulePath = remoteScope => `const isString = require('@bit/${remoteScope}.utils.is-string'); module.exports = function foo() { return isString() + ' and got foo'; };`;

exports.barFooModulePath = barFooModulePath;
const appPrintIsType = "const isType = require('./components/utils/is-type'); console.log(isType());";
exports.appPrintIsType = appPrintIsType;
const appPrintIsTypeCapsule = "const isType = require('.'); console.log(isType());";
exports.appPrintIsTypeCapsule = appPrintIsTypeCapsule;
const appPrintIsString = "const isString = require('./components/utils/is-string'); console.log(isString());";
exports.appPrintIsString = appPrintIsString;
const appPrintIsStringCapsule = "const isString = require('.'); console.log(isString());";
exports.appPrintIsStringCapsule = appPrintIsStringCapsule;
const appPrintBarFoo = "const barFoo = require('./components/bar/foo'); console.log(barFoo());";
exports.appPrintBarFoo = appPrintBarFoo;
const appPrintBarFooCapsule = "const barFoo = require('.'); console.log(barFoo());";
exports.appPrintBarFooCapsule = appPrintBarFooCapsule;
const appPrintBarFooES6 = "const barFoo = require('./components/bar/foo'); console.log(barFoo.default());";
exports.appPrintBarFooES6 = appPrintBarFooES6;
const appPrintBarFooAuthor = "const barFoo = require('./bar/foo'); console.log(barFoo());";
exports.appPrintBarFooAuthor = appPrintBarFooAuthor;
const objectRestSpread = `const g = 5;
const x = {a: "a", b: "b"}
const y = {c: "c"}
const z = {...x, ...y}`;
exports.objectRestSpread = objectRestSpread;
const objectRestSpreadWithChange = `const g = 5;
const x = {a: "a", b: "c"}
const y = {c: "c"}
const z = {...x, ...y}`;
exports.objectRestSpreadWithChange = objectRestSpreadWithChange;
const passTest = `const expect = require('chai').expect
describe('group of passed tests', () => {
  it('passed test case', () => {
    expect(true).to.be.true;
  });
});`;
exports.passTest = passTest;
const failTest = `const expect = require('chai').expect
describe('group of failed tests', () => {
  it('failed test case', () => {
    expect(true).to.be.false;
  });
});`;
exports.failTest = failTest;
const exceptionTest = `const expect = require('chai').expect
describe('group of failed tests', () => {
  throw new Error('exception during test file');
  it('failed test case', () => {
    expect(true).to.be.false;
  });
});`;
exports.exceptionTest = exceptionTest;
const fooFixture = "module.exports = function foo() { return 'got foo'; }";
exports.fooFixture = fooFixture;
const fooFixtureV2 = "module.exports = function foo() { return 'got foo v2'; }";
exports.fooFixtureV2 = fooFixtureV2;