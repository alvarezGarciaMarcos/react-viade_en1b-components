import { InteractiveInputs } from '../interactive/utils/run-interactive-cmd';
import CommandHelper from './e2e-command-helper';
import FsHelper from './e2e-fs-helper';
import ScopesData from './e2e-scopes';
export default class ScopeHelper {
    debugMode: boolean;
    scopes: ScopesData;
    e2eDir: string;
    command: CommandHelper;
    fs: FsHelper;
    cache: Record<string, any>;
    keepEnvs: boolean;
    clonedScopes: string[];
    constructor(debugMode: boolean, scopes: ScopesData, commandHelper: CommandHelper, fsHelper: FsHelper);
    clean(): void;
    destroy(): void;
    cleanLocalScope(): void;
    reInitLocalScope(): void;
    initLocalScope(): string;
    initWorkspace(workspacePath?: string): string;
    initInteractive(inputs: InteractiveInputs): Promise<any>;
    initLocalScopeWithOptions(options: Record<string, any>): string;
    setNewLocalAndRemoteScopes(): void;
    initNewLocalScope(deleteCurrentScope?: boolean): string;
    addRemoteScope(remoteScopePath?: string, localScopePath?: string, isGlobal?: boolean): string;
    removeRemoteScope(remoteScope?: string, isGlobal?: boolean): string;
    addRemoteEnvironment(isGlobal?: boolean): string;
    addGlobalRemoteScope(): string;
    removeRemoteEnvironment(isGlobal?: boolean): string;
    reInitRemoteScope(scopePath?: string): string;
    setRemoteScopeAsDifferentDir(): void;
    reInitEnvsScope(): string;
    getNewBareScope(scopeNameSuffix?: string | undefined): {
        scopeName: string;
        scopePath: string;
    };
    cloneLocalScope(): string;
    getClonedLocalScope(clonedScopePath: string, deleteCurrentScope?: boolean): void;
    cloneRemoteScope(): string;
    getClonedRemoteScope(clonedScopePath: string, deleteCurrentScope?: boolean): void;
}
