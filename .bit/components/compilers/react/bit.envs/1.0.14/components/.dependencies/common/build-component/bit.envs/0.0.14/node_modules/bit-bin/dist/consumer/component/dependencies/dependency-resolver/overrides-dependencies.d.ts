import ComponentMap from '../../../bit-map/component-map';
import { BitId, BitIds } from '../../../../bit-id';
import Component from '../../../component/consumer-component';
import Consumer from '../../../../consumer/consumer';
import { FileType, AllDependencies } from './dependencies-resolver';
export declare type ManuallyChangedDependencies = {
    dependencies?: string[];
    devDependencies?: string[];
    peerDependencies?: string[];
};
export default class OverridesDependencies {
    component: Component;
    consumer: Consumer;
    componentMap: ComponentMap;
    componentFromModel: Component | null | undefined;
    manuallyRemovedDependencies: ManuallyChangedDependencies;
    manuallyAddedDependencies: ManuallyChangedDependencies;
    constructor(component: Component, consumer: Consumer);
    shouldIgnoreFile(file: string, fileType: FileType): boolean;
    shouldIgnorePackage(packageName: string, fileType: FileType): boolean;
    shouldIgnorePackageByType(packageName: string, field: string): boolean;
    shouldIgnorePeerPackage(packageName: string): boolean;
    shouldIgnoreComponent(componentId: BitId, fileType: FileType): boolean;
    shouldIgnoreComponentByStr(componentIdStr: string, field: string): boolean;
    getDependenciesToAddManually(packageJson: Record<string, any> | null | undefined, existingDependencies: AllDependencies): {
        components: Record<string, any>;
        packages: Record<string, any>;
    } | null | undefined;
    _getComponentIdToAdd(field: string, dependency: string, dependencyValue: string, idsFromBitmap: BitIds, idsFromModel: BitIds): BitId | null | undefined;
    _manuallyAddPackage(field: string, dependency: string, dependencyValue: string, packageJson: Record<string, any> | null | undefined): Record<string, any> | null | undefined;
    _addManuallyRemovedDep(field: string, value: string): void;
    _addManuallyAddedDep(field: string, value: string): void;
}
