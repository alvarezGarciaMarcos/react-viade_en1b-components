"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function path() {
  const data = _interopRequireWildcard(require("path"));

  path = function () {
    return data;
  };

  return data;
}

function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));

  _fsExtra = function () {
    return data;
  };

  return data;
}

class ExtensionsHelper {
  constructor(scopes, command, bitJson, scopeHelper, fixtures) {
    (0, _defineProperty2().default)(this, "scopes", void 0);
    (0, _defineProperty2().default)(this, "command", void 0);
    (0, _defineProperty2().default)(this, "bitJson", void 0);
    (0, _defineProperty2().default)(this, "scopeHelper", void 0);
    (0, _defineProperty2().default)(this, "fixtures", void 0);
    this.scopes = scopes;
    this.command = command;
    this.bitJson = bitJson;
    this.scopeHelper = scopeHelper;
    this.fixtures = fixtures;
  }

  importAndConfigureExtension(id) {
    this.command.importExtension(id);
    const bitJson = this.bitJson.read();
    bitJson.extensions = {
      [id]: {}
    };
    this.bitJson.write(bitJson);
  }

  importNpmPackExtension(id = 'global-remote/npm/pack@2.0.1') {
    this.fixtures.ensureGlobalRemoteScope();
    this.scopeHelper.addGlobalRemoteScope();
    this.importAndConfigureExtension(id); // workaround to get the registry into the package.json file

    const extensionFilePath = path().join(this.scopes.localPath, '.bit/components/npm/pack/global-remote/2.0.1/index.js');

    const extensionFile = _fsExtra().default.readFileSync(extensionFilePath).toString();

    const extensionFileIncludeRegistry = extensionFile.replace('excludeRegistryPrefix: true', 'excludeRegistryPrefix: false');
    const extensionFileWithJsonOutput = extensionFileIncludeRegistry.replace('return result;', 'return JSON.stringify(result, null, 2);');

    _fsExtra().default.writeFileSync(extensionFilePath, extensionFileWithJsonOutput);
  }

}

exports.default = ExtensionsHelper;