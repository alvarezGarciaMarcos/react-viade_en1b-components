import ModelComponent from './models/model-component';
import Version from './models/version';
import { BitId, BitIds } from '../bit-id';
import Repository from './objects/repository';
import ComponentObjects from './component-objects';
import ConsumerComponent from '../consumer/component';
import { ManipulateDirItem } from '../consumer/component-ops/manipulate-dir';
export default class ComponentVersion {
    readonly component: ModelComponent;
    readonly version: string;
    constructor(component: ModelComponent, version: string);
    getVersion(repository: Repository): Promise<Version>;
    flattenedDependencies(repository: Repository): Promise<BitIds>;
    flattenedDevDependencies(repository: Repository): Promise<BitIds>;
    flattenedCompilerDependencies(repository: Repository): Promise<BitIds>;
    flattenedTesterDependencies(repository: Repository): Promise<BitIds>;
    toId(): BitId;
    readonly id: BitId;
    toConsumer(repo: Repository, manipulateDirData: ManipulateDirItem[] | null | undefined): Promise<ConsumerComponent>;
    toObjects(repo: Repository, clientVersion: string | null | undefined): Promise<ComponentObjects>;
}
