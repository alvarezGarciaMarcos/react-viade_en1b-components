"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var generate_test_util_1 = require("../utils/generate-test-util");
describe('Stylable transform elements', function () {
    describe('scoped elements', function () {
        // tslint:disable-next-line:max-line-length
        it('component/tag selector with first Capital letter automatically extends reference with identical name', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/style.st.css",
                files: {
                    '/style.st.css': {
                        namespace: 'ns',
                        content: "\n                            :import {\n                                -st-from: \"./imported.st.css\";\n                                -st-default: Element;\n                            }\n                            Element {}\n                            .root Element {}\n                        "
                    },
                    '/imported.st.css': {
                        namespace: 'ns1',
                        content: ""
                    }
                }
            });
            chai_1.expect(result.nodes[0].selector).to.equal('.ns1--root');
            chai_1.expect(result.nodes[1].selector).to.equal('.ns--root .ns1--root');
        });
        // tslint:disable-next-line:max-line-length
        it('component/tag selector with first Capital letter automatically extend reference with identical name (inner parts)', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                            :import {\n                                -st-from: \"./inner.st.css\";\n                                -st-default: Element;\n                            }\n                            Element::part {}\n                        "
                    },
                    '/inner.st.css': {
                        namespace: 'inner',
                        content: "\n                            .part {}\n                        "
                    }
                }
            });
            chai_1.expect(result.nodes[0].selector).to.equal('.inner--root .inner--part');
        });
        it('resolve imported element that is also root', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/style.st.css",
                files: {
                    '/style.st.css': {
                        namespace: 'ns',
                        content: "\n                            :import {\n                                -st-from: \"./imported.st.css\";\n                                -st-named: ButtonX;\n                            }\n                            .x {\n                                -st-extends: ButtonX;\n                            }\n                        "
                    },
                    '/imported.st.css': {
                        namespace: 'ns1',
                        content: "\n                            :import {\n                                -st-from: \"./button-x.st.css\";\n                                -st-default: ButtonX;\n                            }\n                            ButtonX{}\n                        "
                    },
                    '/button-x.st.css': {
                        namespace: 'button-x',
                        content: ""
                    }
                }
            });
            chai_1.expect(result.nodes[0].selector).to.equal('.ns--x.button-x--root');
        });
        it('should resolve imported named element type when used as element', function () {
            var res = generate_test_util_1.generateStylableRoot({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                            :import {\n                                -st-from: \"./inner.st.css\";\n                                -st-named: Element;\n                            }\n\n                            Element {}\n                        "
                    },
                    '/inner.st.css': {
                        namespace: 'inner',
                        content: "\n                            :import {\n                                -st-from: \"./base.st.css\";\n                                -st-default: Element;\n                            }\n                            Element {}\n                        "
                    },
                    '/base.st.css': {
                        namespace: 'base',
                        content: "\n                            .root {}\n                        "
                    }
                }
            });
            chai_1.expect(res.nodes[0].selector).to.equal('.base--root');
        });
    });
});
//# sourceMappingURL=elements.spec.js.map