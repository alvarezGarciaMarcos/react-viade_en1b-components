"use strict";

function _chai() {
  const data = require("chai");

  _chai = function () {
    return data;
  };

  return data;
}

function _logger() {
  const data = require("./logger");

  _logger = function () {
    return data;
  };

  return data;
}

describe('logger', () => {
  describe('baseFileTransportOpts', () => {
    it('should print metadata', () => {
      const myFormat = (0, _logger().getFormat)();
      const result = myFormat.transform({
        [Symbol.for('level')]: 'error',
        level: 'error',
        message: 'my message',
        metadata: {
          foo: 'bar'
        }
      });
      (0, _chai().expect)(result[Symbol.for('message')]).to.have.string('"foo": "bar"');
    });
    it('should not throw when the metadata object has a circular structure', () => {
      const foo = {};
      const bar = {
        foo
      };
      foo.bar = bar;
      const metadata = {
        foo
      };
      const myFormat = (0, _logger().getFormat)();
      const result = myFormat.transform({
        [Symbol.for('level')]: 'error',
        level: 'error',
        message: 'my message',
        metadata
      });
      (0, _chai().expect)(result[Symbol.for('message')]).to.have.string('logging failed to stringify the metadata Json');
      (0, _chai().expect)(result[Symbol.for('message')]).to.have.string('error: Converting circular structure to JSON');
    });
  });
});