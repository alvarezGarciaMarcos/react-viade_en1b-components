import { Scope, ComponentWithDependencies } from '../scope';
import { BitId } from '../bit-id';
import { Consumer } from '../consumer';
import { PathOsBased } from '../utils/path';
import { IsolateOptions } from './isolator';
export default class Environment {
    path: PathOsBased;
    scope: Scope;
    consumer?: Consumer;
    constructor(scope: Scope, dir: string | null | undefined);
    create(): Promise<void>;
    isolateComponent(bitId: BitId | string, opts: IsolateOptions): Promise<ComponentWithDependencies>;
    static markEnvironmentAsInstalled(dir: any): Promise<string>;
    static isEnvironmentInstalled(dir: any): boolean;
    getPath(): string;
    destroy(): Promise<any>;
    destroyIfExist(): Promise<any>;
}
