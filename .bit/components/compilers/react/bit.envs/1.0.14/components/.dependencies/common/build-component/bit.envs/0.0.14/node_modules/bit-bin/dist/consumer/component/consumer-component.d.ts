import ComponentConfig from '../config';
import { Dist, License, SourceFile } from '../component/sources';
import Consumer from '../consumer';
import BitId from '../../bit-id/bit-id';
import Scope from '../../scope/scope';
import BitIds from '../../bit-id/bit-ids';
import { Doclet } from '../../jsdoc/types';
import SpecsResults from '../specs-results';
import { EjectConfResult, EjectConfData } from '../component-ops/eject-conf';
import IsolatedEnvironment from '../../environment/environment';
import { Log } from '../../scope/models/version';
import { ScopeListItem } from '../../scope/models/model-component';
import BitMap from '../bit-map';
import ComponentMap from '../bit-map/component-map';
import { ComponentOrigin } from '../bit-map/component-map';
import CompilerExtension from '../../extensions/compiler-extension';
import TesterExtension from '../../extensions/tester-extension';
import { EnvType } from '../../extensions/env-extension-types';
import { Driver } from '../../driver';
import ComponentWithDependencies from '../../scope/component-dependencies';
import { Dependency, Dependencies } from './dependencies';
import Dists from './sources/dists';
import { PathLinux, PathOsBased, PathOsBasedAbsolute, PathOsBasedRelative } from '../../utils/path';
import { componentIssuesLabels } from '../../cli/templates/component-issues-template';
import Version from '../../version';
import ConfigDir from '../bit-map/config-dir';
import { ManipulateDirItem } from '../component-ops/manipulate-dir';
import DataToPersist from './sources/data-to-persist';
import { ManuallyChangedDependencies } from './dependencies/dependency-resolver/overrides-dependencies';
import ComponentOverrides from '../config/component-overrides';
import PackageJsonFile from './package-json-file';
import { IsolateOptions } from '../../environment/isolator';
export declare type customResolvedPath = {
    destinationPath: PathLinux;
    importSource: string;
};
export declare type InvalidComponent = {
    id: BitId;
    error: Error;
};
export declare type ExtensionData = {
    id: string;
    data: {
        [key: string]: any;
    };
};
export declare type ComponentProps = {
    name: string;
    version?: string | null | undefined;
    scope?: string | null | undefined;
    lang?: string;
    bindingPrefix?: string;
    mainFile: PathOsBased;
    compiler?: CompilerExtension;
    tester: TesterExtension;
    bitJson: ComponentConfig | null | undefined;
    dependencies?: Dependency[];
    devDependencies?: Dependency[];
    compilerDependencies?: Dependency[];
    testerDependencies?: Dependency[];
    flattenedDependencies?: BitIds | null | undefined;
    flattenedDevDependencies?: BitIds | null | undefined;
    flattenedCompilerDependencies?: BitIds | null | undefined;
    flattenedTesterDependencies?: BitIds | null | undefined;
    packageDependencies?: Record<string, any> | null | undefined;
    devPackageDependencies?: Record<string, any> | null | undefined;
    peerPackageDependencies?: Record<string, any> | null | undefined;
    compilerPackageDependencies?: Record<string, any> | null | undefined;
    testerPackageDependencies?: Record<string, any> | null | undefined;
    customResolvedPaths?: customResolvedPath[] | null | undefined;
    overrides: ComponentOverrides;
    packageJsonFile?: PackageJsonFile | null | undefined;
    packageJsonChangedProps?: {
        [key: string]: any;
    } | null | undefined;
    files: SourceFile[];
    docs?: Doclet[] | null | undefined;
    dists?: Dist[];
    mainDistFile?: PathLinux | null | undefined;
    specsResults?: SpecsResults;
    license?: License | null | undefined;
    deprecated: boolean | null | undefined;
    origin: ComponentOrigin;
    log?: Log | null | undefined;
    scopesList?: ScopeListItem[];
    extensions: ExtensionData[];
    componentFromModel?: Component | null | undefined;
};
export default class Component {
    name: string;
    version: string | null | undefined;
    scope: string | null | undefined;
    lang: string;
    bindingPrefix: string;
    mainFile: PathOsBased;
    compiler: CompilerExtension | null | undefined;
    tester: TesterExtension | null | undefined;
    bitJson: ComponentConfig | null | undefined;
    dependencies: Dependencies;
    devDependencies: Dependencies;
    compilerDependencies: Dependencies;
    testerDependencies: Dependencies;
    flattenedDependencies: BitIds;
    flattenedDevDependencies: BitIds;
    flattenedCompilerDependencies: BitIds;
    flattenedTesterDependencies: BitIds;
    packageDependencies: any;
    devPackageDependencies: any;
    peerPackageDependencies: any;
    compilerPackageDependencies: Record<string, any>;
    testerPackageDependencies: Record<string, any>;
    manuallyRemovedDependencies: ManuallyChangedDependencies;
    manuallyAddedDependencies: ManuallyChangedDependencies;
    overrides: ComponentOverrides;
    docs: Doclet[] | null | undefined;
    files: SourceFile[];
    dists: Dists;
    specsResults: SpecsResults[] | null | undefined;
    license: License | null | undefined;
    log: Log | null | undefined;
    writtenPath?: PathOsBasedRelative;
    dependenciesSavedAsComponents: boolean | null | undefined;
    originallySharedDir: PathLinux | null | undefined;
    _wasOriginallySharedDirStripped: boolean | null | undefined;
    wrapDir: PathLinux | null | undefined;
    loadedFromFileSystem: boolean;
    componentMap: ComponentMap | null | undefined;
    componentFromModel: Component | null | undefined;
    isolatedEnvironment: IsolatedEnvironment;
    issues: {
        [label: keyof typeof componentIssuesLabels]: {
            [fileName: string]: string[] | BitId[] | string | BitId;
        };
    };
    deprecated: boolean;
    origin: ComponentOrigin;
    customResolvedPaths: customResolvedPath[];
    _driver: Driver;
    _isModified: boolean;
    packageJsonFile: PackageJsonFile | null | undefined;
    packageJsonChangedProps: Record<string, any> | null | undefined;
    _currentlyUsedVersion: BitId;
    pendingVersion: Version;
    dataToPersist: DataToPersist;
    scopesList: ScopeListItem[] | null | undefined;
    extensions: ExtensionData[];
    readonly id: BitId;
    readonly driver: Driver;
    constructor({ name, version, scope, files, lang, bindingPrefix, mainFile, compiler, tester, bitJson, dependencies, devDependencies, compilerDependencies, testerDependencies, flattenedDependencies, flattenedDevDependencies, flattenedCompilerDependencies, flattenedTesterDependencies, packageDependencies, devPackageDependencies, peerPackageDependencies, compilerPackageDependencies, testerPackageDependencies, componentFromModel, overrides, packageJsonFile, packageJsonChangedProps, docs, dists, mainDistFile, specsResults, license, log, deprecated, origin, customResolvedPaths, scopesList, extensions }: ComponentProps);
    validateComponent(): void;
    clone(): Component;
    getTmpFolder(workspacePrefix?: PathOsBased): PathOsBased;
    setDependencies(dependencies?: Dependency[]): void;
    setDevDependencies(devDependencies?: Dependency[]): void;
    setCompilerDependencies(compilerDependencies?: Dependency[]): void;
    setTesterDependencies(testerDependencies?: Dependency[]): void;
    setDists(dists: Dist[] | null | undefined, mainDistFile?: PathOsBased | null | undefined): void;
    getFileExtension(): string;
    getDetachedCompiler(consumer: Consumer | null | undefined): Promise<boolean>;
    getDetachedTester(consumer: Consumer | null | undefined): Promise<boolean>;
    _isEnvDetach(consumer: Consumer | null | undefined, envType: EnvType): Promise<boolean>;
    _getHomepage(): string | undefined;
    writeConfig(consumer: Consumer, configDir: PathOsBased | ConfigDir): Promise<EjectConfResult>;
    getConfigToWrite(consumer: Consumer | null | undefined, bitMap: BitMap, configDir: PathOsBased | ConfigDir): Promise<EjectConfData>;
    injectConfig(consumerPath: PathOsBased, bitMap: BitMap, force?: boolean | undefined): Promise<EjectConfResult>;
    flattenedDependencies(): BitIds;
    flattenedDevDependencies(): BitIds;
    flattenedCompilerDependencies(): BitIds;
    flattenedTesterDependencies(): BitIds;
    getAllDependencies(): Dependency[];
    getAllDependenciesCloned(): Dependencies;
    getAllNonEnvsDependencies(): Dependency[];
    getAllDependenciesIds(): BitIds;
    hasDependencies(): boolean;
    getAllFlattenedDependencies(): BitId[];
    getAllNonEnvsFlattenedDependencies(): BitId[];
    stripOriginallySharedDir(manipulateDirData: ManipulateDirItem[]): void;
    addWrapperDir(manipulateDirData: ManipulateDirItem[]): void;
    addSharedDir(pathStr: string): PathLinux;
    cloneFilesWithSharedDir(): SourceFile[];
    build({ scope, save, consumer, noCache, verbose, dontPrintEnvMsg, directory, keep }: {
        scope: Scope;
        save?: boolean;
        consumer?: Consumer;
        noCache?: boolean;
        directory?: string;
        verbose?: boolean;
        dontPrintEnvMsg?: boolean;
        keep?: boolean;
    }): Promise<Dists | undefined>;
    runSpecs({ scope, rejectOnFailure, consumer, save, verbose, dontPrintEnvMsg, isolated, directory, keep }: {
        scope: Scope;
        rejectOnFailure?: boolean;
        consumer?: Consumer;
        save?: boolean;
        verbose?: boolean;
        dontPrintEnvMsg?: boolean;
        isolated?: boolean;
        directory?: string;
        keep?: boolean;
    }): Promise<SpecsResults | undefined>;
    isolate(scope: Scope, opts: IsolateOptions): Promise<string>;
    toObject(): Record<string, any>;
    toString(): string;
    copyFilesIntoDists(): void;
    setOriginallySharedDir(manipulateDirData: ManipulateDirItem[]): void;
    static isComponentInvalidByErrorType(err: Error): boolean;
    toComponentWithDependencies(consumer: Consumer): Promise<ComponentWithDependencies>;
    addExtensionValue(extensionId: string, key: string, value: any): void;
    getExtensionValue(extensionId: string, key: string): any;
    recalculateDocs(): Promise<void>;
    copyAllDependenciesFromModel(): void;
    static fromObject(object: Record<string, any>): Component;
    static fromString(str: string): Component;
    static loadFromFileSystem({ bitDir, componentMap, id, consumer }: {
        bitDir: PathOsBasedAbsolute;
        componentMap: ComponentMap;
        id: BitId;
        consumer: Consumer;
    }): Promise<Component>;
}
