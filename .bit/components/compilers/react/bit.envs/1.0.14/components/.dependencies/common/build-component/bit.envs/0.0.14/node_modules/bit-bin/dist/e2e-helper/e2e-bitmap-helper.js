"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function path() {
  const data = _interopRequireWildcard(require("path"));

  path = function () {
    return data;
  };

  return data;
}

function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));

  _fsExtra = function () {
    return data;
  };

  return data;
}

function _commentJson() {
  const data = _interopRequireDefault(require("comment-json"));

  _commentJson = function () {
    return data;
  };

  return data;
}

function _constants() {
  const data = require("../constants");

  _constants = function () {
    return data;
  };

  return data;
}

class BitMapHelper {
  constructor(scopes, fsHelper) {
    (0, _defineProperty2().default)(this, "scopes", void 0);
    (0, _defineProperty2().default)(this, "fs", void 0);
    this.scopes = scopes;
    this.fs = fsHelper;
  }

  read(bitMapPath = path().join(this.scopes.localPath, _constants().BIT_MAP), withoutComment = true) {
    const map = _fsExtra().default.readFileSync(bitMapPath) || {};
    return _commentJson().default.parse(map.toString('utf8'), null, withoutComment);
  }

  readWithoutVersion() {
    const bitMap = this.read();
    delete bitMap.version;
    return bitMap;
  }

  write(bitMap) {
    const bitMapPath = path().join(this.scopes.localPath, _constants().BIT_MAP);
    return _fsExtra().default.writeJSONSync(bitMapPath, bitMap, {
      spaces: 2
    });
  }

  delete() {
    return this.fs.deletePath(_constants().BIT_MAP);
  }

  create(cwd = this.scopes.localPath, componentObject = {
    'bar/foo': {
      files: [{
        relativePath: 'bar/foo.js',
        test: false,
        name: 'foo.js'
      }],
      mainFile: 'bar/foo.js',
      origin: 'AUTHORED'
    }
  }, oldBitMapFile = false) {
    const bitmapFile = path().join(cwd, oldBitMapFile ? '.bit.map.json' : _constants().BIT_MAP);
    const bitmap = {
      version: '0.11.1-testing'
    };
    Object.keys(componentObject).forEach(key => bitmap[key] = componentObject[key]);

    _fsExtra().default.ensureFileSync(bitmapFile);

    return _fsExtra().default.writeJsonSync(bitmapFile, bitmap, {
      spaces: 2
    });
  }

  printFilesInCaseOfError(files) {
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    const filesStr = files.map(f => f.name).join(', ');
    return `Files in bitmap file: ${filesStr}`;
  }

}

exports.default = BitMapHelper;