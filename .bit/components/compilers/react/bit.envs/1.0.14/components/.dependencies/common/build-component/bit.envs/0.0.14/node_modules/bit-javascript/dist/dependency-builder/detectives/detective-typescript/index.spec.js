"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

function _chai() {
  const data = require("chai");

  _chai = function () {
    return data;
  };

  return data;
}

function _assert() {
  const data = _interopRequireDefault(require("assert"));

  _assert = function () {
    return data;
  };

  return data;
}

function _() {
  const data = _interopRequireDefault(require("./"));

  _ = function () {
    return data;
  };

  return data;
}

/* eslint-env mocha */
// @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
describe('detective-typescript', () => {
  const ast = {
    type: 'Program',
    body: [{
      type: 'VariableDeclaration',
      declarations: [{
        type: 'VariableDeclarator',
        id: {
          type: 'Identifier',
          name: 'x'
        },
        init: {
          type: 'Literal',
          value: 4,
          raw: '4'
        }
      }],
      kind: 'let'
    }]
  };
  it('accepts an ast', () => {
    const deps = (0, _().default)(ast);
    const depsKeys = Object.keys(deps);
    (0, _assert().default)(!depsKeys.length);
  });
  it('retrieves the dependencies of modules', () => {
    const deps = (0, _().default)('import {foo, bar} from "mylib";');
    const depsKeys = Object.keys(deps);
    (0, _assert().default)(depsKeys.length === 1);
    (0, _chai().expect)(deps).to.have.property('mylib');
  });
  it('retrieves the re-export dependencies of modules', () => {
    const deps = (0, _().default)('export {foo, bar} from "mylib";');
    const depsKeys = Object.keys(deps);
    (0, _assert().default)(depsKeys.length === 1);
    (0, _chai().expect)(deps).to.have.property('mylib');
  });
  it('retrieves the re-export * dependencies of modules', () => {
    const deps = (0, _().default)('export * from "mylib";');
    const depsKeys = Object.keys(deps);
    (0, _assert().default)(depsKeys.length === 1);
    (0, _chai().expect)(deps).to.have.property('mylib');
  });
  it('handles multiple imports', () => {
    const deps = (0, _().default)('import {foo, bar} from "mylib";\nimport "mylib2"');
    const depsKeys = Object.keys(deps);
    (0, _assert().default)(depsKeys.length === 2);
    (0, _chai().expect)(deps).to.have.property('mylib');
    (0, _chai().expect)(deps).to.have.property('mylib2');
  });
  it('handles mixed imports of typescript and javascript', () => {
    const deps = (0, _().default)('import {foo, bar} from "mylib";\nconst mylib2 = require("mylib2");');
    const depsKeys = Object.keys(deps);
    (0, _assert().default)(depsKeys.length === 2);
    (0, _chai().expect)(deps).to.have.property('mylib');
    (0, _chai().expect)(deps).to.have.property('mylib2');
  });
  it('handles default imports', () => {
    const deps = (0, _().default)('import foo from "foo";');
    const depsKeys = Object.keys(deps);
    (0, _assert().default)(depsKeys.length === 1);
    (0, _chai().expect)(deps).to.have.property('foo');
  });
  it('retrieves dependencies from modules using "export ="', () => {
    const deps = (0, _().default)('import foo = require("mylib");');
    const depsKeys = Object.keys(deps);
    (0, _assert().default)(depsKeys.length === 1);
    (0, _chai().expect)(deps).to.have.property('mylib');
  });
  it('retrieves dependencies when using javascript syntax', () => {
    const deps = (0, _().default)('var foo = require("foo");');
    const depsKeys = Object.keys(deps);
    (0, _assert().default)(depsKeys.length === 1);
    (0, _chai().expect)(deps).to.have.property('foo');
  });
  it('returns an empty list for empty files', () => {
    const deps = (0, _().default)('');
    const depsKeys = Object.keys(deps);

    _assert().default.equal(depsKeys.length, 0);
  });
  it('throws when content is not provided', () => {
    _assert().default.throws(() => {
      (0, _().default)();
    }, Error, 'src not given');
  });
  it('does not throw with jsx in a module', () => {
    _assert().default.doesNotThrow(() => {
      (0, _().default)("import foo from 'foo'; var baz = <baz>bar;");
    });
  });
  it('does not throw with empty import and export', () => {
    _assert().default.doesNotThrow(() => {
      (0, _().default)("import './layout.scss'; export default something;");
    });
  });
  describe('string in apostrophes', () => {
    it('should recognize when using require statement', () => {
      const deps = (0, _().default)('const foo = require(`foo`);'); // eslint-disable-line

      const depsKeys = Object.keys(deps);

      _assert().default.equal(depsKeys.length, 1);

      _assert().default.equal(depsKeys[0], 'foo');
    });
  });
  describe('Angular Decorators', () => {
    let deps;
    before(() => {
      const componentDecorator = `const styleUrl = './my-style2.css';
      @Component({
        selector: 'main-component',
        templateUrl: './my-template.html',
        styleUrls: ['./my-style1.css', styleUrl, './my-style3.css', 'my-style4.css']
      })
      export class MainComponent {}`;
      const results = (0, _().default)(componentDecorator); // eslint-disable-line

      deps = Object.keys(results);
    });
    it('should recognize the templateUrl as a dependency', () => {
      (0, _chai().expect)(deps).to.include('./my-template.html');
    });
    it('should recognize the styleUrls as dependencies', () => {
      (0, _chai().expect)(deps).to.include('./my-style1.css');
      (0, _chai().expect)(deps).to.include('./my-style3.css');
    });
    it('should not recognize dynamic style (style path entered as a variable)', () => {
      (0, _chai().expect)(deps).to.not.include('./my-style2.css');
    });
    it('should change non-relative paths to be relative', () => {
      (0, _chai().expect)(deps).to.include('./my-style4.css');
    });
  });
});