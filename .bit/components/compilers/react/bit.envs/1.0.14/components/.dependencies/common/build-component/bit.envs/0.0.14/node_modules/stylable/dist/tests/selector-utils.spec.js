"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var selector_utils_1 = require("../src/selector-utils");
describe('Selector Utils', function () {
    var seperateChunksTestVectors = [
        {
            title: 'empty selector',
            selector: '',
            expected: [
                [
                    { type: 'selector', nodes: [] }
                ]
            ]
        },
        {
            title: 'class in first chunk',
            selector: '.x',
            expected: [
                [
                    {
                        type: 'selector',
                        nodes: [
                            { type: 'class', name: 'x' }
                        ]
                    }
                ]
            ]
        },
        {
            title: 'handle spacing',
            selector: '.x .y',
            expected: [
                [
                    {
                        type: 'selector',
                        nodes: [
                            { type: 'class', name: 'x' }
                        ]
                    },
                    {
                        type: 'spacing',
                        nodes: [
                            { type: 'class', name: 'y' }
                        ]
                    }
                ]
            ]
        },
        {
            title: 'handle operator',
            selector: '.x + .y',
            expected: [
                [
                    {
                        type: 'selector',
                        nodes: [
                            { type: 'class', name: 'x' }
                        ]
                    },
                    {
                        type: 'operator',
                        operator: '+',
                        nodes: [
                            { type: 'class', name: 'y' }
                        ]
                    }
                ]
            ]
        },
        {
            title: 'handle multiple selector',
            selector: '.x, .y',
            expected: [
                [
                    {
                        type: 'selector',
                        nodes: [
                            { type: 'class', name: 'x' }
                        ]
                    }
                ],
                [
                    {
                        type: 'selector',
                        nodes: [
                            { type: 'class', name: 'y' }
                        ]
                    }
                ]
            ]
        },
        {
            title: 'handle chunks with several nodes',
            selector: '.x, .y::z',
            expected: [
                [
                    {
                        type: 'selector',
                        nodes: [
                            { type: 'class', name: 'x' }
                        ]
                    }
                ],
                [
                    {
                        type: 'selector',
                        nodes: [
                            { type: 'class', name: 'y' },
                            { type: 'pseudo-element', name: 'z' }
                        ]
                    }
                ]
            ]
        },
        {
            title: 'handle 2 selectors',
            selector: '.x.y',
            expected: [
                [
                    {
                        type: 'selector',
                        nodes: [
                            { type: 'class', name: 'x' },
                            { type: 'class', name: 'y' }
                        ]
                    }
                ]
            ]
        }
    ];
    describe('separateChunks', function () {
        seperateChunksTestVectors.forEach(function (test) {
            it(test.title, function () {
                chai_1.expect(selector_utils_1.separateChunks(selector_utils_1.parseSelector(test.selector))).to.eql(test.expected);
            });
        });
    });
    describe('matchSelectorTarget', function () {
        it('source should be composed of only one compound selector', function () {
            chai_1.expect(function () { return selector_utils_1.matchSelectorTarget('.x,.menu::button', '.x'); }).to.throw('source selector must not be composed of more than one compound selector');
        });
        it('should return true if requesting selector is contained in target selector', function () {
            chai_1.expect(selector_utils_1.matchSelectorTarget('.menu::button', '.x .menu:hover::button'), '1').to.equal(true);
            chai_1.expect(selector_utils_1.matchSelectorTarget('.x .menu::button', '.menu::button::hover'), '2').to.equal(false);
            chai_1.expect(selector_utils_1.matchSelectorTarget('.menu::button', '.button'), '3').to.equal(false);
            chai_1.expect(selector_utils_1.matchSelectorTarget('.menu::button', '.menu'), '4').to.equal(false);
            chai_1.expect(selector_utils_1.matchSelectorTarget('.menu', '.menu::button'), '5').to.equal(false);
        });
        it('should not match empty requested selector in emptyly', function () {
            chai_1.expect(selector_utils_1.matchSelectorTarget('', '.menu::button')).to.equal(false);
        });
        it('should compare node types when comparing', function () {
            chai_1.expect(selector_utils_1.matchSelectorTarget('.x::y', '.x::y'), '1').to.equal(true);
            chai_1.expect(selector_utils_1.matchSelectorTarget('.x::y', '.x.y'), '2').to.equal(false);
            chai_1.expect(selector_utils_1.matchSelectorTarget('.a::a', '.a.a'), '3').to.equal(false);
            chai_1.expect(selector_utils_1.matchSelectorTarget('.a::a', '.a::a'), '4').to.equal(true);
        });
        it('should support multiple compound selectors', function () {
            chai_1.expect(selector_utils_1.matchSelectorTarget('.x', '.y,.x')).to.equal(true);
            chai_1.expect(selector_utils_1.matchSelectorTarget('.x', '.y,.z')).to.equal(false);
        });
        it('should regard order', function () {
            chai_1.expect(selector_utils_1.matchSelectorTarget('.x::y', '.y::x')).to.equal(false);
        });
        it('should not match if end is different', function () {
            chai_1.expect(selector_utils_1.matchSelectorTarget('.x::y::z', '.x::y::k')).to.equal(false);
        });
        it('should group by classes', function () {
            chai_1.expect(selector_utils_1.matchSelectorTarget('.x::y', '.x::y.z'), '1').to.equal(true);
            chai_1.expect(selector_utils_1.matchSelectorTarget('.x::y', '.x::y::z'), '2').to.equal(false);
            chai_1.expect(selector_utils_1.matchSelectorTarget('.x', '.x.z'), '3').to.equal(true);
        });
        it('should filter duplicate classes', function () {
            chai_1.expect(selector_utils_1.matchSelectorTarget('.x.x::y.z', '.x::y.z'), '1').to.equal(true);
            chai_1.expect(selector_utils_1.matchSelectorTarget('.x::y.x.z', '.x::y.z'), '2').to.equal(true);
            chai_1.expect(selector_utils_1.matchSelectorTarget('.x::y.x.x.x::z.z', '.x::y'), '3').to.equal(false);
            chai_1.expect(selector_utils_1.matchSelectorTarget('.x.x.x::y.z', '.x::y.z'), '4').to.equal(true);
        });
    });
    describe('filterChunkNodesByType', function () {
        it('should filter and return only selector nodes which match types specified in array', function () {
            chai_1.expect(selector_utils_1.filterChunkNodesByType({ nodes: [{ name: '0', type: 'a' }], type: 'dont-care' }, ['a'])).to.eql([{
                    name: '0',
                    type: 'a'
                }]);
            chai_1.expect(selector_utils_1.filterChunkNodesByType({
                nodes: [{ name: '0', type: 'a' }, { name: '1', type: 'b' }, { name: '2', type: 'c' }],
                type: 'dont-care'
            }, ['b', 'a'])).to.eql([{ name: '0', type: 'a' }, { name: '1', type: 'b' }]);
        });
    });
});
//# sourceMappingURL=selector-utils.spec.js.map