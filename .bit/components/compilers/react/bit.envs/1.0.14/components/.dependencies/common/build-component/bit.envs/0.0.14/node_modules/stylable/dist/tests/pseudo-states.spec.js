"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var chaiSubset = require("chai-subset");
var index_1 = require("../src/index");
var native_reserved_lists_1 = require("../src/native-reserved-lists");
var results_1 = require("./matchers/results");
var diagnostics_1 = require("./utils/diagnostics");
var generate_test_util_1 = require("./utils/generate-test-util");
var valueParser = require('postcss-value-parser');
chai_1.use(chaiSubset); // move all of these to a central place
chai_1.use(results_1.styleRules);
chai_1.use(results_1.mediaQuery);
// testing concerns for feature
// - states belonging to an extended class (multi level)
// - lookup order
describe('pseudo-states', function () {
    describe('process', function () {
        // What does it do?
        // Works in the scope of a single file, collecting state definitions for later usage
        describe('boolean', function () {
            it('should collect state definitions as null (for boolean)', function () {
                var _a = generate_test_util_1.processSource("\n                    .root {\n                        -st-states: state1, state2;\n                    }\n                ", { from: 'path/to/style.css' }), classes = _a.classes, diagnostics = _a.diagnostics;
                chai_1.expect(diagnostics.reports.length, 'no reports').to.eql(0);
                chai_1.expect(classes).to.flatMatch({
                    root: (_b = {},
                        _b[index_1.valueMapping.states] = {
                            state1: null,
                            state2: null
                        },
                        _b)
                });
                var _b;
            });
            it('should support explicit boolean state definition', function () {
                var res = generate_test_util_1.processSource("\n                    .root {\n                        -st-states: state1(boolean);\n                    }\n                ", { from: 'path/to/style.css' });
                chai_1.expect(res.diagnostics.reports.length, 'no reports').to.eql(0);
                chai_1.expect(res.classes).to.containSubset({
                    root: (_a = {},
                        _a[index_1.valueMapping.states] = {
                            state1: null
                        },
                        _a)
                });
                var _a;
            });
        });
        describe('advanced type', function () {
            it('should warn when a state receieves more than a single state type', function () {
                diagnostics_1.expectWarnings("\n                    .root{\n                        |-st-states: $state1(string, number(x))$|;\n                    }\n                ", [{
                        message: 'pseudo-state "state1(string, number(x))" definition must be of a single type',
                        file: 'main.css'
                    }]);
            });
            it('should warn when a state function receives no arguments', function () {
                diagnostics_1.expectWarnings("\n                    .root{\n                        |-st-states: $state1()$|;\n                    }\n                ", [{
                        message: 'pseudo-state "state1" expected a definition of a single type, but received none',
                        file: 'main.css'
                    }]);
            });
            it('should warn when a validator function receives more than a single argument', function () {
                diagnostics_1.expectWarnings("\n                    .my-class {\n                        |-st-states: $state1( string( contains(one, two) ) )$|;\n                    }\n                ", [{
                        // tslint:disable-next-line:max-line-length
                        message: 'pseudo-state "state1" expected "contains" validator to receive a single argument, but it received "one, two"',
                        file: 'main.css'
                    }]);
            });
            it('should warn when encountering an unknown type', function () {
                diagnostics_1.expectWarnings("\n                    .my-class {\n                        |-st-states: state1( $unknown$ )|;\n                    }\n                ", [{
                        message: 'pseudo-state "state1" defined with unknown type: "unknown"',
                        file: 'main.css'
                    }]);
            });
            describe('string', function () {
                it('as a simple validator', function () {
                    var res = generate_test_util_1.processSource("\n                        .root {\n                            -st-states: state1(string);\n                        }\n                    ", { from: 'path/to/style.css' });
                    chai_1.expect(res.diagnostics.reports.length, 'no reports').to.eql(0);
                    chai_1.expect(res.classes).to.containSubset({
                        root: (_a = {},
                            _a[index_1.valueMapping.states] = {
                                state1: {
                                    type: 'string'
                                }
                            },
                            _a)
                    });
                    var _a;
                });
                it('as a validation type with no nested validations', function () {
                    var res = generate_test_util_1.processSource("\n                        .root {\n                            -st-states: state1(string());\n                        }\n                    ", { from: 'path/to/style.css' });
                    chai_1.expect(res.diagnostics.reports.length, 'no reports').to.eql(0);
                    chai_1.expect(res.classes).to.containSubset({
                        root: (_a = {},
                            _a[index_1.valueMapping.states] = {
                                state1: {
                                    type: 'string'
                                }
                            },
                            _a)
                    });
                    var _a;
                });
                it('including a default value', function () {
                    var res = generate_test_util_1.processSource("\n                        .root {\n                            -st-states: state1(string) some Default String;\n                        }\n                    ", { from: 'path/to/style.css' });
                    chai_1.expect(res.diagnostics.reports.length, 'no reports').to.eql(0);
                    chai_1.expect(res.classes).to.containSubset({
                        root: (_a = {},
                            _a[index_1.valueMapping.states] = {
                                state1: {
                                    defaultValue: 'some Default String',
                                    type: 'string'
                                }
                            },
                            _a)
                    });
                    var _a;
                });
                it('with a regex validator', function () {
                    var res = generate_test_util_1.processSource("\n                        .root {\n                            -st-states: state1( string( regex(\"^user\") ));\n                        }\n                    ", { from: 'path/to/style.css' });
                    chai_1.expect(res.diagnostics.reports.length, 'no reports').to.eql(0);
                    chai_1.expect(res.classes).to.containSubset({
                        root: (_a = {},
                            _a[index_1.valueMapping.states] = {
                                state1: {
                                    type: 'string',
                                    arguments: [{
                                            name: 'regex',
                                            args: ['^user']
                                        }]
                                }
                            },
                            _a)
                    });
                    var _a;
                });
                it('with a single nested validator', function () {
                    var res = generate_test_util_1.processSource("\n                        .root {\n                            -st-states: state1(string(minLength(2)));\n                        }\n                    ", { from: 'path/to/style.css' });
                    chai_1.expect(res.diagnostics.reports.length, 'no reports').to.eql(0);
                    chai_1.expect(res.classes).to.containSubset({
                        root: (_a = {},
                            _a[index_1.valueMapping.states] = {
                                state1: {
                                    type: 'string',
                                    arguments: [
                                        {
                                            name: 'minLength',
                                            args: ['2']
                                        }
                                    ]
                                }
                            },
                            _a)
                    });
                    var _a;
                });
                it('with multiple validators', function () {
                    // this test also shows that all validator params are treated as strings
                    var res = generate_test_util_1.processSource("\n                        .root {\n                            -st-states: state1(string(minLength(2), maxLength(\"7\")));\n                        }\n                    ", { from: 'path/to/style.css' });
                    chai_1.expect(res.diagnostics.reports.length, 'no reports').to.eql(0);
                    chai_1.expect(res.classes).to.containSubset({
                        root: (_a = {},
                            _a[index_1.valueMapping.states] = {
                                state1: {
                                    type: 'string',
                                    arguments: [
                                        {
                                            name: 'minLength',
                                            args: ['2']
                                        },
                                        {
                                            name: 'maxLength',
                                            args: ['7']
                                        }
                                    ]
                                }
                            },
                            _a)
                    });
                    var _a;
                });
                it('with a nested validator and a regex validator', function () {
                    var res = generate_test_util_1.processSource("\n                        .root {\n                            -st-states: state1(string( regex(\"^user\"), contains(user) ));\n                        }\n                    ", { from: 'path/to/style.css' });
                    chai_1.expect(res.diagnostics.reports.length, 'no reports').to.eql(0);
                    chai_1.expect(res.classes).to.containSubset({
                        root: (_a = {},
                            _a[index_1.valueMapping.states] = {
                                state1: {
                                    type: 'string',
                                    arguments: [
                                        {
                                            name: 'regex',
                                            args: ['^user']
                                        },
                                        {
                                            name: 'contains',
                                            args: ['user']
                                        }
                                    ]
                                }
                            },
                            _a)
                    });
                    var _a;
                });
            });
            describe('number', function () {
                it('as a simple validator', function () {
                    var res = generate_test_util_1.processSource("\n                        .root {\n                            -st-states: state1(number), state2(number());\n                        }\n                    ", { from: 'path/to/style.css' });
                    chai_1.expect(res.diagnostics.reports.length, 'no reports').to.eql(0);
                    chai_1.expect(res.classes).to.containSubset({
                        root: (_a = {},
                            _a[index_1.valueMapping.states] = {
                                state1: {
                                    type: 'number'
                                },
                                state2: {
                                    type: 'number'
                                }
                            },
                            _a)
                    });
                    var _a;
                });
                it('including a default value', function () {
                    var res = generate_test_util_1.processSource("\n                        .root {\n                            -st-states: state1(number) 7;\n                        }\n                    ", { from: 'path/to/style.css' });
                    chai_1.expect(res.diagnostics.reports.length, 'no reports').to.eql(0);
                    chai_1.expect(res.classes).to.containSubset({
                        root: (_a = {},
                            _a[index_1.valueMapping.states] = {
                                state1: {
                                    defaultValue: '7',
                                    type: 'number'
                                }
                            },
                            _a)
                    });
                    var _a;
                });
            });
            describe('enum', function () {
                it('as a simple validator', function () {
                    var res = generate_test_util_1.processSource("\n                        .root {\n                            -st-states: size(enum(small, medium, large)), color(enum(red, green, blue));\n                        }\n                    ", { from: 'path/to/style.css' });
                    chai_1.expect(res.diagnostics.reports.length, 'no reports').to.eql(0);
                    chai_1.expect(res.classes).to.containSubset({
                        root: (_a = {},
                            _a[index_1.valueMapping.states] = {
                                size: {
                                    type: 'enum',
                                    arguments: ['small', 'medium', 'large']
                                },
                                color: {
                                    type: 'enum',
                                    arguments: ['red', 'green', 'blue']
                                }
                            },
                            _a)
                    });
                    var _a;
                });
                it('including a default value', function () {
                    var res = generate_test_util_1.processSource("\n                        .root {\n                            -st-states: size(enum(small, large)) small;\n                        }\n                    ", { from: 'path/to/style.css' });
                    chai_1.expect(res.diagnostics.reports.length, 'no reports').to.eql(0);
                    chai_1.expect(res.classes).to.containSubset({
                        root: (_a = {},
                            _a[index_1.valueMapping.states] = {
                                size: {
                                    defaultValue: 'small',
                                    type: 'enum',
                                    arguments: ['small', 'large']
                                }
                            },
                            _a)
                    });
                    var _a;
                });
            });
            describe('tag', function () {
                it('as a simple validator', function () {
                    var res = generate_test_util_1.processSource("\n                        .root {\n                            -st-states: category(tag);\n                        }\n                    ", { from: 'path/to/style.css' });
                    chai_1.expect(res.diagnostics.reports.length, 'no reports').to.eql(0);
                    chai_1.expect(res.classes).to.containSubset({
                        root: (_a = {},
                            _a[index_1.valueMapping.states] = {
                                category: {
                                    type: 'tag'
                                }
                            },
                            _a)
                    });
                    var _a;
                });
                it('including a default value', function () {
                    var res = generate_test_util_1.processSource("\n                        .root {\n                            -st-states: category(tag) movie;\n                        }\n                    ", { from: 'path/to/style.css' });
                    chai_1.expect(res.diagnostics.reports.length, 'no reports').to.eql(0);
                    chai_1.expect(res.classes).to.containSubset({
                        root: (_a = {},
                            _a[index_1.valueMapping.states] = {
                                category: {
                                    defaultValue: 'movie',
                                    type: 'tag'
                                }
                            },
                            _a)
                    });
                    var _a;
                });
            });
        });
        describe('custom mapping', function () {
            it('collect typed classes with mapping states', function () {
                var res = generate_test_util_1.processSource("\n                    .root {\n                        -st-states: state1, state2(\"[data-mapped]\");\n                    }\n                ", { from: 'path/to/style.css' });
                chai_1.expect(res.diagnostics.reports.length, 'no reports').to.eql(0);
                chai_1.expect(res.classes).to.flatMatch({
                    root: (_a = {},
                        _a[index_1.valueMapping.states] = {
                            state1: null,
                            state2: '[data-mapped]'
                        },
                        _a)
                });
                var _a;
            });
        });
    });
    describe('transform', function () {
        // What does it do?
        // Replaces all custom state definitions (based on information gather during processing)
        // with their final selector string
        describe('native', function () {
            native_reserved_lists_1.nativePseudoClasses.forEach(function (nativeClass) {
                it("should keep native " + nativeClass + " pseudo-class", function () {
                    var res = generate_test_util_1.generateStylableResult({
                        entry: '/entry.css',
                        files: {
                            '/entry.css': {
                                namespace: 'entry',
                                content: ".root:" + nativeClass + "{}"
                            }
                        }
                    });
                    chai_1.expect(res).to.have.styleRules([".entry--root:" + nativeClass + "{}"]);
                    chai_1.expect(res.meta.diagnostics.reports, 'no diagnostics reported for native states').to.eql([]);
                });
            });
        });
        describe('boolean', function () {
            it('should transfrom to lowercase stylable data-attribute selector [data-NS-state]', function () {
                var res = generate_test_util_1.generateStylableResult({
                    entry: "/entry.st.css",
                    files: {
                        '/entry.st.css': {
                            namespace: 'entry',
                            content: "\n                            .my-class {\n                                -st-states: state1, State2;\n                            }\n                            .my-class:state1 {}\n                            .my-class:State2 {}\n                            "
                        }
                    }
                });
                chai_1.expect(res.meta.diagnostics.reports, 'no diagnostics reported for native states').to.eql([]);
                chai_1.expect(res).to.have.styleRules({
                    1: '.entry--my-class[data-entry-state1] {}',
                    2: '.entry--my-class[data-entry-state2] {}'
                });
            });
            it('should transfrom to lowercase stylable data-attribute selector [data-NS-state]', function () {
                var res = generate_test_util_1.generateStylableResult({
                    entry: "/entry.st.css",
                    files: {
                        '/entry.st.css': {
                            namespace: 'entry',
                            content: "\n                            .my-class {\n                                -st-states: state1, State2;\n                            }\n                            .my-class:state1 {}\n                            .my-class:State2 {}\n                            "
                        }
                    }
                });
                chai_1.expect(res.meta.diagnostics.reports, 'no diagnostics reported for native states').to.eql([]);
                chai_1.expect(res).to.have.styleRules({
                    1: '.entry--my-class[data-entry-state1] {}',
                    2: '.entry--my-class[data-entry-state2] {}'
                });
            });
            it('should resolve nested pseudo-states', function () {
                var res = generate_test_util_1.generateStylableResult({
                    entry: '/entry.st.css',
                    usedFiles: [
                        '/entry.st.css'
                    ],
                    files: {
                        '/entry.st.css': {
                            namespace: 'entry',
                            content: "\n                                .root {\n                                     -st-states: state1;\n                                }\n                                .root:not(:state1) {}\n                            "
                        }
                    }
                });
                chai_1.expect(res.meta.diagnostics.reports, 'no diagnostics reported for native states').to.eql([]);
                chai_1.expect(res).to.have.styleRules({
                    1: '.entry--root:not([data-entry-state1]) {}'
                });
            });
            it('should support explicitly defined boolean state type', function () {
                var res = generate_test_util_1.generateStylableResult({
                    entry: "/entry.st.css",
                    files: {
                        '/entry.st.css': {
                            namespace: 'entry',
                            content: "\n                            .my-class {\n                                -st-states: state1(boolean);\n                            }\n                            .my-class:state1 {}\n                            "
                        }
                    }
                });
                chai_1.expect(res.meta.diagnostics.reports, 'no diagnostics reported for native states').to.eql([]);
                chai_1.expect(res).to.have.styleRules({
                    1: '.entry--my-class[data-entry-state1] {}'
                });
            });
        });
        describe('advanced type / validation', function () {
            xit('should default to a boolean state when state is a function but receives no type', function () {
                // TODO: Make this pass?
                var res = generate_test_util_1.generateStylableResult({
                    entry: "/entry.st.css",
                    files: {
                        '/entry.st.css': {
                            namespace: 'entry',
                            content: "\n                            .my-class| {\n                                -st-states: |state1|();\n                            }\n                            .my-class:state1 {}\n                            "
                        }
                    }
                });
                // const res = expectWarningsFromTransform(config, [{
                //     message: [
                //         'pseudo-state "state1" expected a definition of a single type, but received none'
                //     ].join('\n'),
                //     file: '/entry.st.css'
                // }]);
                chai_1.expect(res).to.have.styleRules({
                    1: '.entry--my-class[data-entry-state1] {}'
                });
            });
            describe('string', function () {
                it('should transform string validator', function () {
                    var res = generate_test_util_1.generateStylableResult({
                        entry: "/entry.st.css",
                        files: {
                            '/entry.st.css': {
                                namespace: 'entry',
                                content: "\n                                .my-class {\n                                    -st-states: state1(string);\n                                }\n                                .my-class:state1(someString) {}\n                                "
                            }
                        }
                    });
                    chai_1.expect(res.meta.diagnostics.reports, 'no diagnostics reported for native states').to.eql([]);
                    chai_1.expect(res).to.have.styleRules({
                        1: '.entry--my-class[data-entry-state1="someString"] {}'
                    });
                });
                it('should support default values for string validator', function () {
                    var res = generate_test_util_1.generateStylableResult({
                        entry: "/entry.st.css",
                        files: {
                            '/entry.st.css': {
                                namespace: 'entry',
                                content: "\n                                .my-class {\n                                    -st-states: stateWithDefault(string) myDefault String;\n                                }\n                                .my-class:stateWithDefault {}\n                                "
                            }
                        }
                    });
                    chai_1.expect(res.meta.diagnostics.reports, 'no diagnostics reported for native states').to.eql([]);
                    chai_1.expect(res).to.have.styleRules({
                        1: '.entry--my-class[data-entry-statewithdefault="myDefault String"] {}'
                    });
                });
                it('should supprt default values through a variable', function () {
                    var res = generate_test_util_1.generateStylableResult({
                        entry: "/entry.st.css",
                        files: {
                            '/entry.st.css': {
                                namespace: 'entry',
                                content: "\n                                :vars {\n                                    myID: user;\n                                }\n\n                                .my-class {\n                                    -st-states: stateWithDefault(string) value(myID)name;\n                                }\n                                .my-class:stateWithDefault {}\n                                "
                            }
                        }
                    });
                    chai_1.expect(res.meta.diagnostics.reports, 'no diagnostics reported for native states').to.eql([]);
                    chai_1.expect(res).to.have.styleRules({
                        1: '.entry--my-class[data-entry-statewithdefault="username"] {}'
                    });
                });
                describe('specific validators', function () {
                    it('should transform string using a valid regex validation', function () {
                        var res = generate_test_util_1.generateStylableResult({
                            entry: "/entry.st.css",
                            files: {
                                '/entry.st.css': {
                                    namespace: 'entry',
                                    content: "\n                                    .my-class {\n                                        -st-states: state1( string( regex(\"^user\") ));\n                                    }\n                                    .my-class:state1(userName) {}\n                                    "
                                }
                            }
                        });
                        chai_1.expect(res.meta.diagnostics.reports, 'no diagnostics reported for native states').to.eql([]);
                        chai_1.expect(res).to.have.styleRules({
                            1: '.entry--my-class[data-entry-state1="userName"] {}'
                        });
                    });
                    it('should warn when using an invalid regex validation', function () {
                        var config = {
                            entry: "/entry.st.css",
                            files: {
                                '/entry.st.css': {
                                    namespace: 'entry',
                                    content: "\n                                    .my-class {\n                                        -st-states: state1( string( regex(\"^user\") ));\n                                    }\n                                    |.my-class:state1(failingParameter)| {}\n                                    "
                                }
                            }
                        };
                        var res = diagnostics_1.expectWarningsFromTransform(config, [{
                                message: [
                                    'pseudo-state "state1" with parameter "failingParameter" failed validation:',
                                    'expected "failingParameter" to match regex "^user"'
                                ].join('\n'),
                                file: '/entry.st.css'
                            }]);
                        chai_1.expect(res).to.have.styleRules({
                            1: '.entry--my-class[data-entry-state1="failingParameter"] {}'
                        });
                    });
                    it('should transform string using a valid contains validator', function () {
                        var res = generate_test_util_1.generateStylableResult({
                            entry: "/entry.st.css",
                            files: {
                                '/entry.st.css': {
                                    namespace: 'entry',
                                    content: "\n                                    .my-class {\n                                        -st-states: state1(string(contains(user)));\n                                    }\n                                    .my-class:state1(userName) {}\n                                    "
                                }
                            }
                        });
                        chai_1.expect(res.meta.diagnostics.reports, 'no diagnostics reported for native states').to.eql([]);
                        chai_1.expect(res).to.have.styleRules({
                            1: '.entry--my-class[data-entry-state1="userName"] {}'
                        });
                    });
                    it('should transform string using a contains validator with a variable', function () {
                        var res = generate_test_util_1.generateStylableResult({
                            entry: "/entry.st.css",
                            files: {
                                '/entry.st.css': {
                                    namespace: 'entry',
                                    content: "\n                                    :vars {\n                                        validPrefix: user;\n                                    }\n\n                                    .my-class {\n                                        -st-states: state1(string(contains(value(validPrefix))));\n                                    }\n                                    .my-class:state1(userName) {}\n                                    "
                                }
                            }
                        });
                        chai_1.expect(res.meta.diagnostics.reports, 'no diagnostics reported for native states').to.eql([]);
                        chai_1.expect(res).to.have.styleRules({
                            1: '.entry--my-class[data-entry-state1="userName"] {}'
                        });
                    });
                    // tslint:disable-next-line:max-line-length
                    it('should transform string using an invalid contains validator (mainintaing passed values)', function () {
                        var config = {
                            entry: "/entry.st.css",
                            files: {
                                '/entry.st.css': {
                                    namespace: 'entry',
                                    content: "\n                                    .my-class {\n                                        -st-states: state1(string(contains(user)));\n                                    }\n                                    |.my-class:state1($wrongState$)| {}\n                                    "
                                }
                            }
                        };
                        var res = diagnostics_1.expectWarningsFromTransform(config, [{
                                message: [
                                    'pseudo-state "state1" with parameter "wrongState" failed validation:',
                                    'expected "wrongState" to contain string "user"'
                                ].join('\n'),
                                file: '/entry.st.css'
                            }]);
                        chai_1.expect(res).to.have.styleRules({
                            1: '.entry--my-class[data-entry-state1="wrongState"] {}'
                        });
                    });
                    it('should transform using multiple validators (regex, minLength, maxLength)', function () {
                        var res = generate_test_util_1.generateStylableResult({
                            entry: "/entry.st.css",
                            files: {
                                '/entry.st.css': {
                                    namespace: 'entry',
                                    content: "\n                                    .my-class {\n                                        -st-states: state1( string( regex(\"^user\"), minLength(3), maxLength(5) ));\n                                    }\n                                    .my-class:state1(user) {}\n                                    "
                                }
                            }
                        });
                        chai_1.expect(res.meta.diagnostics.reports, 'no diagnostics reported for native states').to.eql([]);
                        chai_1.expect(res).to.have.styleRules({
                            1: '.entry--my-class[data-entry-state1="user"] {}'
                        });
                    });
                    it('should transform and warn when passing an invalid value to a minLength validator', function () {
                        var config = {
                            entry: "/entry.st.css",
                            files: {
                                '/entry.st.css': {
                                    namespace: 'entry',
                                    content: "\n                                    .my-class {\n                                        -st-states: state1(string(minLength(7)));\n                                    }\n                                    |.my-class:state1($user$)| {}\n                                    "
                                }
                            }
                        };
                        var res = diagnostics_1.expectWarningsFromTransform(config, [{
                                message: [
                                    'pseudo-state "state1" with parameter "user" failed validation:',
                                    'expected "user" to be of length longer than or equal to 7'
                                ].join('\n'),
                                file: '/entry.st.css'
                            }]);
                        chai_1.expect(res).to.have.styleRules({
                            1: '.entry--my-class[data-entry-state1="user"] {}'
                        });
                    });
                    it('should transform and warn when passing an invalid value to a maxLength validator', function () {
                        var config = {
                            entry: "/entry.st.css",
                            files: {
                                '/entry.st.css': {
                                    namespace: 'entry',
                                    content: "\n                                    .my-class {\n                                        -st-states: state1(string(maxLength(3)));\n                                    }\n                                    |.my-class:state1($user$)| {}\n                                    "
                                }
                            }
                        };
                        var res = diagnostics_1.expectWarningsFromTransform(config, [{
                                message: [
                                    'pseudo-state "state1" with parameter "user" failed validation:',
                                    'expected "user" to be of length shorter than or equal to 3'
                                ].join('\n'),
                                file: '/entry.st.css'
                            }]);
                        chai_1.expect(res).to.have.styleRules({
                            1: '.entry--my-class[data-entry-state1="user"] {}'
                        });
                    });
                    it('should transform and warn when passing an invalid value to a multiple validators', function () {
                        var config = {
                            entry: "/entry.st.css",
                            files: {
                                '/entry.st.css': {
                                    namespace: 'entry',
                                    content: "\n                                    .my-class {\n                                        -st-states: state1( string( maxLength(3), regex(\"^case\") ));\n                                    }\n                                    |.my-class:state1($user$)| {}\n                                    "
                                }
                            }
                        };
                        var res = diagnostics_1.expectWarningsFromTransform(config, [{
                                message: [
                                    'pseudo-state "state1" with parameter "user" failed validation:',
                                    'expected "user" to be of length shorter than or equal to 3',
                                    'expected "user" to match regex "^case"'
                                ].join('\n'),
                                file: '/entry.st.css'
                            }]);
                        chai_1.expect(res).to.have.styleRules({
                            1: '.entry--my-class[data-entry-state1="user"] {}'
                        });
                    });
                    it('should warn when trying to use an unknown string validator', function () {
                        var config = {
                            entry: "/entry.st.css",
                            files: {
                                '/entry.st.css': {
                                    namespace: 'entry',
                                    content: "\n                                    .my-class {\n                                        |-st-states: $state1(string(missing()))$|;\n                                    }\n                                    "
                                }
                            }
                        };
                        var res = diagnostics_1.expectWarningsFromTransform(config, [{
                                message: [
                                    'pseudo-state "state1" default value "" failed validation:',
                                    'encountered unknown string validator "missing"'
                                ].join('\n'),
                                file: '/entry.st.css'
                            }]);
                    });
                });
            });
            describe('number', function () {
                it('should transform number validator', function () {
                    var res = generate_test_util_1.generateStylableResult({
                        entry: "/entry.st.css",
                        files: {
                            '/entry.st.css': {
                                namespace: 'entry',
                                content: "\n                                .my-class {\n                                    -st-states: state1(number);\n                                }\n                                .my-class:state1(42) {}\n                                "
                            }
                        }
                    });
                    chai_1.expect(res.meta.diagnostics.reports, 'no diagnostics reported for native states').to.eql([]);
                    chai_1.expect(res).to.have.styleRules({
                        1: '.entry--my-class[data-entry-state1="42"] {}'
                    });
                });
                it('should warn when a non-number default value is invoked', function () {
                    var config = {
                        entry: "/entry.st.css",
                        files: {
                            '/entry.st.css': {
                                namespace: 'entry',
                                content: "\n                                .my-class{\n                                    |-st-states: $state1(number) defaultBlah$|;\n                                }\n                                "
                            }
                        }
                    };
                    var res = diagnostics_1.expectWarningsFromTransform(config, [{
                            message: [
                                'pseudo-state "state1" default value "defaultBlah" failed validation:',
                                'expected "defaultBlah" to be of type number'
                            ].join('\n'),
                            file: '/entry.st.css'
                        }]);
                });
                it('should warn on an non-number value passed', function () {
                    var config = {
                        entry: "/entry.st.css",
                        files: {
                            '/entry.st.css': {
                                namespace: 'entry',
                                content: "\n                                .my-class{\n                                    -st-states: state1(number);\n                                }\n                                |.my-class:state1(blah)| {}\n                                "
                            }
                        }
                    };
                    var res = diagnostics_1.expectWarningsFromTransform(config, [{
                            message: [
                                'pseudo-state "state1" with parameter "blah" failed validation:',
                                'expected "blah" to be of type number'
                            ].join('\n'),
                            file: '/entry.st.css'
                        }]);
                    chai_1.expect(res).to.have.styleRules({
                        1: '.entry--my-class[data-entry-state1="blah"] {}'
                    });
                });
                it('should warn when trying to use an unknown number validator', function () {
                    var config = {
                        entry: "/entry.st.css",
                        files: {
                            '/entry.st.css': {
                                namespace: 'entry',
                                content: "\n                                .my-class {\n                                    |-st-states: $state1( number( missing() ))$|;\n                                }\n                                "
                            }
                        }
                    };
                    var res = diagnostics_1.expectWarningsFromTransform(config, [{
                            message: [
                                'pseudo-state "state1" default value "" failed validation:',
                                'encountered unknown number validator "missing"'
                            ].join('\n'),
                            file: '/entry.st.css'
                        }]);
                });
                describe('specific validators', function () {
                    it('should warn on invalid min validator', function () {
                        var config = {
                            entry: "/entry.st.css",
                            files: {
                                '/entry.st.css': {
                                    namespace: 'entry',
                                    content: "\n                                    .my-class{\n                                        -st-states: state1(number(min(3)));\n                                    }\n                                    |.my-class:state1(1)| {}\n                                    "
                                }
                            }
                        };
                        var res = diagnostics_1.expectWarningsFromTransform(config, [{
                                message: [
                                    'pseudo-state "state1" with parameter "1" failed validation:',
                                    'expected "1" to be larger than or equal to 3'
                                ].join('\n'),
                                file: '/entry.st.css'
                            }
                        ]);
                        chai_1.expect(res).to.have.styleRules({
                            1: '.entry--my-class[data-entry-state1="1"] {}'
                        });
                    });
                    it('should warn on invalid max validator', function () {
                        var config = {
                            entry: "/entry.st.css",
                            files: {
                                '/entry.st.css': {
                                    namespace: 'entry',
                                    content: "\n                                    .my-class{\n                                        -st-states: state1(number(max(5)));\n                                    }\n                                    |.my-class:state1(42)| {}\n                                    "
                                }
                            }
                        };
                        var res = diagnostics_1.expectWarningsFromTransform(config, [{
                                message: [
                                    'pseudo-state "state1" with parameter "42" failed validation:',
                                    'expected "42" to be lesser then or equal to 5'
                                ].join('\n'),
                                file: '/entry.st.css'
                            }
                        ]);
                        chai_1.expect(res).to.have.styleRules({
                            1: '.entry--my-class[data-entry-state1="42"] {}'
                        });
                    });
                    it('should warn on invalid multipleOf validator', function () {
                        var config = {
                            entry: "/entry.st.css",
                            files: {
                                '/entry.st.css': {
                                    namespace: 'entry',
                                    content: "\n                                    .my-class{\n                                        -st-states: state1(number(multipleOf(5)));\n                                    }\n                                    |.my-class:state1(42)| {}\n                                    "
                                }
                            }
                        };
                        var res = diagnostics_1.expectWarningsFromTransform(config, [{
                                message: [
                                    'pseudo-state "state1" with parameter "42" failed validation:',
                                    'expected "42" to be a multiple of 5'
                                ].join('\n'),
                                file: '/entry.st.css'
                            }]);
                        chai_1.expect(res).to.have.styleRules({
                            1: '.entry--my-class[data-entry-state1="42"] {}'
                        });
                    });
                    it('should not warn on valid min/max/multipleOf validator', function () {
                        var config = {
                            entry: "/entry.st.css",
                            files: {
                                '/entry.st.css': {
                                    namespace: 'entry',
                                    content: "\n                                    .my-class{\n                                        -st-states: state1(number(min(3), max(100), multipleOf(5)));\n                                    }\n                                    |.my-class:state1(40)| {}\n                                    "
                                }
                            }
                        };
                        var res = diagnostics_1.expectWarningsFromTransform(config, []);
                        chai_1.expect(res).to.have.styleRules({
                            1: '.entry--my-class[data-entry-state1="40"] {}'
                        });
                    });
                });
            });
            describe('enum', function () {
                describe('definition', function () {
                    it('should warn when an enum is defined with no options', function () {
                        var config = {
                            entry: "/entry.st.css",
                            files: {
                                '/entry.st.css': {
                                    namespace: 'entry',
                                    content: "\n                                    .my-class {\n                                        |-st-states: size( enum() )|;\n                                    }\n                                    "
                                }
                            }
                        };
                        var res = diagnostics_1.expectWarningsFromTransform(config, [{
                                message: [
                                    'pseudo-state "size" default value "" failed validation:',
                                    'expected enum to be defined with one option or more'
                                ].join('\n'),
                                file: '/entry.st.css'
                            }]);
                    });
                    it('should warn when a default value does not equal one of the options provided', function () {
                        var config = {
                            entry: "/entry.st.css",
                            files: {
                                '/entry.st.css': {
                                    namespace: 'entry',
                                    content: "\n                                    .my-class {\n                                        |-st-states: $size( enum(small, large)) huge$|;\n                                    }\n                                    "
                                }
                            }
                        };
                        var res = diagnostics_1.expectWarningsFromTransform(config, [{
                                message: [
                                    'pseudo-state "size" default value "huge" failed validation:',
                                    'expected "huge" to be one of the options: "small, large"'
                                ].join('\n'),
                                file: '/entry.st.css'
                            }]);
                    });
                });
                it('should transform enum validator', function () {
                    var res = generate_test_util_1.generateStylableResult({
                        entry: "/entry.st.css",
                        files: {
                            '/entry.st.css': {
                                namespace: 'entry',
                                content: "\n                                .my-class {\n                                    -st-states: size( enum(small, large) );\n                                }\n                                .my-class:size(small) {}\n                                "
                            }
                        }
                    });
                    chai_1.expect(res.meta.diagnostics.reports, 'no diagnostics reported for native states').to.eql([]);
                    chai_1.expect(res).to.have.styleRules({
                        1: '.entry--my-class[data-entry-size="small"] {}'
                    });
                });
                it('should transform enum validator with variables in definition and usage', function () {
                    var res = generate_test_util_1.generateStylableResult({
                        entry: "/entry.st.css",
                        files: {
                            '/entry.st.css': {
                                namespace: 'entry',
                                content: "\n                                :vars {\n                                    small: small;\n                                    large: large;\n                                }\n                                .my-class {\n                                    -st-states: size( enum( value(small), value(large) ) );\n                                }\n                                .my-class:size(value(small)) {}\n                                "
                            }
                        }
                    });
                    chai_1.expect(res.meta.diagnostics.reports, 'no diagnostics reported for native states').to.eql([]);
                    chai_1.expect(res).to.have.styleRules({
                        1: '.entry--my-class[data-entry-size="small"] {}'
                    });
                });
                it('should warn when a value does not match any of the enum options', function () {
                    var config = {
                        entry: "/entry.st.css",
                        files: {
                            '/entry.st.css': {
                                namespace: 'entry',
                                content: "\n                                .my-class {\n                                    -st-states: size( enum(small, large) );\n                                }\n                                |.my-class:size(huge)| {}\n                                "
                            }
                        }
                    };
                    var res = diagnostics_1.expectWarningsFromTransform(config, [{
                            message: [
                                'pseudo-state "size" with parameter "huge" failed validation:',
                                'expected "huge" to be one of the options: "small, large"'
                            ].join('\n'),
                            file: '/entry.st.css'
                        }]);
                    chai_1.expect(res).to.have.styleRules({
                        1: '.entry--my-class[data-entry-size="huge"] {}'
                    });
                });
            });
            describe('tag', function () {
                it('should transform tag validator', function () {
                    var res = generate_test_util_1.generateStylableResult({
                        entry: "/entry.st.css",
                        files: {
                            '/entry.st.css': {
                                namespace: 'entry',
                                content: "\n                                .my-class {\n                                    -st-states: category( tag );\n                                }\n                                .my-class:category(movie) {}\n                                "
                            }
                        }
                    });
                    chai_1.expect(res.meta.diagnostics.reports, 'no diagnostics reported for native states').to.eql([]);
                    chai_1.expect(res).to.have.styleRules({
                        1: '.entry--my-class[data-entry-category~="movie"] {}'
                    });
                });
                it('should transform tag validator with a variable in its usage', function () {
                    var res = generate_test_util_1.generateStylableResult({
                        entry: "/entry.st.css",
                        files: {
                            '/entry.st.css': {
                                namespace: 'entry',
                                content: "\n                                :vars {\n                                    category: disco;\n                                }\n                                .my-class {\n                                    -st-states: category( tag() );\n                                }\n                                .my-class:category(value(category)) {}\n                                "
                            }
                        }
                    });
                    chai_1.expect(res.meta.diagnostics.reports, 'no diagnostics reported for native states').to.eql([]);
                    chai_1.expect(res).to.have.styleRules({
                        1: '.entry--my-class[data-entry-category~="disco"] {}'
                    });
                });
                it('should warn when a value includes a space', function () {
                    var config = {
                        entry: "/entry.st.css",
                        files: {
                            '/entry.st.css': {
                                namespace: 'entry',
                                content: "\n                                .my-class {\n                                    -st-states: category( tag );\n                                }\n                                |.my-class:category($one two$)| {}\n                                "
                            }
                        }
                    };
                    var res = diagnostics_1.expectWarningsFromTransform(config, [{
                            message: [
                                'pseudo-state "category" with parameter "one two" failed validation:',
                                'expected "one two" to be a single value with no spaces'
                            ].join('\n'),
                            file: '/entry.st.css'
                        }]);
                    chai_1.expect(res).to.have.styleRules({
                        1: '.entry--my-class[data-entry-category~="one two"] {}'
                    });
                });
            });
        });
        describe('custom mapping', function () {
            it('should transform any quoted string (trimmed)', function () {
                var res = generate_test_util_1.generateStylableResult({
                    entry: "/entry.st.css",
                    files: {
                        '/entry.st.css': {
                            namespace: 'entry',
                            content: "\n                            .my-class {\n                                -st-states: my-state('.X'), my-other-state(\"  .y[data-z=\\\"value\\\"]  \");\n                            }\n                            .my-class:my-state {}\n                            .my-class:my-other-state {}\n                            "
                        }
                    }
                });
                chai_1.expect(res).to.have.styleRules({
                    1: '.entry--my-class.X {}',
                    2: '.entry--my-class.y[data-z="value"] {}'
                });
            });
            it('should not transform any internal state look-alike', function () {
                var res = generate_test_util_1.generateStylableResult({
                    entry: "/entry.st.css",
                    files: {
                        '/entry.st.css': {
                            namespace: 'entry',
                            content: "\n                                .root {\n                                    -st-states: open(\":not(:focus-within):not(:hover)\");\n                                }\n                                .root:open {}\n                            "
                        }
                    }
                });
                chai_1.expect(res).to.have.styleRules({
                    1: '.entry--root:not(:focus-within):not(:hover) {}'
                });
            });
        });
        describe('inheritance', function () {
            it('should resolve extended type state', function () {
                var res = generate_test_util_1.generateStylableResult({
                    entry: "/entry.st.css",
                    files: {
                        '/entry.st.css': {
                            namespace: 'entry',
                            content: "\n                                :import {\n                                    -st-from: \"./inner.st.css\";\n                                    -st-default: Inner;\n                                }\n                                .my-class {\n                                    -st-extends: Inner;\n                                }\n                                .my-class:my-state {}\n                            "
                        },
                        '/inner.st.css': {
                            namespace: 'inner',
                            content: "\n                                .root {\n                                    -st-states: my-state;\n                                }\n                            "
                        }
                    }
                });
                chai_1.expect(res.meta.diagnostics.reports, 'no diagnostics reported for imported states').to.eql([]);
                chai_1.expect(res).to.have.styleRules({
                    1: '.entry--my-class.inner--root[data-inner-my-state] {}'
                });
            });
            it('should resolve override type state', function () {
                var res = generate_test_util_1.generateStylableResult({
                    entry: "/entry.st.css",
                    files: {
                        '/entry.st.css': {
                            namespace: 'entry',
                            content: "\n                                :import {\n                                    -st-from: \"./extended-state.st.css\";\n                                    -st-default: ExtendedState;\n                                }\n                                :import {\n                                    -st-from: \"./proxy-state.st.css\";\n                                    -st-default: ProxyState;\n                                }\n                                .direct {\n                                    -st-extends: ExtendedState;\n                                    -st-states: my-state;\n                                }\n                                .proxy {\n                                    -st-extends: ProxyState;\n                                    -st-states: my-state;\n                                }\n                                .direct:my-state {}\n                                .proxy:my-state {}\n                            "
                        },
                        '/proxy-state.st.css': {
                            namespace: 'proxyState',
                            content: "\n                                :import {\n                                    -st-from: \"./inner.st.css\";\n                                    -st-default: ExtendedState;\n                                }\n                                .root {\n                                    -st-extends: ExtendedState;\n                                }\n                            "
                        },
                        '/extended-state.st.css': {
                            namespace: 'extendedState',
                            content: "\n                                .root {\n                                    -st-states: my-state;\n                                }\n                            "
                        }
                    }
                });
                chai_1.expect(res).to.have.styleRules({
                    2: '.entry--direct.extendedState--root[data-entry-my-state] {}',
                    3: '.entry--proxy.proxyState--root[data-entry-my-state] {}'
                });
            });
            it('should resolve state of pseudo-element', function () {
                var res = generate_test_util_1.generateStylableResult({
                    entry: "/entry.st.css",
                    files: {
                        '/entry.st.css': {
                            namespace: 'entry',
                            content: "\n                                :import {\n                                    -st-from: \"./imported.st.css\";\n                                    -st-default: Imported;\n                                }\n                                .local {\n                                    -st-extends: Imported;\n                                }\n                                .local::inner:my-state {}\n                                Imported::inner:my-state {}\n                            "
                        },
                        '/imported.st.css': {
                            namespace: 'imported',
                            content: "\n                                .inner {\n                                    -st-states: my-state;\n                                }\n                            "
                        }
                    }
                });
                chai_1.expect(res).to.have.styleRules({
                    1: '.entry--local.imported--root .imported--inner[data-imported-my-state] {}',
                    2: '.imported--root .imported--inner[data-imported-my-state] {}'
                });
            });
            it('should resolve state from pseudo-element that inherits the state ', function () {
                var res = generate_test_util_1.generateStylableResult({
                    entry: "/entry.st.css",
                    files: {
                        '/entry.st.css': {
                            namespace: 'entry',
                            content: "\n                                :import{\n                                    -st-from: \"./type.st.css\";\n                                    -st-default: Type;\n                                }\n                                .my-class {\n                                    -st-extends: Type;\n                                }\n                                .my-class::element:my-state {}\n                            "
                        },
                        '/type.st.css': {
                            namespace: 'type',
                            content: "\n                                :import {\n                                    -st-from: \"./with-state.st.css\";\n                                    -st-default: WithState;\n                                }\n                                .element {\n                                    -st-extends: WithState;\n                                }\n                            "
                        },
                        '/with-state.st.css': {
                            namespace: 'withState',
                            content: "\n                                .root {\n                                    -st-states: my-state;\n                                }\n                            "
                        }
                    }
                });
                chai_1.expect(res).to.have.styleRules({
                    1: '.entry--my-class.type--root .type--element[data-withstate-my-state] {}'
                });
            });
        });
        describe('@media', function () {
            it('handle scoping inside media queries', function () {
                var res = generate_test_util_1.generateStylableResult({
                    entry: "/entry.st.css",
                    files: {
                        '/entry.st.css': {
                            namespace: 'entry',
                            content: "\n                                @media (max-width: 300px) {\n                                    .my-class {\n                                        -st-states: my-state;\n                                    }\n                                    .my-class:my-state {}\n                                }\n                            "
                        }
                    }
                });
                chai_1.expect(res).to.have.mediaQuery(0).with.styleRules({
                    1: '.entry--my-class[data-entry-my-state] {}'
                });
            });
        });
    });
    describe('diagnostics', function () {
        // TODO: Add warning implementation
        xit('should return warning for state without selector', function () {
            diagnostics_1.expectWarnings("\n                |:hover|{\n\n                }\n            ", [{ message: 'global states are not supported, use .root:hover instead', file: 'main.css' }]);
        });
        it('should trigger a warning when trying target an unknown state and keep the state', function () {
            var config = {
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "|.root:$unknownState$|{}"
                    }
                }
            };
            var res = diagnostics_1.expectWarningsFromTransform(config, [
                { message: 'unknown pseudo-state "unknownState"', file: '/entry.st.css' }
            ]);
            chai_1.expect(res, 'keep unknown state').to.have.styleRules([".entry--root:unknownState{}"]);
        });
        it('should warn when defining states in complex selector', function () {
            diagnostics_1.expectWarnings("\n                .gaga:hover {\n                    |-st-states|:shmover;\n                }\n            ", [{ message: 'cannot define pseudo states inside complex selectors', file: 'main.css' }]);
        });
        it('should warn when defining a state inside an element selector', function () {
            diagnostics_1.expectWarnings("\n                MyElement {\n                    |-st-states|:shmover;\n                }\n            ", [{ message: 'cannot define pseudo states inside element selectors', file: 'main.css' }]);
        });
        it('should warn when overriding class states', function () {
            diagnostics_1.expectWarnings("\n                .root {\n                    -st-states: mystate;\n                }\n                .root {\n                    |-st-states: mystate2;|\n                }\n            ", [{ message: 'override "-st-states" on typed rule "root"', file: 'main.css' }]);
        });
        // TODO: test for case insensitivity in validators
        // it('should check for state name collision in the same definition', () => {});
        // it('should check for type collision in states with the same name', () => {});
    });
});
//# sourceMappingURL=pseudo-states.spec.js.map