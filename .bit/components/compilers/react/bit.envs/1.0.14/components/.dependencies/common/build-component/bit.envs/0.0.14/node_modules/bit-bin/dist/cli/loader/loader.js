"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _ora() {
  const data = _interopRequireDefault(require("ora"));

  _ora = function () {
    return data;
  };

  return data;
}

function _constants() {
  const data = require("../../constants");

  _constants = function () {
    return data;
  };

  return data;
}

let _loader;

const loader = {
  on,
  off,
  stop,
  start,
  // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
  setText,
  get,
  succeed,
  fail,
  warn,
  info,
  stopAndPersist
};

function start(text) {
  if (_loader) {
    if (text) _loader.text = text;

    _loader.start();
  }

  return loader;
}

function setText(text) {
  if (_loader) _loader.text = text;
  return loader;
}

function get() {
  return _loader;
}

function stop() {
  if (_loader) _loader.stop();
  return loader;
}

function on() {
  if (!_loader) _loader = (0, _ora().default)({
    spinner: _constants().SPINNER_TYPE,
    text: ''
  });
  return loader;
}

function off() {
  stop();
  _loader = null;
  return loader;
}

function succeed(text) {
  if (_loader) _loader.succeed(text);
  return loader;
}

function fail(text) {
  if (_loader) _loader.fail(text);
  return loader;
}

function warn(text) {
  if (_loader) _loader.warn(text);
  return loader;
}

function info(text) {
  if (_loader) _loader.info(text);
  return loader;
}

function stopAndPersist(options) {
  if (_loader) _loader.stopAndPersist(options);
  return loader;
}

var _default = loader;
exports.default = _default;