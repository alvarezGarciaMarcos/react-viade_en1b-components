import semver from 'semver';
import { Driver } from '../driver';
import WorkspaceConfig from './config/workspace-config';
import { BitId, BitIds } from '../bit-id';
import Component from './component';
import { Scope, ComponentWithDependencies } from '../scope';
import BitMap from './bit-map/bit-map';
import DirStructure from './dir-structure/dir-structure';
import { ModelComponent, Version } from '../scope/models';
import CompilerExtension from '../extensions/compiler-extension';
import TesterExtension from '../extensions/tester-extension';
import { PathOsBased, PathRelative, PathAbsolute, PathOsBasedAbsolute, PathOsBasedRelative } from '../utils/path';
import { InvalidComponent } from './component/consumer-component';
import { BitIdStr } from '../bit-id/bit-id';
import { WorkspaceConfigProps } from './config/workspace-config';
import ComponentLoader from './component/component-loader';
import EnvExtension from '../extensions/env-extension';
import { AutoTagResult } from '../scope/component-ops/auto-tag';
import { EnvType } from '../extensions/env-extension-types';
declare type ConsumerProps = {
    projectPath: string;
    config: WorkspaceConfig;
    scope: Scope;
    created?: boolean;
    isolated?: boolean;
    bitMap: BitMap;
    addedGitHooks?: string[] | null | undefined;
    existingGitHooks: string[] | null | undefined;
};
declare type ComponentStatus = {
    modified: boolean;
    newlyCreated: boolean;
    deleted: boolean;
    staged: boolean;
    notExist: boolean;
    missingFromScope: boolean;
    nested: boolean;
};
export default class Consumer {
    projectPath: PathOsBased;
    created: boolean;
    config: WorkspaceConfig;
    scope: Scope;
    bitMap: BitMap;
    isolated: boolean;
    addedGitHooks: string[] | null | undefined;
    existingGitHooks: string[] | null | undefined;
    _driver: Driver;
    _dirStructure: DirStructure;
    _componentsStatusCache: Record<string, any>;
    packageManagerArgs: string[];
    componentLoader: ComponentLoader;
    constructor({ projectPath, config, scope, created, isolated, bitMap, addedGitHooks, existingGitHooks }: ConsumerProps);
    readonly compiler: Promise<CompilerExtension | null | undefined>;
    readonly tester: Promise<TesterExtension | null | undefined>;
    readonly driver: Driver;
    readonly dirStructure: DirStructure;
    readonly bitmapIds: BitIds;
    getEnv(envType: EnvType, context: Record<string, any> | null | undefined): Promise<EnvExtension | null | undefined>;
    getTmpFolder(fullPath?: boolean): PathOsBased;
    cleanTmpFolder(): Promise<void | null>;
    warnForMissingDriver(msg?: string): boolean;
    migrate(verbose: any): Record<string, any>;
    write(): Promise<Consumer>;
    getPath(): PathOsBased;
    toAbsolutePath(pathStr: PathRelative): PathOsBasedAbsolute;
    getPathRelativeToConsumer(pathToCheck: PathRelative | PathAbsolute): PathOsBasedRelative;
    getParsedId(id: BitIdStr): BitId;
    getParsedIdIfExist(id: BitIdStr): BitId | null | undefined;
    loadComponentFromModel(id: BitId): Promise<Component>;
    loadComponentFromModelIfExist(id: BitId): Promise<Component | null | undefined>;
    loadAllVersionsOfComponentFromModel(id: BitId): Promise<Component[]>;
    loadComponentWithDependenciesFromModel(id: BitId, throwIfNotExist?: boolean): Promise<ComponentWithDependencies>;
    loadComponent(id: BitId): Promise<Component>;
    loadComponentForCapsule(id: BitId): Promise<Component>;
    loadComponents(ids: BitIds, throwOnFailure?: boolean): Promise<{
        components: Component[];
        invalidComponents: InvalidComponent[];
    }>;
    importEnvironment(bitId: BitId, verbose?: boolean, dontPrintEnvMsg: boolean): Promise<ComponentWithDependencies[]>;
    importComponents(ids: BitIds, withAllVersions: boolean, saveDependenciesAsComponents?: boolean): Promise<ComponentWithDependencies[]>;
    shouldDependenciesSavedAsComponents(bitIds: BitId[], saveDependenciesAsComponents?: boolean): Promise<{
        id: BitId;
        saveDependenciesAsComponents: boolean;
    }[]>;
    shouldDistsBeInsideTheComponent(): boolean;
    potentialComponentsForAutoTagging(modifiedComponents: BitIds): BitIds;
    listComponentsForAutoTagging(modifiedComponents: BitIds): Promise<ModelComponent[]>;
    isComponentModified(componentFromModel: Version, componentFromFileSystem: Component): Promise<boolean>;
    getComponentStatusById(id: BitId): Promise<ComponentStatus>;
    tag(ids: BitIds, message: string, exactVersion: string | null | undefined, releaseType: semver.ReleaseType, force: boolean | null | undefined, verbose: boolean | null | undefined, ignoreUnresolvedDependencies: boolean | null | undefined, ignoreNewestVersion: boolean, skipTests: boolean | undefined, skipAutoTag: boolean): Promise<{
        taggedComponents: Component[];
        autoTaggedResults: AutoTagResult[];
    }>;
    updateComponentsVersions(components: Array<ModelComponent | Component>): Promise<any>;
    getComponentIdFromNodeModulesPath(requirePath: string, bindingPrefix: string): BitId;
    composeRelativeComponentPath(bitId: BitId): string;
    composeComponentPath(bitId: BitId): PathOsBasedAbsolute;
    composeRelativeDependencyPath(bitId: BitId): PathOsBased;
    composeDependencyPath(bitId: BitId): PathOsBased;
    static create(projectPath: PathOsBasedAbsolute, noGit: boolean | undefined, workspaceConfigProps: WorkspaceConfigProps): Promise<Consumer>;
    static _getScopePath(projectPath: PathOsBasedAbsolute, noGit: boolean): PathOsBasedAbsolute;
    static ensure(projectPath: PathOsBasedAbsolute, standAlone: boolean | undefined, workspaceConfigProps: WorkspaceConfigProps): Promise<Consumer>;
    static reset(projectPath: PathOsBasedAbsolute, resetHard: boolean, noGit?: boolean): Promise<void>;
    static createIsolatedWithExistingScope(consumerPath: PathOsBased, scope: Scope): Promise<Consumer>;
    static locateProjectScope(projectPath: string): string | null;
    static load(currentPath: PathOsBasedAbsolute): Promise<Consumer>;
    cleanFromBitMap(componentsToRemoveFromFs: BitIds, removedDependencies: BitIds): Promise<void>;
    addRemoteAndLocalVersionsToDependencies(component: Component, loadedFromFileSystem: boolean): Promise<void>;
    getAuthoredAndImportedDependentsIdsOf(components: Component[]): Promise<BitIds>;
    getAuthoredAndImportedDependentsComponentsOf(components: Component[]): Promise<Component[]>;
    ejectConf(componentId: BitId, { ejectPath }: {
        ejectPath: string | null | undefined;
    }): Promise<import("./component-ops/eject-conf").EjectConfResult>;
    injectConf(componentId: BitId, force: boolean): Promise<import("./component-ops/eject-conf").EjectConfResult>;
    _getEnvProps(envType: EnvType, context: Record<string, any> | null | undefined): {
        name: string;
        consumerPath: string;
        scopePath: string;
        rawConfig: Record<string, any>;
        files: string[];
        bitJsonPath: string;
        options: import("../extensions/base-extension").BaseExtensionOptions;
        envType: EnvType;
        context: Record<string, any> | null | undefined;
    } | undefined;
    onDestroy(): Promise<any>;
}
export {};
