"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _bluebird() {
  const data = require("bluebird");

  _bluebird = function () {
    return data;
  };

  return data;
}

function _consumer() {
  const data = require("../../../consumer");

  _consumer = function () {
    return data;
  };

  return data;
}

function _componentsList() {
  const data = _interopRequireDefault(require("../../../consumer/component/components-list"));

  _componentsList = function () {
    return data;
  };

  return data;
}

function _analytics() {
  const data = require("../../../analytics/analytics");

  _analytics = function () {
    return data;
  };

  return data;
}

function _loader() {
  const data = _interopRequireDefault(require("../../../cli/loader"));

  _loader = function () {
    return data;
  };

  return data;
}

function _loaderMessages() {
  const data = require("../../../cli/loader/loader-messages");

  _loaderMessages = function () {
    return data;
  };

  return data;
}

function _componentsPendingImport() {
  const data = _interopRequireDefault(require("../../../consumer/component-ops/exceptions/components-pending-import"));

  _componentsPendingImport = function () {
    return data;
  };

  return data;
}

var _default =
/*#__PURE__*/
function () {
  var _status = (0, _bluebird().coroutine)(function* () {
    _loader().default.start(_loaderMessages().BEFORE_STATUS);

    const consumer = yield (0, _consumer().loadConsumer)();
    const componentsList = new (_componentsList().default)(consumer); // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!

    const newComponents = yield componentsList.listNewComponents(true);
    const modifiedComponent = yield componentsList.listModifiedComponents(true);
    const stagedComponents = yield componentsList.listExportPendingComponents();
    const autoTagPendingComponents = yield componentsList.listAutoTagPendingComponents();
    const autoTagPendingComponentsStr = autoTagPendingComponents.map(component => component.id().toString());
    const allInvalidComponents = yield componentsList.listInvalidComponents();
    const importPendingComponents = allInvalidComponents // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    .filter(c => c.error instanceof _componentsPendingImport().default) // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    .map(i => i.id); // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!

    const invalidComponents = allInvalidComponents.filter(c => !(c.error instanceof _componentsPendingImport().default));
    const outdatedComponents = yield componentsList.listOutdatedComponents(); // Run over the components to check if there is missing dependencies
    // If there is at least one we won't tag anything
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!

    const newAndModified = newComponents.concat(modifiedComponent); // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!

    const componentsWithMissingDeps = newAndModified.filter(component => {
      return Boolean(component.issues);
    });

    _analytics().Analytics.setExtraData('new_components', newComponents.length);

    _analytics().Analytics.setExtraData('staged_components', stagedComponents.length);

    _analytics().Analytics.setExtraData('num_components_with_missing_dependencies', componentsWithMissingDeps.length);

    _analytics().Analytics.setExtraData('autoTagPendingComponents', autoTagPendingComponents.length);

    _analytics().Analytics.setExtraData('deleted', invalidComponents.length);

    yield consumer.onDestroy();
    return {
      newComponents: _componentsList().default.sortComponentsByName(newComponents),
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      modifiedComponent: _componentsList().default.sortComponentsByName(modifiedComponent),
      stagedComponents: _componentsList().default.sortComponentsByName(stagedComponents),
      componentsWithMissingDeps,
      // no need to sort, we don't print it as is
      importPendingComponents,
      // no need to sort, we use only its length
      autoTagPendingComponents: _componentsList().default.sortComponentsByName(autoTagPendingComponentsStr),
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      invalidComponents,
      outdatedComponents
    };
  });

  function status() {
    return _status.apply(this, arguments);
  }

  return status;
}();

exports.default = _default;