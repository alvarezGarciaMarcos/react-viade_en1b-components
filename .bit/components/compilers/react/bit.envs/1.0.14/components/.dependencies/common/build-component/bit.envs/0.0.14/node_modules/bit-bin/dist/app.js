"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

function Promise() {
  const data = _interopRequireWildcard(require("bluebird"));

  Promise = function () {
    return data;
  };

  return data;
}

function _loudRejection() {
  const data = _interopRequireDefault(require("loud-rejection"));

  _loudRejection = function () {
    return data;
  };

  return data;
}

function _commandRegistrarBuilder() {
  const data = _interopRequireDefault(require("./cli/command-registrar-builder"));

  _commandRegistrarBuilder = function () {
    return data;
  };

  return data;
}

function _extensionsLoader() {
  const data = _interopRequireDefault(require("./extensions/extensions-loader"));

  _extensionsLoader = function () {
    return data;
  };

  return data;
}

function _hooks() {
  const data = _interopRequireDefault(require("./hooks"));

  _hooks = function () {
    return data;
  };

  return data;
}

// removing this, default to longStackTraces also when env is `development`, which impacts the
// performance dramatically. (see http://bluebirdjs.com/docs/api/promise.longstacktraces.html)
Promise().config({
  longStackTraces: process.env.BLUEBIRD_DEBUG
});
(0, _loudRejection().default)();

_hooks().default.init(); // Load extensions
// eslint-disable-next-line promise/catch-or-return


(0, _extensionsLoader().default)().then(extensions => {
  // Make sure to register all the hooks actions in the global hooks manager
  extensions.forEach(extension => {
    extension.registerHookActionsOnHooksManager();
  });
  const extensionsCommands = extensions.reduce((acc, curr) => {
    if (curr.commands && curr.commands.length) {
      // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      acc = acc.concat(curr.commands);
    }

    return acc;
  }, []);
  const registrar = (0, _commandRegistrarBuilder().default)(extensionsCommands);

  try {
    registrar.run();
  } catch (err) {
    console.error('loud rejected:', err); // eslint-disable-line no-console
  }
});