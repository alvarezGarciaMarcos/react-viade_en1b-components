"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var stylable_value_parsers_1 = require("./stylable-value-parsers");
var StylableResolver = /** @class */ (function () {
    function StylableResolver(fileProcessor, requireModule) {
        this.fileProcessor = fileProcessor;
        this.requireModule = requireModule;
    }
    StylableResolver.prototype.resolveImport = function (importSymbol) {
        var from = importSymbol.import.from;
        var symbol;
        if (from.match(/\.css$/)) {
            var meta = void 0;
            try {
                meta = this.fileProcessor.process(from);
            }
            catch (e) {
                return null;
            }
            if (importSymbol.type === 'default') {
                symbol = meta.mappedSymbols[meta.root];
            }
            else {
                symbol = meta.mappedSymbols[importSymbol.name];
            }
            return { _kind: 'css', symbol: symbol, meta: meta };
        }
        else {
            var _module = this.requireModule(from);
            if (importSymbol.type === 'default') {
                symbol = _module.default || _module;
            }
            else {
                symbol = _module[importSymbol.name];
            }
            return { _kind: 'js', symbol: symbol, meta: null };
        }
    };
    StylableResolver.prototype.resolve = function (maybeImport) {
        if (!maybeImport || maybeImport._kind !== 'import') {
            if (maybeImport && maybeImport._kind !== 'var') {
                if (maybeImport.alias && !maybeImport[stylable_value_parsers_1.valueMapping.extends]) {
                    maybeImport = maybeImport.alias;
                }
                else if (maybeImport[stylable_value_parsers_1.valueMapping.extends]) {
                    maybeImport = maybeImport[stylable_value_parsers_1.valueMapping.extends];
                }
                else {
                    return null;
                }
            }
            else {
                return null;
            }
        }
        if (!maybeImport || maybeImport._kind !== 'import') {
            return null;
        }
        return this.resolveImport(maybeImport);
    };
    StylableResolver.prototype.deepResolve = function (maybeImport, path) {
        if (path === void 0) { path = []; }
        var resolved = this.resolve(maybeImport);
        while (resolved && resolved._kind === 'css' && resolved.symbol && resolved.symbol._kind === 'import') {
            resolved = this.resolve(resolved.symbol);
        }
        if (resolved
            && resolved.symbol
            && resolved.meta
            && (resolved.symbol._kind === 'class' || resolved.symbol._kind === 'element')
            && resolved.symbol.alias
            && !resolved.symbol[stylable_value_parsers_1.valueMapping.extends]) {
            if (path.indexOf(resolved.symbol) !== -1) {
                return { _kind: 'css', symbol: resolved.symbol, meta: resolved.meta };
            }
            path.push(resolved.symbol);
            return this.deepResolve(resolved.symbol.alias, path);
        }
        return resolved;
    };
    StylableResolver.prototype.resolveSymbolOrigin = function (symbol, meta, path) {
        if (path === void 0) { path = []; }
        if (!symbol || !meta) {
            return null;
        }
        if (symbol._kind === 'element' || symbol._kind === 'class') {
            if (path.indexOf(symbol) !== -1) {
                return { meta: meta, symbol: symbol, _kind: 'css' };
            }
            path.push(symbol);
            var isAliasOnly = symbol.alias && !symbol[stylable_value_parsers_1.valueMapping.extends];
            return isAliasOnly ? this.resolveSymbolOrigin(symbol.alias, meta, path) : { meta: meta, symbol: symbol, _kind: 'css' };
        }
        else if (symbol._kind === 'import') {
            var resolved = this.resolveImport(symbol);
            if (resolved && resolved.symbol && resolved._kind === 'css') {
                return this.resolveSymbolOrigin(resolved.symbol, resolved.meta, path);
            }
            else {
                return null;
            }
        }
        return null;
    };
    StylableResolver.prototype.resolveClass = function (meta, symbol) {
        return this.resolveName(meta, symbol, false);
    };
    StylableResolver.prototype.resolveName = function (meta, symbol, isElement) {
        var type = isElement ? 'element' : 'class';
        var finalSymbol;
        var finalMeta;
        if (symbol._kind === type) {
            finalSymbol = symbol;
            finalMeta = meta;
        }
        else if (symbol._kind === 'import') {
            var resolved = this.deepResolve(symbol);
            if (resolved && resolved._kind === 'css' && resolved.symbol) {
                if (resolved.symbol._kind === 'class' || resolved.symbol._kind === 'element') {
                    finalSymbol = resolved.symbol;
                    finalMeta = resolved.meta;
                }
                else {
                    // TODO: warn
                }
            }
            else {
                // TODO: warn
            }
        }
        else {
            // TODO: warn
        }
        if (finalMeta && finalSymbol) {
            return {
                _kind: 'css',
                symbol: finalSymbol,
                meta: finalMeta
            };
        }
        else {
            return null;
        }
    };
    StylableResolver.prototype.resolveElement = function (meta, symbol) {
        return this.resolveName(meta, symbol, true);
    };
    StylableResolver.prototype.resolveExtends = function (meta, className, isElement, transformer) {
        if (isElement === void 0) { isElement = false; }
        var bucket = isElement ? meta.elements : meta.classes;
        var type = isElement ? 'element' : 'class';
        var customSelector = isElement ? null : meta.customSelectors[':--' + className];
        if (!bucket[className] && !customSelector) {
            return [];
        }
        if (customSelector && transformer) {
            var parsed = transformer.resolveSelectorElements(meta, customSelector);
            if (parsed.length === 1) {
                return parsed[0][parsed[0].length - 1].resolved;
            }
            else {
                return [];
            }
        }
        var extendPath = [];
        var resolvedClass = this.resolveName(meta, bucket[className], isElement);
        if (resolvedClass &&
            resolvedClass._kind === 'css' &&
            resolvedClass.symbol &&
            resolvedClass.symbol._kind === type) {
            var current = resolvedClass;
            var extend = resolvedClass.symbol[stylable_value_parsers_1.valueMapping.extends] || resolvedClass.symbol.alias;
            while (current) {
                extendPath.push(current);
                if (!extend) {
                    break;
                }
                var res = this.resolve(extend);
                if (res &&
                    res._kind === 'css' &&
                    res.symbol &&
                    (res.symbol._kind === 'element' || res.symbol._kind === 'class')) {
                    current = res;
                    extend = res.symbol[stylable_value_parsers_1.valueMapping.extends] || res.symbol.alias;
                }
                else {
                    break;
                }
            }
        }
        return extendPath;
    };
    return StylableResolver;
}());
exports.StylableResolver = StylableResolver;
//# sourceMappingURL=stylable-resolver.js.map