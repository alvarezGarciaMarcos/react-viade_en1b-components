/// <reference types="node" />
import * as semver from 'semver';
import { Ref, BitObject } from '../objects';
import Version from './version';
import BitId from '../../bit-id/bit-id';
import ConsumerComponent from '../../consumer/component';
import Repository from '../objects/repository';
import ComponentVersion from '../component-version';
import ComponentObjects from '../component-objects';
import { ManipulateDirItem } from '../../consumer/component-ops/manipulate-dir';
declare type State = {
    versions?: {
        [version: string]: {
            local?: boolean;
        };
    };
};
declare type Versions = {
    [version: string]: Ref;
};
export declare type ScopeListItem = {
    url: string;
    name: string;
    date: string;
};
export declare type ComponentProps = {
    scope: string | null | undefined;
    name: string;
    versions?: Versions;
    lang: string;
    deprecated: boolean;
    bindingPrefix: string;
    local?: boolean;
    state?: State;
    scopesList?: ScopeListItem[];
};
export default class Component extends BitObject {
    scope: string | null | undefined;
    name: string;
    versions: Versions;
    lang: string;
    deprecated: boolean;
    bindingPrefix: string;
    local: boolean | null | undefined;
    state: State;
    scopesList: ScopeListItem[];
    constructor(props: ComponentProps);
    readonly versionArray: Ref[];
    listVersions(sort?: 'ASC' | 'DESC'): string[];
    hasVersion(version: string): boolean;
    addScopeListItem(scopeListItem: ScopeListItem): void;
    _getComparableVersionsObjects(otherComponent: Component, local: boolean): {
        thisComponentVersions: Versions;
        otherComponentVersions: Versions;
    };
    compatibleWith(component: Component, local: boolean): boolean;
    diffWith(component: Component, local: boolean): string[];
    latest(): string;
    latestExisting(repository: Repository): string;
    collectLogs(repo: Repository): Promise<{
        [key: number]: {
            message: string;
            date: string;
            hash: string;
        } | null | undefined;
    }>;
    collectVersions(repo: Repository): Promise<ConsumerComponent[]>;
    getVersionToAdd(releaseType: any, exactVersion: string | null | undefined): string;
    addVersion(version: Version, versionToAdd: string): string;
    version(releaseType?: semver.ReleaseType): any;
    id(): string;
    toBitId(): BitId;
    toBitIdWithLatestVersion(): BitId;
    toBitIdWithLatestVersionAllowNull(): BitId;
    toObject(): {
        name: string;
        scope: string | null | undefined;
        versions: {};
        lang: string;
        deprecated: boolean;
        bindingPrefix: string;
        remotes: ScopeListItem[];
    };
    loadVersion(version: string, repository: Repository): Promise<Version>;
    loadVersionSync(version: string, repository: Repository, throws?: boolean): Version;
    collectObjects(repo: Repository): Promise<ComponentObjects>;
    removeVersion(version: string): Ref;
    toComponentVersion(versionStr: string): ComponentVersion;
    toConsumerComponent(versionStr: string, scopeName: string, repository: Repository, manipulateDirData: ManipulateDirItem[] | null | undefined): Promise<ConsumerComponent>;
    refs(): Ref[];
    replaceRef(oldRef: Ref, newRef: Ref): void;
    validateBeforePersisting(componentStr: string): void;
    toBuffer(pretty: boolean): Buffer;
    clearStateData(): void;
    markVersionAsLocal(version: string): void;
    getLocalVersions(): string[];
    isLocallyChanged(): boolean;
    static parse(contents: string): Component;
    static from(props: ComponentProps): Component;
    static fromBitId(bitId: BitId): Component;
    validate(): void;
}
export {};
