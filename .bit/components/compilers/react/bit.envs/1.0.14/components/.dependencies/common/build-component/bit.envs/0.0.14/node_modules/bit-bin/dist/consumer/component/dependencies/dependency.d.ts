import { BitId } from '../../../bit-id';
import { PathLinux } from '../../../utils/path';
import { ImportSpecifier } from './dependency-resolver/types/dependency-tree-type';
import { ManipulateDirItem } from '../../component-ops/manipulate-dir';
export declare type RelativePath = {
    sourceRelativePath: PathLinux;
    destinationRelativePath: PathLinux;
    importSpecifiers?: ImportSpecifier[];
    isCustomResolveUsed?: boolean;
    importSource?: string;
};
export default class Dependency {
    id: BitId;
    relativePaths: RelativePath[];
    constructor(id: BitId, relativePaths: RelativePath[]);
    static stripOriginallySharedDir(dependency: Dependency, manipulateDirData: ManipulateDirItem[], originallySharedDir: string): void;
    static addWrapDir(dependency: Dependency, manipulateDirData: ManipulateDirItem[], componentWrapDir: PathLinux): void;
    static getClone(dependency: Dependency): Record<string, any>;
}
