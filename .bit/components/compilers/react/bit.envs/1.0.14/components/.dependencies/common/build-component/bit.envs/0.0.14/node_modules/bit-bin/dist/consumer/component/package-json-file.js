"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _bluebird() {
  const data = require("bluebird");

  _bluebird = function () {
    return data;
  };

  return data;
}

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));

  _fsExtra = function () {
    return data;
  };

  return data;
}

function path() {
  const data = _interopRequireWildcard(require("path"));

  path = function () {
    return data;
  };

  return data;
}

function _ramda() {
  const data = _interopRequireDefault(require("ramda"));

  _ramda = function () {
    return data;
  };

  return data;
}

function _detectIndent() {
  const data = _interopRequireDefault(require("detect-indent"));

  _detectIndent = function () {
    return data;
  };

  return data;
}

function _detectNewline() {
  const data = _interopRequireDefault(require("detect-newline"));

  _detectNewline = function () {
    return data;
  };

  return data;
}

function _stringifyPackage() {
  const data = _interopRequireDefault(require("stringify-package"));

  _stringifyPackage = function () {
    return data;
  };

  return data;
}

function _constants() {
  const data = require("../../constants");

  _constants = function () {
    return data;
  };

  return data;
}

function _logger() {
  const data = _interopRequireDefault(require("../../logger/logger"));

  _logger = function () {
    return data;
  };

  return data;
}

function _componentIdToPackageName() {
  const data = _interopRequireDefault(require("../../utils/bit/component-id-to-package-name"));

  _componentIdToPackageName = function () {
    return data;
  };

  return data;
}

function _packageJsonVinyl() {
  const data = _interopRequireDefault(require("./package-json-vinyl"));

  _packageJsonVinyl = function () {
    return data;
  };

  return data;
}

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * when a package.json file is loaded, we save the indentation and the type of newline it uses, so
 * then we could preserve it later on while writing the file. this is same process used by NPM when
 * writing the package.json file
 */
class PackageJsonFile {
  // default when writing (in stringifyPackage) is "  ". (two spaces).
  // whether "\n" or "\r\n", default when writing (in stringifyPackage) is "\n"
  constructor({
    filePath,
    packageJsonObject = {},
    fileExist,
    workspaceDir,
    indent,
    newline
  }) {
    (0, _defineProperty2().default)(this, "packageJsonObject", void 0);
    (0, _defineProperty2().default)(this, "fileExist", void 0);
    (0, _defineProperty2().default)(this, "filePath", void 0);
    (0, _defineProperty2().default)(this, "workspaceDir", void 0);
    (0, _defineProperty2().default)(this, "indent", void 0);
    (0, _defineProperty2().default)(this, "newline", void 0);
    this.filePath = filePath;
    this.packageJsonObject = packageJsonObject;
    this.fileExist = fileExist;
    this.workspaceDir = workspaceDir;
    this.indent = indent;
    this.newline = newline;
  }

  write() {
    var _this = this;

    return (0, _bluebird().coroutine)(function* () {
      if (!_this.workspaceDir) throw new Error('PackageJsonFile is unable to write, workspaceDir is not defined');
      const pathToWrite = path().join(_this.workspaceDir, _this.filePath);

      _logger().default.debug(`package-json-file.write, path ${pathToWrite}`);

      const packageJsonStr = (0, _stringifyPackage().default)(_this.packageJsonObject, _this.indent, _this.newline);
      yield _fsExtra().default.outputFile(pathToWrite, packageJsonStr);
      _this.fileExist = true;
    })();
  }
  /**
   * load from the given dir, if not exist, don't throw an error, just set packageJsonObject as an
   * empty object
   */
  // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!


  static load(workspaceDir, componentDir = '.') {
    return (0, _bluebird().coroutine)(function* () {
      const filePath = composePath(componentDir);
      const filePathAbsolute = path().join(workspaceDir, filePath);
      const packageJsonStr = yield PackageJsonFile.getPackageJsonStrIfExist(filePathAbsolute);

      if (!packageJsonStr) {
        return new PackageJsonFile({
          filePath,
          fileExist: false,
          workspaceDir
        });
      }

      const packageJsonObject = PackageJsonFile.parsePackageJsonStr(packageJsonStr, componentDir);
      const indent = (0, _detectIndent().default)(packageJsonStr).indent;
      const newline = (0, _detectNewline().default)(packageJsonStr);
      return new PackageJsonFile({
        filePath,
        packageJsonObject,
        fileExist: true,
        workspaceDir,
        indent,
        newline
      });
    })();
  }

  static createFromComponent(componentDir, component, // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
  excludeRegistryPrefix = false) {
    const filePath = composePath(componentDir);
    const name = excludeRegistryPrefix ? (0, _componentIdToPackageName().default)(component.id, component.bindingPrefix, false) : (0, _componentIdToPackageName().default)(component.id, component.bindingPrefix);
    const packageJsonObject = {
      name,
      version: component.version,
      homepage: component._getHomepage(),
      main: component.mainFile,
      dependencies: _objectSpread({}, component.packageDependencies, {}, component.compilerPackageDependencies.dependencies, {}, component.testerPackageDependencies.dependencies),
      devDependencies: _objectSpread({}, component.devPackageDependencies, {}, component.compilerPackageDependencies.devDependencies, {}, component.testerPackageDependencies.devDependencies),
      peerDependencies: _objectSpread({}, component.peerPackageDependencies, {}, component.compilerPackageDependencies.peerDependencies, {}, component.testerPackageDependencies.peerDependencies),
      license: `SEE LICENSE IN ${!_ramda().default.isEmpty(component.license) ? 'LICENSE' : 'UNLICENSED'}`
    };
    return new PackageJsonFile({
      filePath,
      packageJsonObject,
      fileExist: false
    });
  }

  toVinylFile() {
    return _packageJsonVinyl().default.load({
      base: path().dirname(this.filePath),
      path: this.filePath,
      content: this.packageJsonObject,
      indent: this.indent,
      newline: this.newline
    });
  }

  addDependencies(dependencies) {
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    this.packageJsonObject.dependencies = Object.assign({}, this.packageJsonObject.dependencies, dependencies);
  }

  addDevDependencies(dependencies) {
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    this.packageJsonObject.devDependencies = Object.assign({}, this.packageJsonObject.devDependencies, dependencies);
  }

  replaceDependencies(dependencies) {
    Object.keys(dependencies).forEach(dependency => {
      _constants().DEPENDENCIES_FIELDS.forEach(dependencyField => {
        if (this.packageJsonObject[dependencyField] && this.packageJsonObject[dependencyField][dependency]) {
          this.packageJsonObject[dependencyField][dependency] = dependencies[dependency];
        }
      });
    });
  }

  addOrUpdateProperty(propertyName, propertyValue) {
    this.packageJsonObject[propertyName] = propertyValue;
  }

  getProperty(propertyName) {
    return this.packageJsonObject[propertyName];
  }

  mergePackageJsonObject(packageJsonObject) {
    if (!packageJsonObject || _ramda().default.isEmpty(packageJsonObject)) return;
    this.packageJsonObject = Object.assign(this.packageJsonObject, packageJsonObject);
  }

  clone() {
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    const clone = new PackageJsonFile(this);
    clone.packageJsonObject = _ramda().default.clone(this.packageJsonObject);
    return clone;
  }

  static propsNonUserChangeable() {
    return ['name', 'version', 'main', 'dependencies', 'devDependencies', 'peerDependencies', 'license', 'bit'];
  }

  static parsePackageJsonStr(str, dir) {
    try {
      return JSON.parse(str);
    } catch (err) {
      throw new Error(`failed parsing package.json file at ${dir}. original error: ${err.message}`);
    }
  }

  static getPackageJsonStrIfExist(filePath) {
    return (0, _bluebird().coroutine)(function* () {
      try {
        return yield _fsExtra().default.readFile(filePath, 'utf-8');
      } catch (err) {
        if (err.code === 'ENOENT') {
          return null; // file not found
        }

        throw err;
      }
    })();
  }

}

exports.default = PackageJsonFile;

function composePath(componentRootFolder) {
  return path().join(componentRootFolder, _constants().PACKAGE_JSON);
}