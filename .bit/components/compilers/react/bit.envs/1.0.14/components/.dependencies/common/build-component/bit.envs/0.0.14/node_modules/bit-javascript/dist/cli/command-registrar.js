"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _chalk() {
  const data = _interopRequireDefault(require("chalk"));

  _chalk = function () {
    return data;
  };

  return data;
}

function _commander() {
  const data = _interopRequireDefault(require("commander"));

  _commander = function () {
    return data;
  };

  return data;
}

function _package() {
  const data = _interopRequireDefault(require("../../package.json"));

  _package = function () {
    return data;
  };

  return data;
}

function _loader() {
  const data = _interopRequireDefault(require("./loader"));

  _loader = function () {
    return data;
  };

  return data;
}

function _commandList() {
  const data = _interopRequireDefault(require("./commands/command-list"));

  _commandList = function () {
    return data;
  };

  return data;
}

// @flow
function bitError(message) {
  return _chalk().default.red(`${message.split('\n') // eslint-disable-line
  .map(m => `bitjs ERR! ${m}`).join('\n')}\n`);
}

function errorHandler(e) {
  _loader().default.off();

  process.stderr.write(bitError(e.message));

  if (e.code) {
    process.stderr.write(bitError(`\ncode: ${e.code}\n`));
  }

  process.stderr.write(bitError(e.stack));
  process.exit(1);
}

function logAndExit(str) {
  _loader().default.off();

  if (str) {
    console.log(str); // eslint-disable-line
  }

  process.exit(0);
}

function start() {
  _commander().default.version(_package().default.version).description('bit driver for javascript');

  _commandList().default.forEach(c => {
    // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
    const currentCommand = _commander().default.command(c.name).description(c.description);

    if (c.options && Array.isArray(c.options)) {
      c.options.forEach(option => currentCommand.option(`${option.alias} ${option.name}`, option.description));
    }

    currentCommand.action((args, options) => {
      if (c.loader === true) _loader().default.on(); // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!

      _loader().default.start(c.loaderText || `performing ${c.name} command`);

      c.action(args, options).then(c.report).then(logAndExit) // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!
      .catch(c.handleError || errorHandler);
    });
  });

  _commander().default.parse(process.argv);
}

var _default = start;
exports.default = _default;