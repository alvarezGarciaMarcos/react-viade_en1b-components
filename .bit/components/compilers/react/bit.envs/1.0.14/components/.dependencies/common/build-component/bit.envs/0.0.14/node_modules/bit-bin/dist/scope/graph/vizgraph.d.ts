import { Digraph } from 'graphviz';
import { Graph } from 'graphlib';
import BitId from '../../bit-id/bit-id';
declare type ConfigProps = {
    layout?: string;
    fontName?: string;
    fontSize?: string;
    backgroundColor?: string;
    nodeColor?: string;
    noDependencyColor?: string;
    edgeColor?: string;
    graphVizOptions?: Record<string, any>;
    graphVizPath?: string;
    highlightColor?: string;
};
export default class VisualDependencyGraph {
    graphlib: Graph;
    graph: Digraph;
    config: ConfigProps;
    constructor(graphlib: Graph, graph: Digraph, config: ConfigProps);
    static loadFromGraphlib(graphlib: Graph, config?: ConfigProps): Promise<VisualDependencyGraph>;
    static buildDependenciesGraph(graphlib: Graph, config: ConfigProps): Digraph;
    getNode(id: BitId): any;
    highlightId(id: BitId): void;
    image(imagePath: string): Promise<string>;
    dot(): any;
}
export {};
