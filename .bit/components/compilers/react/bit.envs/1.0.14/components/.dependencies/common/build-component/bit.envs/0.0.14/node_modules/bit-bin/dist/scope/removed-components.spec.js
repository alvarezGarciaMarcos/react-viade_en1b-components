"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _chai() {
  const data = require("chai");

  _chai = function () {
    return data;
  };

  return data;
}

function _removedComponents() {
  const data = _interopRequireDefault(require("./removed-components"));

  _removedComponents = function () {
    return data;
  };

  return data;
}

function _bitId() {
  const data = require("../bit-id");

  _bitId = function () {
    return data;
  };

  return data;
}

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

describe('RemovedComponents', () => {
  const payload = {
    removedComponentIds: [],
    missingComponents: [],
    removedDependencies: [],
    dependentBits: {}
  };
  describe('fromObjects', () => {
    describe('with dependentBits', () => {
      let removeComponents;
      before(() => {
        const payloadWithDependents = _objectSpread({}, payload);

        payloadWithDependents.dependentBits = {
          'sc/utils/is-type': [{
            scope: 'sc',
            box: null,
            name: 'bar/foo',
            version: null
          }, {
            scope: 'sc',
            box: null,
            name: 'utils/is-string',
            version: null
          }]
        };
        removeComponents = _removedComponents().default.fromObjects(payloadWithDependents);
      });
      it('should return an instance of RemovedObjects', () => {
        (0, _chai().expect)(removeComponents).to.be.instanceOf(_removedComponents().default);
      });
      it('dependentBits values should be BitIds', () => {
        (0, _chai().expect)(removeComponents.dependentBits).to.be.an('object');
        Object.keys(removeComponents.dependentBits).forEach(dependent => {
          (0, _chai().expect)(removeComponents.dependentBits[dependent]).to.be.instanceOf(_bitId().BitIds);
        });
      });
      it('each BitIds should have BitId objects', () => {
        Object.keys(removeComponents.dependentBits).forEach(dependent => {
          removeComponents.dependentBits[dependent].forEach(b => (0, _chai().expect)(b).to.be.instanceOf(_bitId().BitId));
        });
      });
    });
  });
});