import { BitObject } from '../objects';
import ComponentObjects from '../component-objects';
import Scope from '../scope';
import { ModelComponent, Version, Symlink } from '../models';
import { BitId, BitIds } from '../../bit-id';
import { ComponentProps } from '../models/model-component';
import ConsumerComponent from '../../consumer/component';
import Repository from '../objects/repository';
import Consumer from '../../consumer/consumer';
export declare type ComponentTree = {
    component: ModelComponent;
    objects: BitObject[];
};
export declare type ComponentDef = {
    id: BitId;
    component: ModelComponent | null | undefined;
};
export default class SourceRepository {
    scope: Scope;
    constructor(scope: Scope);
    objects(): Repository;
    getMany(ids: BitId[] | BitIds): Promise<ComponentDef[]>;
    get(bitId: BitId): Promise<ModelComponent | null | undefined>;
    _findComponent(component: ModelComponent): Promise<ModelComponent | null | undefined>;
    _findComponentBySymlink(symlink: Symlink): Promise<ModelComponent | null | undefined>;
    getObjects(id: BitId): Promise<ComponentObjects>;
    findOrAddComponent(props: ComponentProps): Promise<ModelComponent>;
    modifyCIProps({ source, ciProps }: {
        source: ConsumerComponent;
        ciProps: Record<string, any>;
    }): Promise<any>;
    modifySpecsResults({ source, specsResults }: {
        source: ConsumerComponent;
        specsResults?: any;
    }): Promise<any>;
    updateDist({ source }: {
        source: ConsumerComponent;
    }): Promise<any>;
    consumerComponentToVersion({ consumerComponent, consumer, message, flattenedDependencies, flattenedDevDependencies, flattenedCompilerDependencies, flattenedTesterDependencies, specsResults }: {
        readonly consumerComponent: ConsumerComponent;
        consumer: Consumer;
        message?: string;
        flattenedDependencies?: Record<string, any>;
        flattenedDevDependencies?: Record<string, any>;
        flattenedCompilerDependencies?: Record<string, any>;
        flattenedTesterDependencies?: Record<string, any>;
        force?: boolean;
        verbose?: boolean;
        specsResults?: any;
    }): Promise<{
        version: Version;
        files: any;
        dists: any;
        compilerFiles: any;
        testerFiles: any;
    }>;
    addSource({ source, consumer, flattenedDependencies, flattenedDevDependencies, flattenedCompilerDependencies, flattenedTesterDependencies, message, specsResults }: {
        source: ConsumerComponent;
        consumer: Consumer;
        flattenedDependencies: BitIds;
        flattenedDevDependencies: BitIds;
        flattenedCompilerDependencies: BitIds;
        flattenedTesterDependencies: BitIds;
        message: string;
        specsResults?: any;
    }): Promise<ModelComponent>;
    putAdditionalVersion(component: ModelComponent, version: Version, message: string, versionToAdd: string): Promise<ModelComponent>;
    put({ component, objects }: ComponentTree): ModelComponent;
    removeComponentVersions(component: ModelComponent, versions: string[]): void;
    removeComponentById(bitId: BitId): Promise<void>;
    removeComponent(component: ModelComponent): void;
    mergeTwoComponentsObjects(existingComponent: ModelComponent, incomingComponent: ModelComponent): {
        mergedComponent: ModelComponent;
        mergedVersions: string[];
    };
    merge({ component, objects }: ComponentTree, inScope?: boolean, local?: boolean): Promise<{
        mergedComponent: ModelComponent;
        mergedVersions: string[];
    }>;
}
