declare type PackageManagerResults = {
    stdout: string;
    stderr: string;
};
declare type installArgs = {
    modules?: string[] | {
        [key: string]: number | string;
    };
    packageManager: 'npm' | 'yarn';
    packageManagerArgs: string[];
    packageManagerProcessOptions: Record<string, any>;
    useWorkspaces: boolean;
    dirs: string[];
    rootDir: string | null | undefined;
    installRootPackageJson: boolean;
    installPeerDependencies: boolean;
    verbose: boolean;
};
declare function getPeerDepsFromNpmList(npmList: string, packageManager: string): Promise<Record<string, any>>;
declare function getNpmVersion(): Promise<string | null | undefined>;
declare function getYarnVersion(): Promise<string | null | undefined>;
declare function isSupportedInstallationOfSubDirFromRoot(packageManager: string): Promise<boolean>;
declare function getPackageLatestVersion(packageName: string): Promise<string | null | undefined>;
declare const _default: {
    install: ({ modules, packageManager, packageManagerArgs, packageManagerProcessOptions, useWorkspaces, dirs, rootDir, installRootPackageJson, installPeerDependencies, verbose }: installArgs) => Promise<PackageManagerResults | PackageManagerResults[]>;
    printResults: ({ stdout, stderr }: {
        stdout: string;
        stderr: string;
    }) => void;
    isSupportedInstallationOfSubDirFromRoot: typeof isSupportedInstallationOfSubDirFromRoot;
    getNpmVersion: typeof getNpmVersion;
    getYarnVersion: typeof getYarnVersion;
    getPeerDepsFromNpmList: typeof getPeerDepsFromNpmList;
    getPackageLatestVersion: typeof getPackageLatestVersion;
};
export default _default;
