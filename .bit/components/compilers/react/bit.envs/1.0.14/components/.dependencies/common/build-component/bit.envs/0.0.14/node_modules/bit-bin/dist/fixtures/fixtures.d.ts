export declare const isType = "module.exports = function isType() { return 'got is-type'; };";
export declare const isTypeV2 = "module.exports = function isType() { return 'got is-type v2'; };";
export declare const isTypeV3 = "module.exports = function isType() { return 'got is-type v3'; };";
export declare const isTypeSpec: (testShouldPass: any) => string;
export declare const isTypeES6 = "export default function isType() { return 'got is-type'; };";
export declare const isTypeLeftPad = "\nconst leftPad = require('left-pad');\nmodule.exports = function isType() { return leftPad('got is-type', 15, 0); };\n";
export declare const isTypeTS = "export default function isType() { return 'got is-type'; };";
export declare const isString = "const isType = require('./is-type.js'); module.exports = function isString() { return isType() +  ' and got is-string'; };";
export declare const isStringV2 = "const isType = require('./is-type.js'); module.exports = function isString() { return isType() +  ' and got is-string v2'; };";
export declare const isStringV3 = "const isType = require('./is-type.js'); module.exports = function isString() { return isType() +  ' and got is-string v3'; };";
export declare const isStringSpec: (testShouldPass: any) => string;
export declare const isStringES6 = "import isType from './is-type.js'; export default function isString() { return isType() +  ' and got is-string'; };";
export declare const isStringTS = "import isType from './is-type'; export default function isString() { return isType() +  ' and got is-string'; };";
export declare const isStringModulePath: (remoteScope: any) => string;
export declare const barFooFixture = "const isString = require('../utils/is-string.js'); module.exports = function foo() { return isString() + ' and got foo'; };";
export declare const barFooFixtureV2 = "const isString = require('../utils/is-string.js'); module.exports = function foo() { return isString() + ' and got foo v2'; };";
export declare const barFooES6 = "import isString from '../utils/is-string.js'; export default function foo() { return isString() + ' and got foo'; };";
export declare const barFooTS = "import isString from '../utils/is-string'; export default function foo() { return isString() + ' and got foo'; };";
export declare const barFooSpecES6: (testShouldPass: any) => string;
export declare const barFooModulePath: (remoteScope: any) => string;
export declare const appPrintIsType = "const isType = require('./components/utils/is-type'); console.log(isType());";
export declare const appPrintIsTypeCapsule = "const isType = require('.'); console.log(isType());";
export declare const appPrintIsString = "const isString = require('./components/utils/is-string'); console.log(isString());";
export declare const appPrintIsStringCapsule = "const isString = require('.'); console.log(isString());";
export declare const appPrintBarFoo = "const barFoo = require('./components/bar/foo'); console.log(barFoo());";
export declare const appPrintBarFooCapsule = "const barFoo = require('.'); console.log(barFoo());";
export declare const appPrintBarFooES6 = "const barFoo = require('./components/bar/foo'); console.log(barFoo.default());";
export declare const appPrintBarFooAuthor = "const barFoo = require('./bar/foo'); console.log(barFoo());";
export declare const objectRestSpread = "const g = 5;\nconst x = {a: \"a\", b: \"b\"}\nconst y = {c: \"c\"}\nconst z = {...x, ...y}";
export declare const objectRestSpreadWithChange = "const g = 5;\nconst x = {a: \"a\", b: \"c\"}\nconst y = {c: \"c\"}\nconst z = {...x, ...y}";
export declare const passTest = "const expect = require('chai').expect\ndescribe('group of passed tests', () => {\n  it('passed test case', () => {\n    expect(true).to.be.true;\n  });\n});";
export declare const failTest = "const expect = require('chai').expect\ndescribe('group of failed tests', () => {\n  it('failed test case', () => {\n    expect(true).to.be.false;\n  });\n});";
export declare const exceptionTest = "const expect = require('chai').expect\ndescribe('group of failed tests', () => {\n  throw new Error('exception during test file');\n  it('failed test case', () => {\n    expect(true).to.be.false;\n  });\n});";
export declare const fooFixture = "module.exports = function foo() { return 'got foo'; }";
export declare const fooFixtureV2 = "module.exports = function foo() { return 'got foo v2'; }";
