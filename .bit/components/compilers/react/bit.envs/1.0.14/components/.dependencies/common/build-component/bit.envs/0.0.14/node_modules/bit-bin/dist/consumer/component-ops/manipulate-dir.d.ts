import BitMap from '../bit-map/bit-map';
import { BitId } from '../../bit-id';
import { PathLinux, PathOsBased } from '../../utils/path';
import VersionDependencies from '../../scope/version-dependencies';
import ComponentVersion from '../../scope/component-version';
import Consumer from '../consumer';
import Repository from '../../scope/objects/repository';
import Component from '../component/consumer-component';
import { ComponentWithDependencies } from '../../scope';
export declare type ManipulateDirItem = {
    id: BitId;
    originallySharedDir: PathLinux | null | undefined;
    wrapDir: PathLinux | null | undefined;
};
export declare function getManipulateDirForExistingComponents(consumer: Consumer, componentVersion: ComponentVersion): Promise<ManipulateDirItem[]>;
export declare function getManipulateDirWhenImportingComponents(bitMap: BitMap, versionsDependencies: VersionDependencies[], repository: Repository): Promise<ManipulateDirItem[]>;
export declare function getManipulateDirForConsumerComponent(component: Component): ManipulateDirItem;
export declare function getManipulateDirForComponentWithDependencies(componentWithDependencies: ComponentWithDependencies): ManipulateDirItem[];
export declare function revertDirManipulationForPath(pathStr: PathOsBased, originallySharedDir: PathLinux | null | undefined, wrapDir: PathLinux | null | undefined): PathLinux;
export declare function stripSharedDirFromPath(pathStr: PathOsBased, sharedDir: PathLinux | null | undefined): PathOsBased;
