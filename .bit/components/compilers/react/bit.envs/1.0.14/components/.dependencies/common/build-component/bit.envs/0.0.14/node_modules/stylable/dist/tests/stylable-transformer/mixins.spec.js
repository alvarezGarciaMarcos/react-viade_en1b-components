"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable:max-line-length */
var chai_1 = require("chai");
var generate_test_util_1 = require("../utils/generate-test-util");
function matchRuleAndDeclaration(parent, selectorIndex, selector, decl, msg) {
    var rule = parent.nodes[selectorIndex];
    chai_1.expect(rule.selector, (msg ? msg + ' ' : '') + "selector " + selectorIndex).to.equal(selector);
    chai_1.expect(rule.nodes.map(function (x) { return x.toString(); }).join(';'), (msg ? msg + ' ' : '') + "selector " + selectorIndex + " first declaration").to.equal(decl);
}
function matchAllRulesAndDeclarations(parent, all, msg, offset) {
    if (offset === void 0) { offset = 0; }
    all.forEach(function (_, i) { return matchRuleAndDeclaration(parent, i + offset, _[0], _[1], msg); });
}
describe('Mixins', function () {
    describe('from js', function () {
        it('simple mixin', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/style.st.css",
                files: {
                    '/style.st.css': {
                        content: "\n                        :import {\n                            -st-from: \"./mixin\";\n                            -st-default: mixin;\n                        }\n                        .container {\n                            background: green;\n                            -st-mixin: mixin;\n                            border: 0;\n                        }\n                    "
                    },
                    '/mixin.js': {
                        content: "\n                        module.exports = function() {\n                            return {\n                                color: \"red\"\n                            }\n                        }\n                    "
                    }
                }
            });
            var rule = result.nodes[0];
            chai_1.expect(rule.nodes[1].toString()).to.equal('color: red');
        });
        it('simple mixin and remove all -st-mixins', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/style.st.css",
                files: {
                    '/style.st.css': {
                        content: "\n                        :import {\n                            -st-from: \"./mixin\";\n                            -st-default: mixin;\n                        }\n                        .container {\n                            -st-mixin: mixin;\n                            -st-mixin: mixin;\n                            -st-mixin: mixin;\n                        }\n                    "
                    },
                    '/mixin.js': {
                        content: "\n                        module.exports = function() {\n                            return {\n                                color: \"red\"\n                            }\n                        }\n                    "
                    }
                }
            });
            var rule = result.nodes[0];
            chai_1.expect(rule.nodes[0].toString()).to.equal('color: red');
        });
        it('complex mixin', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                        :import {\n                            -st-from: \"./mixin\";\n                            -st-default: mixin;\n                        }\n                        .container {\n                            -st-mixin: mixin;\n                            -st-mixin: mixin;\n                            -st-mixin: mixin;\n                        }\n                        .containerB {\n                            color: blue;\n                        }\n                    "
                    },
                    '/mixin.js': {
                        content: "\n                        module.exports = function() {\n                            return {\n                                color: \"red\",\n                                \".my-selector\": {\n                                    color: \"green\",\n                                    \"&:hover\": {\n                                        background: \"yellow\"\n                                    }\n                                },\n                                \"&:hover\": {\n                                    color: \"gold\"\n                                }\n                            }\n                        }\n                    "
                    }
                }
            });
            var rule = result.nodes[0];
            chai_1.expect(rule.selector, 'rule 1 selector').to.equal('.entry--container');
            chai_1.expect(rule.nodes[0].toString(), 'rule 1 decl').to.equal('color: red');
            var rule2 = result.nodes[1];
            chai_1.expect(rule2.selector, 'rule 2 selector').to.equal('.entry--container .entry--my-selector');
            chai_1.expect(rule2.nodes[0].toString(), 'rule 2 decl').to.equal('color: green');
            var rule3 = result.nodes[2];
            chai_1.expect(rule3.selector, 'rule 3 selector').to.equal('.entry--container .entry--my-selector:hover');
            chai_1.expect(rule3.nodes[0].toString(), 'rule 3 decl').to.equal('background: yellow');
            var rule4 = result.nodes[3];
            chai_1.expect(rule4.selector, 'rule 4 selector').to.equal('.entry--container:hover');
            chai_1.expect(rule4.nodes[0].toString(), 'rule 4 decl').to.equal('color: gold');
        });
        it('mixin on multiple selectors', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                        :import {\n                            -st-from: \"./mixin\";\n                            -st-default: mixin;\n                        }\n                        .containerA, .containerB {\n                            -st-mixin: mixin;\n\n                        }\n                    "
                    },
                    '/mixin.js': {
                        content: "\n                        module.exports = function() {\n                            return {\n                                color: \"red\",\n                                \"&:hover\": {\n                                    color: \"green\"\n                                }\n                            }\n                        }\n                    "
                    }
                }
            });
            matchRuleAndDeclaration(result, 0, '.entry--containerA, .entry--containerB', 'color: red');
            matchRuleAndDeclaration(result, 1, '.entry--containerA:hover, .entry--containerB:hover', 'color: green');
        });
        it('mixin with multiple selectors', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                        :import {\n                            -st-from: \"./mixin\";\n                            -st-default: mixin;\n                        }\n                        .containerA {\n                            -st-mixin: mixin;\n                        }\n                    "
                    },
                    '/mixin.js': {
                        content: "\n                        module.exports = function() {\n                            return {\n                                \"&:hover, .class\": {\n                                    color: \"green\"\n                                }\n                            }\n                        }\n                    "
                    }
                }
            });
            matchRuleAndDeclaration(result, 1, '.entry--containerA:hover, .entry--containerA .entry--class', 'color: green');
        });
        it('mixin with multiple var values', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                        :import {\n                            -st-from: \"./mixin\";\n                            -st-default: mixin;\n                        }\n                        :vars {\n                            color1: red;\n                            color2: blue;\n                        }\n                        .container {\n                            -st-mixin: mixin(value(color1), value(color2));\n                        }\n                    "
                    },
                    '/mixin.js': {
                        content: "\n                        module.exports = function(options) {\n                            return {\n                                color: options[0],\n                                background: options[1]\n                            }\n                        }\n                    "
                    }
                }
            });
            matchRuleAndDeclaration(result, 0, '.entry--container', 'color: red;background: blue');
        });
        it('should not root scope js mixins', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/entry.st.css",
                scopeRoot: true,
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                        :import{\n                            -st-from:'./mixin.js';\n                            -st-named: mixStuff;\n                        }\n                        .gaga{\n                            color:red;\n                            -st-mixin: mixStuff;\n                        }\n                    "
                    },
                    '/mixin.js': {
                        content: "\n                        module.exports = {\n                            mixStuff:function(){\n                                return {\n                                    \"background\":\"green\",\n                                    \".child\":{\n                                        \"color\": \"yellow\"\n                                    }\n                                }\n                            }\n                        };\n                    "
                    }
                }
            });
            matchRuleAndDeclaration(result, 0, '.entry--root .entry--gaga', 'color:red;background:green');
            matchRuleAndDeclaration(result, 1, '.entry--root .entry--gaga .entry--child', 'color:yellow');
        });
        it('multiple mixins', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                        :import {\n                            -st-from: \"./mixin1\";\n                            -st-default: mixin1;\n                        }\n                        :import {\n                            -st-from: \"./mixin2\";\n                            -st-default: mixin2;\n                        }\n                        .container {\n                            -st-mixin: mixin1(red) mixin2(blue);\n                        }\n                    "
                    },
                    '/mixin1.js': {
                        content: "\n                        module.exports = function(options) {\n                            return {\n                                color: options[0]\n                            }\n                        }\n                    "
                    },
                    '/mixin2.js': {
                        content: "\n                        module.exports = function(options) {\n                            return {\n                                background: options[0]\n                            }\n                        }\n                    "
                    }
                }
            });
            matchRuleAndDeclaration(result, 0, '.entry--container', 'color: red;background: blue');
        });
        it('multiple same mixin', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                        :import {\n                            -st-from: \"./mixin1\";\n                            -st-default: mixin1;\n                        }\n                        .container-a {\n                            -st-mixin: mixin1(red);\n                        }\n                        .container-b {\n                            -st-mixin: mixin1(blue);\n                        }\n                    "
                    },
                    '/mixin1.js': {
                        content: "\n                        module.exports = function(options) {\n                            return {\n                                color: options[0]\n                            }\n                        }\n                    "
                    }
                }
            });
            matchRuleAndDeclaration(result, 0, '.entry--container-a', 'color: red');
            matchRuleAndDeclaration(result, 1, '.entry--container-b', 'color: blue');
        });
    });
    describe('from css', function () {
        it('apply simple class mixins declarations', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                    .my-mixin {\n                        color: red;\n                    }\n                    .container {\n                        -st-mixin: my-mixin;\n                    }\n                "
                    }
                }
            });
            matchRuleAndDeclaration(result, 1, '.entry--container', 'color: red');
        });
        it.skip('mixin with multiple rules in keyframes', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                            .x {\n                                color: red;\n                            }\n                            .x:hover {\n                                color: green;\n                            }\n\n                            @keyframes my-name {\n\n                                0% {\n                                    -st-mixin: x;\n                                }\n                                100% {\n\n                                }\n\n                            }\n                        "
                    }
                }
            });
            throw new Error('Test me');
        });
        it('apply simple class mixin that uses mixin itself', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                    .x {\n                        color: red;\n                    }\n                    .y {\n                        -st-mixin: x;\n                    }\n                    .container {\n                        -st-mixin: y;\n                    }\n                "
                    }
                }
            });
            matchRuleAndDeclaration(result, 2, '.entry--container', 'color: red');
        });
        it('apply simple class mixin with circular refs to the same selector', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                    .x {\n                        color: red;\n                        -st-mixin: y;\n                    }\n                    .y {\n                        -st-mixin: x;\n                    }\n                "
                    }
                }
            });
            matchRuleAndDeclaration(result, 0, '.entry--x', 'color: red;color: red');
            matchRuleAndDeclaration(result, 1, '.entry--y', 'color: red');
        });
        it('apply simple class mixin with circular refs from multiple files', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                            :import {\n                                -st-from: \"./style1.st.css\";\n                                -st-named: y;\n                            }\n                            .x {\n                                color: red;\n                                -st-mixin: y;\n                            }\n                        "
                    },
                    '/style1.st.css': {
                        namespace: 'entry',
                        content: "\n                            :import {\n                                -st-from: \"./entry.st.css\";\n                                -st-named: x;\n                            }\n                            .y {\n                                -st-mixin: x;\n                            }\n                        "
                    }
                }
            });
            matchRuleAndDeclaration(result, 0, '.entry--x', 'color: red;color: red');
        });
        it('append complex selector that starts with the mixin name', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n\n                    .my-mixin:hover {\n                        color: blue;\n                    }\n                    .my-mixin .my-other-class {\n                        color: green;\n                    }\n                    .container {\n                        -st-mixin: my-mixin;\n                    }\n                "
                    }
                }
            });
            matchRuleAndDeclaration(result, 3, '.entry--container:hover', 'color: blue');
            matchRuleAndDeclaration(result, 4, '.entry--container .entry--my-other-class', 'color: green');
        });
        it('apply class mixins from import', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                    :import {\n                        -st-from: \"./imported.st.css\";\n                        -st-named: my-mixin;\n                    }\n                    .container {\n                        -st-mixin: my-mixin;\n                    }\n                "
                    },
                    '/imported.st.css': {
                        namespace: 'imported',
                        content: "\n                    .my-mixin {\n                        color: red;\n                    }\n                "
                    }
                }
            });
            matchRuleAndDeclaration(result, 0, '.entry--container', 'color: red');
        });
        it('apply mixin from named import (scope classes from mixin origin)', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                    :import {\n                        -st-from: \"./imported.st.css\";\n                        -st-named: my-mixin;\n                    }\n                    .container {\n                        -st-mixin: my-mixin;\n                    }\n                "
                    },
                    '/imported.st.css': {
                        namespace: 'imported',
                        content: "\n                    .my-mixin {\n                        color: red;\n                    }\n                    .my-mixin .local {\n                        color: green;\n                    }\n                "
                    }
                }
            });
            matchRuleAndDeclaration(result, 0, '.entry--container', 'color: red');
            matchRuleAndDeclaration(result, 1, '.entry--container .imported--local', 'color: green');
        });
        it('apply mixin from local class with extends (scope class as root)', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                            :import {\n                                -st-from: \"./base.st.css\";\n                                -st-default: Base;\n                            }\n\n                            .container {\n                                -st-mixin: my-mixin;\n                            }\n\n                            .my-mixin {\n                                -st-extends: Base;\n                                color: red;\n                            }\n                            .my-mixin::part{\n                                color: green;\n                            }\n                        "
                    },
                    '/base.st.css': {
                        namespace: 'base',
                        content: ".part{}"
                    }
                }
            });
            matchRuleAndDeclaration(result, 0, '.entry--container', '-st-extends: Base;color: red');
            matchRuleAndDeclaration(result, 1, '.entry--container .base--part', 'color: green');
        });
        it('apply mixin from named import with extends (scope classes from mixin origin)', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                            :import {\n                                -st-from: \"./imported.st.css\";\n                                -st-named: my-mixin;\n                            }\n                            .container {\n                                -st-mixin: my-mixin;\n                            }\n                        "
                    },
                    '/imported.st.css': {
                        namespace: 'imported',
                        content: "\n                            :import {\n                                -st-from: \"./base.st.css\";\n                                -st-default: Base;\n                            }\n                            .my-mixin {\n                                -st-extends: Base;\n                                color: red;\n                            }\n                            .my-mixin::part{\n                                color: green;\n                            }\n                      "
                    },
                    '/base.st.css': {
                        namespace: 'base',
                        content: ".part{}"
                    }
                }
            });
            matchRuleAndDeclaration(result, 0, '.entry--container', '-st-extends: Base;color: red');
            matchRuleAndDeclaration(result, 1, '.entry--container .base--part', 'color: green');
        });
        it('should apply root mixin on child class (Root mixin mode)', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n\n                            .container {\n                                -st-mixin: root;\n                            }\n\n                            .class {\n\n                            }\n                        "
                    }
                }
            });
            matchRuleAndDeclaration(result, 0, '.entry--container', '');
            matchRuleAndDeclaration(result, 1, '.entry--container .entry--container', '');
            matchRuleAndDeclaration(result, 2, '.entry--container .entry--class', '');
            matchRuleAndDeclaration(result, 3, '.entry--class', '');
        });
        it('apply mixin from named import with extends (scope classes from mixin origin) !! with alias jump', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                            :import {\n                                -st-from: \"./jump.st.css\";\n                                -st-named: my-mixin;\n                            }\n                            .container {\n                                -st-mixin: my-mixin;\n                            }\n                        "
                    },
                    '/jump.st.css': {
                        namespace: 'imported',
                        content: "\n                            :import {\n                                -st-from: \"./imported.st.css\";\n                                -st-named: my-mixin;\n                            }\n                            .my-mixin {}\n                            .my-mixin::part {}\n                      "
                    },
                    '/imported.st.css': {
                        namespace: 'imported',
                        content: "\n                            :import {\n                                -st-from: \"./base.st.css\";\n                                -st-default: Base;\n                            }\n                            .my-mixin {\n                                -st-extends: Base;\n                                color: red;\n                            }\n                            .my-mixin::part{\n                                color: green;\n                            }\n                      "
                    },
                    '/base.st.css': {
                        namespace: 'base',
                        content: ".part{}"
                    }
                }
            });
            matchRuleAndDeclaration(result, 0, '.entry--container', '-st-extends: Base;color: red');
            matchRuleAndDeclaration(result, 1, '.entry--container .base--part', 'color: green');
        });
        it('apply mixin with two root replacements', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                    :import {\n                        -st-from: \"./imported.st.css\";\n                        -st-named: i;\n                    }\n                    .x {\n                        -st-mixin: i;\n                    }\n                "
                    },
                    '/imported.st.css': {
                        namespace: 'imported',
                        content: "\n                            .i .i.y  {\n                                color: yellow;\n                            }\n                        "
                    }
                }
            });
            matchRuleAndDeclaration(result, 1, '.entry--x .entry--x.imported--y', 'color: yellow');
        });
        it('apply complex mixin on complex selector', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                        .i {\n                            color: red;\n                        }\n\n                        .i:hover, .local:hover, .i.local:hover .inner {\n                            color: green;\n                        }\n\n                        .x:hover .y {\n                            -st-mixin: i;\n                        }\n                    "
                    }
                }
            });
            matchAllRulesAndDeclarations(result, [
                ['.entry--x:hover .entry--y', 'color: red'],
                ['.entry--x:hover .entry--y:hover, .entry--x:hover .entry--y.entry--local:hover .entry--inner', 'color: green']
            ], '', 2);
        });
        it('apply mixin with media query', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                    :import {\n                        -st-from: \"./imported.st.css\";\n                        -st-named: i;\n                    }\n                    .x {\n                        -st-mixin: i;\n                    }\n                "
                    },
                    '/imported.st.css': {
                        namespace: 'imported',
                        content: "\n                            .y {background: #000}\n                            .i {color: red;}\n                            @media (max-width: 300px) {\n                                .y {background: #000}\n                                .i {color: yellow;}\n                                .i:hover {color: red;}\n                            }\n                            .i:hover {color: blue;}\n                        "
                    }
                }
            });
            matchRuleAndDeclaration(result, 0, '.entry--x', 'color: red');
            var media = result.nodes[1];
            chai_1.expect(media.params, 'media params').to.equal('(max-width: 300px)');
            matchAllRulesAndDeclarations(media, [
                ['.entry--x', 'color: yellow'],
                ['.entry--x:hover', 'color: red']
            ], '@media');
            matchRuleAndDeclaration(result, 2, '.entry--x:hover', 'color: blue');
        });
        it('apply mixin from root style sheet', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                    :import {\n                        -st-from: \"./imported.st.css\";\n                        -st-default: X;\n                    }\n\n                    .x {\n                        -st-mixin: X;\n                    }\n                "
                    },
                    '/imported.st.css': {
                        namespace: 'imported',
                        content: "\n                        .root {color:red;}\n                        .y {color:green;}\n                        @media (max-width: 100px) {\n                           .root{color:yellow;}\n                           .y{color:gold;}\n                        }\n\n                    "
                    }
                }
            });
            matchRuleAndDeclaration(result, 0, '.entry--x', 'color:red');
            matchRuleAndDeclaration(result, 1, '.entry--x .imported--y', 'color:green');
            var media = result.nodes[2];
            matchRuleAndDeclaration(media, 0, '.entry--x', 'color:yellow', '@media');
            matchRuleAndDeclaration(media, 1, '.entry--x .imported--y', 'color:gold', '@media');
        });
        it('apply mixin when rootScoping enabled', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/entry.st.css",
                scopeRoot: true,
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                            :import {\n                                -st-from: \"./look1.st.css\";\n                                -st-default: Look1;\n                            }\n                            .root {\n                                -st-mixin: Look1(c1 yellow);\n                            }\n                        "
                    },
                    '/look1.st.css': {
                        namespace: 'look1',
                        content: "\n                            :import {\n                                -st-from: \"./base.st.css\";\n                                -st-default: Base;\n                            }\n                            :vars {\n                                c1: red;\n                            }\n                            .root {\n                                -st-extends:Base;\n                                color:value(c1);\n                            }\n                            .panel {\n                                color:gold;\n                            }\n                            .root::label {\n                                color:green;\n                            }\n                        "
                    },
                    '/base.st.css': {
                        namespace: 'base',
                        content: "\n                            .root {}\n                            .label {}\n                        "
                    }
                }
            });
            matchRuleAndDeclaration(result, 0, '.entry--root', '-st-extends:Base;color:yellow');
            matchRuleAndDeclaration(result, 1, '.entry--root .look1--panel', 'color:gold');
            matchRuleAndDeclaration(result, 2, '.entry--root .base--label', 'color:green');
        });
        it('apply mixin from imported element', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                            :import {\n                                -st-from: \"./imported.st.css\";\n                                -st-named: X;\n                            }\n\n                            .x {\n                                -st-mixin: X;\n                            }\n                        "
                    },
                    '/imported.st.css': {
                        namespace: 'imported',
                        content: "\n                            X {color:green;}\n                        "
                    }
                }
            });
            matchRuleAndDeclaration(result, 0, '.entry--x', 'color:green');
        });
        it('apply nested mixins', function () {
            var result = generate_test_util_1.generateStylableRoot({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                        :import {\n                            -st-from: \"./r.st.css\";\n                            -st-default: R;\n                        }\n                        .x {\n                            -st-mixin: R;\n                        }\n                    "
                    },
                    '/r.st.css': {
                        namespace: 'r',
                        content: "\n                        :import {\n                            -st-from: \"./y.st.css\";\n                            -st-default: Y;\n                        }\n                        .r{\n                            -st-mixin: Y;\n                        }\n                    "
                    },
                    '/y.st.css': {
                        namespace: 'y',
                        content: "\n                        .y {\n\n                        }\n                    "
                    }
                }
            });
            matchAllRulesAndDeclarations(result, [
                ['.entry--x', ''],
                ['.entry--x .r--r', ''],
                ['.entry--x .r--r .y--y', '']
            ], '');
        });
        describe('Mixins with named parameters', function () {
            it('apply mixin with :vars override (local scope)', function () {
                var result = generate_test_util_1.generateStylableRoot({
                    entry: "/entry.st.css",
                    files: {
                        '/entry.st.css': {
                            namespace: 'entry',
                            content: "\n                                :vars {\n                                    color1: red;\n                                }\n\n                                .x {\n                                    -st-mixin: y(color1 green);\n                                }\n\n                                .y {color:value(color1);}\n\n                            "
                        }
                    }
                });
                matchRuleAndDeclaration(result, 0, '.entry--x', 'color:green');
            });
            it('apply mixin with :vars override with space in value', function () {
                var result = generate_test_util_1.generateStylableRoot({
                    entry: "/entry.st.css",
                    files: {
                        '/entry.st.css': {
                            namespace: 'entry',
                            content: "\n                                :vars {\n                                    border1: red;\n                                }\n\n                                .x {\n                                    -st-mixin: y(border1 1px solid red);\n                                }\n\n                                .y {border:value(border1);}\n\n                            "
                        }
                    }
                });
                matchRuleAndDeclaration(result, 0, '.entry--x', 'border:1px solid red');
            });
            it('apply mixin with :vars override', function () {
                var result = generate_test_util_1.generateStylableRoot({
                    entry: "/entry.st.css",
                    files: {
                        '/entry.st.css': {
                            namespace: 'entry',
                            content: "\n                                :import {\n                                    -st-from: \"./imported.st.css\";\n                                    -st-named: y;\n                                }\n\n                                .x {\n                                    -st-mixin: y(color1 green);\n                                }\n                            "
                        },
                        '/imported.st.css': {
                            namespace: 'imported',
                            content: "\n                            :vars {\n                                color1: red;\n                            }\n                            .y {color:value(color1);}\n                        "
                        }
                    }
                });
                matchRuleAndDeclaration(result, 0, '.entry--x', 'color:green');
            });
            it('apply mixin with :vars multiple override', function () {
                var result = generate_test_util_1.generateStylableRoot({
                    entry: "/entry.st.css",
                    files: {
                        '/entry.st.css': {
                            namespace: 'entry',
                            content: "\n                                .x {\n                                    -st-mixin: y(color1 green, color2 yellow);\n                                }\n\n                                .y {\n                                    color:value(color1);\n                                    background:value(color2);\n                                }\n                            "
                        }
                    }
                });
                matchRuleAndDeclaration(result, 0, '.entry--x', 'color:green;background:yellow');
            });
            it('apply mixin with :vars multiple levels', function () {
                var result = generate_test_util_1.generateStylableRoot({
                    entry: "/entry.st.css",
                    files: {
                        '/entry.st.css': {
                            namespace: 'entry',
                            content: "\n                        :import {\n                            -st-from: \"./imported.st.css\";\n                            -st-named: y;\n                        }\n\n                        .x {\n                            -st-mixin: y(color1 green, color2 yellow);\n                        }\n                    "
                        },
                        '/imported.st.css': {
                            namespace: 'imported',
                            content: "\n                            :import {\n                                -st-from: \"./mixin.st.css\";\n                                -st-named: z;\n                            }\n                            :vars {\n                                color1: red;\n                                color2: blue;\n                            }\n                            .y {\n                                -st-mixin: z(color3 value(color1), color4 value(color2));\n                            }\n                        "
                        },
                        '/mixin.st.css': {
                            namespace: 'mixin',
                            content: "\n                            :vars {\n                                color3: red;\n                                color4: blue;\n                            }\n                            .z {\n                                border: 1px solid value(color3);\n                                background: value(color4);\n                            }\n                        "
                        }
                    }
                });
                matchRuleAndDeclaration(result, 0, '.entry--x', 'border: 1px solid green;background: yellow');
            });
        });
        describe('Mixins with named parameters', function () {
            it('apply mixin with :vars override (local scope)', function () {
                var result = generate_test_util_1.generateStylableRoot({
                    entry: "/entry.st.css",
                    files: {
                        '/entry.st.css': {
                            namespace: 'entry',
                            content: "\n                                :vars {\n                                    color1: red;\n                                }\n\n                                .x {\n                                    -st-mixin: y(color1 green);\n                                }\n\n                                .y {color:value(color1);}\n\n                            "
                        }
                    }
                });
                matchRuleAndDeclaration(result, 0, '.entry--x', 'color:green');
            });
            it('apply mixin with :vars override with space in value', function () {
                var result = generate_test_util_1.generateStylableRoot({
                    entry: "/entry.st.css",
                    files: {
                        '/entry.st.css': {
                            namespace: 'entry',
                            content: "\n                                :vars {\n                                    border1: red;\n                                }\n\n                                .x {\n                                    -st-mixin: y(border1 1px solid red);\n                                }\n\n                                .y {border:value(border1);}\n\n                            "
                        }
                    }
                });
                matchRuleAndDeclaration(result, 0, '.entry--x', 'border:1px solid red');
            });
            it('apply mixin with :vars override', function () {
                var result = generate_test_util_1.generateStylableRoot({
                    entry: "/entry.st.css",
                    files: {
                        '/entry.st.css': {
                            namespace: 'entry',
                            content: "\n                                :import {\n                                    -st-from: \"./imported.st.css\";\n                                    -st-named: y;\n                                }\n\n                                .x {\n                                    -st-mixin: y(color1 green);\n                                }\n                            "
                        },
                        '/imported.st.css': {
                            namespace: 'imported',
                            content: "\n                            :vars {\n                                color1: red;\n                            }\n                            .y {color:value(color1);}\n                        "
                        }
                    }
                });
                matchRuleAndDeclaration(result, 0, '.entry--x', 'color:green');
            });
            it('apply mixin with :vars multiple override', function () {
                var result = generate_test_util_1.generateStylableRoot({
                    entry: "/entry.st.css",
                    files: {
                        '/entry.st.css': {
                            namespace: 'entry',
                            content: "\n                                .x {\n                                    -st-mixin: y(color1 green, color2 yellow);\n                                }\n\n                                .y {\n                                    color:value(color1);\n                                    background:value(color2);\n                                }\n                            "
                        }
                    }
                });
                matchRuleAndDeclaration(result, 0, '.entry--x', 'color:green;background:yellow');
            });
        });
    });
    describe('mixin diagnostics', function () {
        it('should not report missing function on -st-mixin directive', function () {
            var result = generate_test_util_1.generateFromMock({
                entry: "/entry.st.css",
                files: {
                    '/entry.st.css': {
                        namespace: 'entry',
                        content: "\n                            :import {\n                                -st-from: \"./imported.st.css\";\n                                -st-named: y;\n                            }\n\n                            .x {\n                                -st-mixin: y(color1 green, color2 yellow);\n                            }\n                        "
                    }
                }
            });
            chai_1.expect(result.meta.transformDiagnostics.reports.length).to.equal(0);
        });
    });
});
//# sourceMappingURL=mixins.spec.js.map