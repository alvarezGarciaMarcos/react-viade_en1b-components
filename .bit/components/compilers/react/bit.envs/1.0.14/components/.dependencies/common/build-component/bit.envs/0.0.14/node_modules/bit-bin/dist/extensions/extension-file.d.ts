/// <reference types="node" />
import { AbstractVinyl } from '../consumer/component/sources';
import { PathOsBased, PathLinux } from '../utils/path';
import { Repository, Ref } from '../scope/objects';
import { EnvType } from './env-extension-types';
export declare type ExtensionFileModel = {
    name: string;
    relativePath: PathLinux;
    file: Ref;
};
export declare type ExtensionFileSerializedModel = {
    name: string;
    relativePath: PathLinux;
    file: {
        contents: Buffer;
    };
};
export declare type ExtensionFileObject = {
    name: string;
    relativePath: PathLinux;
    file: string;
};
export default class ExtensionFile extends AbstractVinyl {
    static load(name: string, filePath: PathOsBased, consumerPath: PathOsBased, base?: PathOsBased, extendedProps?: Record<string, any>): Promise<ExtensionFile>;
    static loadFromBitJsonObject(bitJsonObj: PathOsBased, consumerPath: PathOsBased, bitJsonDirPath: PathOsBased, envType?: EnvType): Promise<ExtensionFile[]>;
    static loadFromParsedString(parsedString: Record<string, any>): ExtensionFile | null | undefined;
    static loadFromParsedStringArray(arr: Record<string, any>[]): Array<null | undefined | ExtensionFile>;
    static loadFromExtensionFileModel(file: ExtensionFileModel, repository: Repository): Promise<ExtensionFile>;
    static loadFromExtensionFileSerializedModel(file: ExtensionFileSerializedModel): Promise<ExtensionFile>;
    static fromModelObjectToObject(file: ExtensionFileModel): ExtensionFileObject;
    static fromObjectToModelObject(file: ExtensionFileObject): ExtensionFileModel;
    toModelObject(): ExtensionFileModel;
    toReadableString(): {
        name: any;
        content: any;
    };
    clone(): ExtensionFile;
}
