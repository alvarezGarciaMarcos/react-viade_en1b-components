"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DIAGNOSIS_NAME = void 0;

function _bluebird() {
  const data = require("bluebird");

  _bluebird = function () {
    return data;
  };

  return data;
}

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _execa() {
  const data = _interopRequireDefault(require("execa"));

  _execa = function () {
    return data;
  };

  return data;
}

function _ramda() {
  const data = _interopRequireDefault(require("ramda"));

  _ramda = function () {
    return data;
  };

  return data;
}

function _diagnosis() {
  const data = _interopRequireDefault(require("../diagnosis"));

  _diagnosis = function () {
    return data;
  };

  return data;
}

function _gitExecutable() {
  const data = _interopRequireDefault(require("../../utils/git/git-executable"));

  _gitExecutable = function () {
    return data;
  };

  return data;
}

const DIAGNOSIS_NAME = 'validate git exec';
exports.DIAGNOSIS_NAME = DIAGNOSIS_NAME;

class ValidateGitExec extends _diagnosis().default {
  constructor(...args) {
    super(...args);
    (0, _defineProperty2().default)(this, "name", DIAGNOSIS_NAME);
    (0, _defineProperty2().default)(this, "description", 'validate that git executable found');
    (0, _defineProperty2().default)(this, "category", 'vendors');
  }

  _formatSymptoms(bareResult) {
    const gitExecutablePath = _ramda().default.path(['data', 'gitExecutablePath'], bareResult);

    return `git executable not found (path '${gitExecutablePath}')`;
  }

  _formatManualTreat() {
    return "please ensure that git is installed and/or git_path is configured correctly - 'bit config set git_path <GIT_PATH>'";
  }

  _runExamine() {
    return (0, _bluebird().coroutine)(function* () {
      const gitExecutablePath = (0, _gitExecutable().default)();

      try {
        yield (0, _execa().default)(gitExecutablePath, ['--version']);
        return {
          valid: true
        };
      } catch (err) {
        // if (err.code === 'ENOENT') {
        // }
        return {
          valid: false,
          data: {
            gitExecutablePath
          }
        };
      }
    })();
  }

}

exports.default = ValidateGitExec;