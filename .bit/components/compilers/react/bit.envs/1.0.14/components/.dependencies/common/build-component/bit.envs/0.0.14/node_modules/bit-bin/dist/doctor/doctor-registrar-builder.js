"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = registerCoreAndExtensionsDiagnoses;

function _doctorRegistrar() {
  const data = _interopRequireDefault(require("./doctor-registrar"));

  _doctorRegistrar = function () {
    return data;
  };

  return data;
}

function _validateWorkspaceBitJsonSyntax() {
  const data = _interopRequireDefault(require("./core-diagnoses/validate-workspace-bit-json-syntax"));

  _validateWorkspaceBitJsonSyntax = function () {
    return data;
  };

  return data;
}

function _validateGitExec() {
  const data = _interopRequireDefault(require("./core-diagnoses/validate-git-exec"));

  _validateGitExec = function () {
    return data;
  };

  return data;
}

function _orphanSymlinkObjects() {
  const data = _interopRequireDefault(require("./core-diagnoses/orphan-symlink-objects"));

  _orphanSymlinkObjects = function () {
    return data;
  };

  return data;
}

function _brokenSymlinkFiles() {
  const data = _interopRequireDefault(require("./core-diagnoses/broken-symlink-files"));

  _brokenSymlinkFiles = function () {
    return data;
  };

  return data;
}

function _validateNpmExec() {
  const data = _interopRequireDefault(require("./core-diagnoses/validate-npm-exec"));

  _validateNpmExec = function () {
    return data;
  };

  return data;
}

function _validateYarnExec() {
  const data = _interopRequireDefault(require("./core-diagnoses/validate-yarn-exec"));

  _validateYarnExec = function () {
    return data;
  };

  return data;
}

function _validateBitVersion() {
  const data = _interopRequireDefault(require("./core-diagnoses/validate-bit-version"));

  _validateBitVersion = function () {
    return data;
  };

  return data;
}

function registerCoreAndExtensionsDiagnoses(extensionDiagnoses = []) {
  const diagnoses = [new (_validateWorkspaceBitJsonSyntax().default)(), new (_validateGitExec().default)(), new (_orphanSymlinkObjects().default)(), new (_brokenSymlinkFiles().default)(), new (_validateNpmExec().default)(), new (_validateYarnExec().default)(), new (_validateBitVersion().default)()].concat(extensionDiagnoses);

  _doctorRegistrar().default.init(diagnoses);
}