import { BitIds } from '../../bit-id';
import Component from '../component/consumer-component';
import Consumer from '../consumer';
import { PathLinux, PathRelative } from '../../utils/path';
import JSONFile from './sources/json-file';
import PackageJsonFile from './package-json-file';
import ComponentVersion from '../../scope/component-version';
import BitMap from '../bit-map/bit-map';
export declare function addComponentsToRoot(consumer: Consumer, components: Component[]): Promise<void>;
export declare function addComponentsWithVersionToRoot(consumer: Consumer, componentsVersions: ComponentVersion[]): Promise<void>;
export declare function changeDependenciesToRelativeSyntax(consumer: Consumer, components: Component[], dependencies: Component[]): Promise<JSONFile[]>;
export declare function preparePackageJsonToWrite(bitMap: BitMap, component: Component, bitDir: string, override?: boolean | undefined, writeBitDependencies?: boolean | undefined, excludeRegistryPrefix?: boolean): {
    packageJson: PackageJsonFile;
    distPackageJson: PackageJsonFile | null | undefined;
};
export declare function updateAttribute(consumer: Consumer, componentDir: PathRelative, attributeName: string, attributeValue: string): Promise<void>;
export declare function addWorkspacesToPackageJson(consumer: Consumer, customImportPath: string | null | undefined): Promise<void>;
export declare function removeComponentsFromWorkspacesAndDependencies(consumer: Consumer, componentIds: BitIds): Promise<void>;
export declare function convertToValidPathForPackageManager(pathStr: PathLinux): string;
