"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

function _chai() {
  const data = require("chai");

  _chai = function () {
    return data;
  };

  return data;
}

function _searchFilesIgnoreExt() {
  const data = _interopRequireDefault(require("./search-files-ignore-ext"));

  _searchFilesIgnoreExt = function () {
    return data;
  };

  return data;
}

describe('searchFilesIgnoreExt', () => {
  const getResults = files => (0, _searchFilesIgnoreExt().default)(files, 'foo/bar.ts', 'relative');

  it('should find the same file with a different extension', () => {
    const files = [{
      relative: 'foo/baz.js'
    }, {
      relative: 'foo/bar.js'
    }];
    const result = getResults(files);
    (0, _chai().expect)(result).to.equal('foo/bar.js');
  });
  it('should not return map.js files', () => {
    const files = [{
      relative: 'foo/bar.map.js'
    }];
    const result = getResults(files);
    (0, _chai().expect)(result).to.be.null;
  });
  it('should accept .d.ts files', () => {
    const files = [{
      relative: 'foo/bar.d.ts'
    }];
    const result = getResults(files);
    (0, _chai().expect)(result).to.equal('foo/bar.d.ts');
  });
  it('should prioritize .js over .d.ts files', () => {
    const files = [{
      relative: 'foo/bar.d.ts'
    }, {
      relative: 'foo/bar.js'
    }];
    const result = getResults(files);
    (0, _chai().expect)(result).to.equal('foo/bar.js');
  });
  it('should prioritize .js over any other extension', () => {
    const files = [{
      relative: 'foo/bar.gif'
    }, {
      relative: 'foo/bar.js'
    }];
    const result = getResults(files);
    (0, _chai().expect)(result).to.equal('foo/bar.js');
  });
  it('should prioritize any other extension over .d.ts files', () => {
    const files = [{
      relative: 'foo/bar.d.ts'
    }, {
      relative: 'foo/bar.css'
    }];
    const result = getResults(files);
    (0, _chai().expect)(result).to.equal('foo/bar.css');
  });
});