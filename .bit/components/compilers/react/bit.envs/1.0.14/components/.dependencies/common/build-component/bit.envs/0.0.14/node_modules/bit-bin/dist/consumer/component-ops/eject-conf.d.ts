import ConsumerComponent from '../component/consumer-component';
import BitMap from '../bit-map';
import ConfigDir from '../bit-map/config-dir';
import Consumer from '../consumer';
import CompilerExtension from '../../extensions/compiler-extension';
import TesterExtension from '../../extensions/tester-extension';
import { PathOsBased } from '../../utils/path';
import DataToPersist from '../component/sources/data-to-persist';
export declare type EjectConfResult = {
    id: string;
    ejectedPath: string;
    ejectedFullPath: string;
};
export declare type EjectConfData = {
    id: string;
    ejectedPath: string;
    ejectedFullPath?: string;
    dataToPersist: DataToPersist;
};
declare const _default: (component: ConsumerComponent, consumer: Consumer, configDir: ConfigDir) => Promise<EjectConfResult>;
export default _default;
export declare function getEjectConfDataToPersist(component: ConsumerComponent, consumer: Consumer | null | undefined, bitMap: BitMap, configDir: ConfigDir): Promise<EjectConfData>;
export declare function writeEnvFiles({ configDir, env, consumer, component, deleteOldFiles, verbose }: {
    configDir: PathOsBased;
    env?: CompilerExtension | null | undefined | TesterExtension;
    consumer?: Consumer | null | undefined;
    component: ConsumerComponent;
    deleteOldFiles: boolean;
    verbose: boolean;
}): Promise<PathOsBased>;
export declare function populateEnvFilesToWrite({ configDir, env, consumer, bitMap, component, deleteOldFiles, verbose }: {
    configDir: PathOsBased;
    env?: CompilerExtension | null | undefined | TesterExtension;
    consumer?: Consumer | null | undefined;
    bitMap?: BitMap;
    component: ConsumerComponent;
    deleteOldFiles: boolean;
    verbose: boolean;
}): Promise<PathOsBased>;
