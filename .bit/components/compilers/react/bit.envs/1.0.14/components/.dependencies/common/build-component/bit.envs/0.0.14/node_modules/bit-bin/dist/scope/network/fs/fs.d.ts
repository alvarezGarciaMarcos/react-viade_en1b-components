import ComponentObjects from '../../component-objects';
import { BitIds, BitId } from '../../../bit-id';
import Scope, { ScopeDescriptor } from '../../scope';
import { Network } from '../network';
import { ListScopeResult } from '../../../consumer/component/components-list';
import DependencyGraph from '../../graph/scope-graph';
export default class Fs implements Network {
    scopePath: string;
    scope: Scope | null | undefined;
    constructor(scopePath: string);
    close(): this;
    getScope(): Scope;
    describeScope(): Promise<ScopeDescriptor>;
    push(componentObjects: ComponentObjects): Promise<string[]>;
    pushMany(components: ComponentObjects[]): Promise<string[]>;
    deleteMany(ids: string[], force: boolean): Promise<ComponentObjects[]>;
    deprecateMany(ids: string[]): Promise<ComponentObjects[]>;
    undeprecateMany(ids: string[]): Promise<ComponentObjects[]>;
    fetch(bitIds: BitIds, noDependencies?: boolean): Promise<ComponentObjects[]>;
    latestVersions(componentIds: BitId[]): Promise<string[]>;
    list(namespacesUsingWildcards?: string): Promise<ListScopeResult[]>;
    search(query: string, reindex: boolean): Promise<[]>;
    show(bitId: BitId): Promise;
    graph(bitId?: BitId): Promise<DependencyGraph>;
    connect(): Promise<this>;
}
