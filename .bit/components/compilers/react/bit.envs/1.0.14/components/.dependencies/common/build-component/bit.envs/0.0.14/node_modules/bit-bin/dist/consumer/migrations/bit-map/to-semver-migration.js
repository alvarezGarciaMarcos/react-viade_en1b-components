"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _ramda() {
  const data = _interopRequireDefault(require("ramda"));

  _ramda = function () {
    return data;
  };

  return data;
}

function _semver() {
  const data = _interopRequireDefault(require("semver"));

  _semver = function () {
    return data;
  };

  return data;
}

function _constants() {
  const data = require("../../../constants");

  _constants = function () {
    return data;
  };

  return data;
}

/**
 * Change all the component's version to be a valid semver
 * @param {*} bitMap - The bit map object
 */
function changeVersionToSemVer(bitMap) {
  const addUpdatedVersion = (value, key) => {
    // In case there is already a semver, do nothing
    const splitedId = key.split(_constants().VERSION_DELIMITER);
    const version = splitedId[1];

    if (version && !_semver().default.valid(version)) {
      const newVersion = `0.0.${version}`;
      const newId = `${splitedId[0]}${_constants().VERSION_DELIMITER}${newVersion}`;
      bitMap.components[newId] = value;
      delete bitMap.components[key];
    }
  }; // Go over the versions array and update them


  _ramda().default.forEachObjIndexed(addUpdatedVersion, bitMap.getAllComponents());

  return bitMap;
}

const changeVersionToSemVerDeclartaion = {
  name: 'change bit map versions to SemVer',
  migrate: changeVersionToSemVer
};
var _default = changeVersionToSemVerDeclartaion;
exports.default = _default;