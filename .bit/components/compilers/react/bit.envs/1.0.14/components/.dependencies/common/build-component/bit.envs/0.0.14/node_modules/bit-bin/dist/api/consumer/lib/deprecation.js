"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deprecate = deprecate;
exports.undeprecate = undeprecate;

function _bluebird() {
  const data = require("bluebird");

  _bluebird = function () {
    return data;
  };

  return data;
}

function _consumer() {
  const data = require("../../../consumer");

  _consumer = function () {
    return data;
  };

  return data;
}

function _loader() {
  const data = _interopRequireDefault(require("../../../cli/loader"));

  _loader = function () {
    return data;
  };

  return data;
}

function _loaderMessages() {
  const data = require("../../../cli/loader/loader-messages");

  _loaderMessages = function () {
    return data;
  };

  return data;
}

function _bitId() {
  const data = require("../../../bit-id");

  _bitId = function () {
    return data;
  };

  return data;
}

function _componentsDeprecation() {
  const data = require("../../../scope/component-ops/components-deprecation");

  _componentsDeprecation = function () {
    return data;
  };

  return data;
}

function _remotes() {
  const data = require("../../../remotes");

  _remotes = function () {
    return data;
  };

  return data;
}

function _scopeRemotes() {
  const data = require("../../../scope/scope-remotes");

  _scopeRemotes = function () {
    return data;
  };

  return data;
}

function _bitIds() {
  const data = _interopRequireDefault(require("../../../bit-id/bit-ids"));

  _bitIds = function () {
    return data;
  };

  return data;
}

function deprecate(_x) {
  return _deprecate.apply(this, arguments);
}

function _deprecate() {
  _deprecate = (0, _bluebird().coroutine)(function* ({
    ids,
    remote
  }) {
    if (remote) {
      _loader().default.start(_loaderMessages().BEFORE_REMOTE_DEPRECATE);

      const consumer = yield (0, _consumer().loadConsumerIfExist)();
      const bitIds = getBitIdsForRemote(ids);
      const remotes = yield getRemotes(consumer);
      const scope = consumer ? consumer.scope : null;
      return (0, _componentsDeprecation().deprecateRemote)(remotes, scope, bitIds);
    }

    const consumer = yield (0, _consumer().loadConsumer)();
    const bitIds = getBitIdsForLocal(ids, consumer);
    return (0, _componentsDeprecation().deprecateMany)(consumer.scope, bitIds);
  });
  return _deprecate.apply(this, arguments);
}

function undeprecate(_x2) {
  return _undeprecate.apply(this, arguments);
}

function _undeprecate() {
  _undeprecate = (0, _bluebird().coroutine)(function* ({
    ids,
    remote
  }) {
    if (remote) {
      _loader().default.start(_loaderMessages().BEFORE_REMOTE_UNDEPRECATE);

      const consumer = yield (0, _consumer().loadConsumerIfExist)();
      const bitIds = getBitIdsForRemote(ids);
      const remotes = yield getRemotes(consumer);
      const scope = consumer ? consumer.scope : null;
      return (0, _componentsDeprecation().undeprecateRemote)(remotes, scope, bitIds);
    }

    const consumer = yield (0, _consumer().loadConsumer)();
    const bitIds = getBitIdsForLocal(ids, consumer);
    return (0, _componentsDeprecation().undeprecateMany)(consumer.scope, bitIds);
  });
  return _undeprecate.apply(this, arguments);
}

function getRemotes(consumer) {
  return consumer ? (0, _scopeRemotes().getScopeRemotes)(consumer.scope) : _remotes().Remotes.getGlobalRemotes();
}

function getBitIdsForLocal(ids, consumer) {
  return _bitIds().default.fromArray(ids.map(id => consumer.getParsedId(id)));
}

function getBitIdsForRemote(ids) {
  return ids.map(id => _bitId().BitId.parse(id, true));
}